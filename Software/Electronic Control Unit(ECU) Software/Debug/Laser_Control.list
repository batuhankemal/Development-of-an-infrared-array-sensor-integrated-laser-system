
Laser_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b834  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800ba08  0800ba08  0001ba08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c02c  0800c02c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c02c  0800c02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c034  0800c034  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  200001e0  0800c21c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  0800c21c  00021530  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001616d  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369d  00000000  00000000  00036377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262bd  00000000  00000000  0003bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cd4  00000000  00000000  0006207d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e128d  00000000  00000000  0007ad51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bfde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  0015c030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9ec 	.word	0x0800b9ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b9ec 	.word	0x0800b9ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__gesf2>:
 8000ee4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ee8:	e006      	b.n	8000ef8 <__cmpsf2+0x4>
 8000eea:	bf00      	nop

08000eec <__lesf2>:
 8000eec:	f04f 0c01 	mov.w	ip, #1
 8000ef0:	e002      	b.n	8000ef8 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__cmpsf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000efc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f08:	bf18      	it	ne
 8000f0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f0e:	d011      	beq.n	8000f34 <__cmpsf2+0x40>
 8000f10:	b001      	add	sp, #4
 8000f12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f16:	bf18      	it	ne
 8000f18:	ea90 0f01 	teqne	r0, r1
 8000f1c:	bf58      	it	pl
 8000f1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f22:	bf88      	it	hi
 8000f24:	17c8      	asrhi	r0, r1, #31
 8000f26:	bf38      	it	cc
 8000f28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f2c:	bf18      	it	ne
 8000f2e:	f040 0001 	orrne.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f38:	d102      	bne.n	8000f40 <__cmpsf2+0x4c>
 8000f3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f3e:	d105      	bne.n	8000f4c <__cmpsf2+0x58>
 8000f40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f44:	d1e4      	bne.n	8000f10 <__cmpsf2+0x1c>
 8000f46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4a:	d0e1      	beq.n	8000f10 <__cmpsf2+0x1c>
 8000f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__aeabi_cfrcmple>:
 8000f54:	4684      	mov	ip, r0
 8000f56:	4608      	mov	r0, r1
 8000f58:	4661      	mov	r1, ip
 8000f5a:	e7ff      	b.n	8000f5c <__aeabi_cfcmpeq>

08000f5c <__aeabi_cfcmpeq>:
 8000f5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f5e:	f7ff ffc9 	bl	8000ef4 <__cmpsf2>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	bf48      	it	mi
 8000f66:	f110 0f00 	cmnmi.w	r0, #0
 8000f6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f6c <__aeabi_fcmpeq>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff fff4 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f74:	bf0c      	ite	eq
 8000f76:	2001      	moveq	r0, #1
 8000f78:	2000      	movne	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmplt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffea 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_fcmple>:
 8000f94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f98:	f7ff ffe0 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f9c:	bf94      	ite	ls
 8000f9e:	2001      	movls	r0, #1
 8000fa0:	2000      	movhi	r0, #0
 8000fa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmpge>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff ffd2 	bl	8000f54 <__aeabi_cfrcmple>
 8000fb0:	bf94      	ite	ls
 8000fb2:	2001      	movls	r0, #1
 8000fb4:	2000      	movhi	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmpgt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffc8 	bl	8000f54 <__aeabi_cfrcmple>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmpun>:
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	d102      	bne.n	8000fe4 <__aeabi_fcmpun+0x14>
 8000fde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fe2:	d108      	bne.n	8000ff6 <__aeabi_fcmpun+0x26>
 8000fe4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__aeabi_fcmpun+0x20>
 8000fea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fee:	d102      	bne.n	8000ff6 <__aeabi_fcmpun+0x26>
 8000ff0:	f04f 0000 	mov.w	r0, #0
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0001 	mov.w	r0, #1
 8000ffa:	4770      	bx	lr

08000ffc <__aeabi_f2uiz>:
 8000ffc:	0042      	lsls	r2, r0, #1
 8000ffe:	d20e      	bcs.n	800101e <__aeabi_f2uiz+0x22>
 8001000:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001004:	d30b      	bcc.n	800101e <__aeabi_f2uiz+0x22>
 8001006:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800100a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800100e:	d409      	bmi.n	8001024 <__aeabi_f2uiz+0x28>
 8001010:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001018:	fa23 f002 	lsr.w	r0, r3, r2
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr
 8001024:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001028:	d101      	bne.n	800102e <__aeabi_f2uiz+0x32>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	d102      	bne.n	8001034 <__aeabi_f2uiz+0x38>
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	4770      	bx	lr
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__aeabi_uldivmod>:
 800103c:	b953      	cbnz	r3, 8001054 <__aeabi_uldivmod+0x18>
 800103e:	b94a      	cbnz	r2, 8001054 <__aeabi_uldivmod+0x18>
 8001040:	2900      	cmp	r1, #0
 8001042:	bf08      	it	eq
 8001044:	2800      	cmpeq	r0, #0
 8001046:	bf1c      	itt	ne
 8001048:	f04f 31ff 	movne.w	r1, #4294967295
 800104c:	f04f 30ff 	movne.w	r0, #4294967295
 8001050:	f000 b9ac 	b.w	80013ac <__aeabi_idiv0>
 8001054:	f1ad 0c08 	sub.w	ip, sp, #8
 8001058:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105c:	f000 f83e 	bl	80010dc <__udivmoddi4>
 8001060:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr

0800106c <__aeabi_d2lz>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4605      	mov	r5, r0
 8001070:	460c      	mov	r4, r1
 8001072:	4628      	mov	r0, r5
 8001074:	4621      	mov	r1, r4
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	f7ff fd4f 	bl	8000b1c <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x20>
 8001080:	4628      	mov	r0, r5
 8001082:	4621      	mov	r1, r4
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4628      	mov	r0, r5
 800108e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__aeabi_d2ulz+0x34>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fac5 	bl	8000638 <__aeabi_dmul>
 80010ae:	f7ff fd9b 	bl	8000be8 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff fa46 	bl	8000544 <__aeabi_ui2d>
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <__aeabi_d2ulz+0x38>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f7ff fabc 	bl	8000638 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f8fe 	bl	80002c8 <__aeabi_dsub>
 80010cc:	f7ff fd8c 	bl	8000be8 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9e08      	ldr	r6, [sp, #32]
 80010e2:	460d      	mov	r5, r1
 80010e4:	4604      	mov	r4, r0
 80010e6:	4688      	mov	r8, r1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d14d      	bne.n	8001188 <__udivmoddi4+0xac>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4694      	mov	ip, r2
 80010f0:	d968      	bls.n	80011c4 <__udivmoddi4+0xe8>
 80010f2:	fab2 f282 	clz	r2, r2
 80010f6:	b152      	cbz	r2, 800110e <__udivmoddi4+0x32>
 80010f8:	fa01 f302 	lsl.w	r3, r1, r2
 80010fc:	f1c2 0120 	rsb	r1, r2, #32
 8001100:	fa20 f101 	lsr.w	r1, r0, r1
 8001104:	fa0c fc02 	lsl.w	ip, ip, r2
 8001108:	ea41 0803 	orr.w	r8, r1, r3
 800110c:	4094      	lsls	r4, r2
 800110e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	fbb8 fef5 	udiv	lr, r8, r5
 8001118:	fa1f f78c 	uxth.w	r7, ip
 800111c:	fb05 831e 	mls	r3, r5, lr, r8
 8001120:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001124:	fb0e f107 	mul.w	r1, lr, r7
 8001128:	4299      	cmp	r1, r3
 800112a:	d90b      	bls.n	8001144 <__udivmoddi4+0x68>
 800112c:	eb1c 0303 	adds.w	r3, ip, r3
 8001130:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001134:	f080 811e 	bcs.w	8001374 <__udivmoddi4+0x298>
 8001138:	4299      	cmp	r1, r3
 800113a:	f240 811b 	bls.w	8001374 <__udivmoddi4+0x298>
 800113e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001142:	4463      	add	r3, ip
 8001144:	1a5b      	subs	r3, r3, r1
 8001146:	b2a4      	uxth	r4, r4
 8001148:	fbb3 f0f5 	udiv	r0, r3, r5
 800114c:	fb05 3310 	mls	r3, r5, r0, r3
 8001150:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001154:	fb00 f707 	mul.w	r7, r0, r7
 8001158:	42a7      	cmp	r7, r4
 800115a:	d90a      	bls.n	8001172 <__udivmoddi4+0x96>
 800115c:	eb1c 0404 	adds.w	r4, ip, r4
 8001160:	f100 33ff 	add.w	r3, r0, #4294967295
 8001164:	f080 8108 	bcs.w	8001378 <__udivmoddi4+0x29c>
 8001168:	42a7      	cmp	r7, r4
 800116a:	f240 8105 	bls.w	8001378 <__udivmoddi4+0x29c>
 800116e:	4464      	add	r4, ip
 8001170:	3802      	subs	r0, #2
 8001172:	1be4      	subs	r4, r4, r7
 8001174:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001178:	2100      	movs	r1, #0
 800117a:	b11e      	cbz	r6, 8001184 <__udivmoddi4+0xa8>
 800117c:	40d4      	lsrs	r4, r2
 800117e:	2300      	movs	r3, #0
 8001180:	e9c6 4300 	strd	r4, r3, [r6]
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	428b      	cmp	r3, r1
 800118a:	d908      	bls.n	800119e <__udivmoddi4+0xc2>
 800118c:	2e00      	cmp	r6, #0
 800118e:	f000 80ee 	beq.w	800136e <__udivmoddi4+0x292>
 8001192:	2100      	movs	r1, #0
 8001194:	e9c6 0500 	strd	r0, r5, [r6]
 8001198:	4608      	mov	r0, r1
 800119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119e:	fab3 f183 	clz	r1, r3
 80011a2:	2900      	cmp	r1, #0
 80011a4:	d14a      	bne.n	800123c <__udivmoddi4+0x160>
 80011a6:	42ab      	cmp	r3, r5
 80011a8:	d302      	bcc.n	80011b0 <__udivmoddi4+0xd4>
 80011aa:	4282      	cmp	r2, r0
 80011ac:	f200 80f9 	bhi.w	80013a2 <__udivmoddi4+0x2c6>
 80011b0:	1a84      	subs	r4, r0, r2
 80011b2:	eb65 0303 	sbc.w	r3, r5, r3
 80011b6:	2001      	movs	r0, #1
 80011b8:	4698      	mov	r8, r3
 80011ba:	2e00      	cmp	r6, #0
 80011bc:	d0e2      	beq.n	8001184 <__udivmoddi4+0xa8>
 80011be:	e9c6 4800 	strd	r4, r8, [r6]
 80011c2:	e7df      	b.n	8001184 <__udivmoddi4+0xa8>
 80011c4:	b902      	cbnz	r2, 80011c8 <__udivmoddi4+0xec>
 80011c6:	deff      	udf	#255	; 0xff
 80011c8:	fab2 f282 	clz	r2, r2
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	f040 8091 	bne.w	80012f4 <__udivmoddi4+0x218>
 80011d2:	eba1 050c 	sub.w	r5, r1, ip
 80011d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011da:	fa1f fe8c 	uxth.w	lr, ip
 80011de:	2101      	movs	r1, #1
 80011e0:	fbb5 f3f7 	udiv	r3, r5, r7
 80011e4:	fb07 5013 	mls	r0, r7, r3, r5
 80011e8:	0c25      	lsrs	r5, r4, #16
 80011ea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011ee:	fb0e f003 	mul.w	r0, lr, r3
 80011f2:	42a8      	cmp	r0, r5
 80011f4:	d908      	bls.n	8001208 <__udivmoddi4+0x12c>
 80011f6:	eb1c 0505 	adds.w	r5, ip, r5
 80011fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80011fe:	d202      	bcs.n	8001206 <__udivmoddi4+0x12a>
 8001200:	42a8      	cmp	r0, r5
 8001202:	f200 80cb 	bhi.w	800139c <__udivmoddi4+0x2c0>
 8001206:	4643      	mov	r3, r8
 8001208:	1a2d      	subs	r5, r5, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	fbb5 f0f7 	udiv	r0, r5, r7
 8001210:	fb07 5510 	mls	r5, r7, r0, r5
 8001214:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001218:	fb0e fe00 	mul.w	lr, lr, r0
 800121c:	45a6      	cmp	lr, r4
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0x156>
 8001220:	eb1c 0404 	adds.w	r4, ip, r4
 8001224:	f100 35ff 	add.w	r5, r0, #4294967295
 8001228:	d202      	bcs.n	8001230 <__udivmoddi4+0x154>
 800122a:	45a6      	cmp	lr, r4
 800122c:	f200 80bb 	bhi.w	80013a6 <__udivmoddi4+0x2ca>
 8001230:	4628      	mov	r0, r5
 8001232:	eba4 040e 	sub.w	r4, r4, lr
 8001236:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800123a:	e79e      	b.n	800117a <__udivmoddi4+0x9e>
 800123c:	f1c1 0720 	rsb	r7, r1, #32
 8001240:	408b      	lsls	r3, r1
 8001242:	fa22 fc07 	lsr.w	ip, r2, r7
 8001246:	ea4c 0c03 	orr.w	ip, ip, r3
 800124a:	fa20 f407 	lsr.w	r4, r0, r7
 800124e:	fa05 f301 	lsl.w	r3, r5, r1
 8001252:	431c      	orrs	r4, r3
 8001254:	40fd      	lsrs	r5, r7
 8001256:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fbb5 f8f9 	udiv	r8, r5, r9
 8001262:	0c20      	lsrs	r0, r4, #16
 8001264:	fa1f fe8c 	uxth.w	lr, ip
 8001268:	fb09 5518 	mls	r5, r9, r8, r5
 800126c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001270:	fb08 f00e 	mul.w	r0, r8, lr
 8001274:	42a8      	cmp	r0, r5
 8001276:	fa02 f201 	lsl.w	r2, r2, r1
 800127a:	d90b      	bls.n	8001294 <__udivmoddi4+0x1b8>
 800127c:	eb1c 0505 	adds.w	r5, ip, r5
 8001280:	f108 3aff 	add.w	sl, r8, #4294967295
 8001284:	f080 8088 	bcs.w	8001398 <__udivmoddi4+0x2bc>
 8001288:	42a8      	cmp	r0, r5
 800128a:	f240 8085 	bls.w	8001398 <__udivmoddi4+0x2bc>
 800128e:	f1a8 0802 	sub.w	r8, r8, #2
 8001292:	4465      	add	r5, ip
 8001294:	1a2d      	subs	r5, r5, r0
 8001296:	b2a4      	uxth	r4, r4
 8001298:	fbb5 f0f9 	udiv	r0, r5, r9
 800129c:	fb09 5510 	mls	r5, r9, r0, r5
 80012a0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80012a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012a8:	45ae      	cmp	lr, r5
 80012aa:	d908      	bls.n	80012be <__udivmoddi4+0x1e2>
 80012ac:	eb1c 0505 	adds.w	r5, ip, r5
 80012b0:	f100 34ff 	add.w	r4, r0, #4294967295
 80012b4:	d26c      	bcs.n	8001390 <__udivmoddi4+0x2b4>
 80012b6:	45ae      	cmp	lr, r5
 80012b8:	d96a      	bls.n	8001390 <__udivmoddi4+0x2b4>
 80012ba:	3802      	subs	r0, #2
 80012bc:	4465      	add	r5, ip
 80012be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012c2:	fba0 9402 	umull	r9, r4, r0, r2
 80012c6:	eba5 050e 	sub.w	r5, r5, lr
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	46c8      	mov	r8, r9
 80012ce:	46a6      	mov	lr, r4
 80012d0:	d356      	bcc.n	8001380 <__udivmoddi4+0x2a4>
 80012d2:	d053      	beq.n	800137c <__udivmoddi4+0x2a0>
 80012d4:	b15e      	cbz	r6, 80012ee <__udivmoddi4+0x212>
 80012d6:	ebb3 0208 	subs.w	r2, r3, r8
 80012da:	eb65 050e 	sbc.w	r5, r5, lr
 80012de:	fa05 f707 	lsl.w	r7, r5, r7
 80012e2:	fa22 f301 	lsr.w	r3, r2, r1
 80012e6:	40cd      	lsrs	r5, r1
 80012e8:	431f      	orrs	r7, r3
 80012ea:	e9c6 7500 	strd	r7, r5, [r6]
 80012ee:	2100      	movs	r1, #0
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f4:	f1c2 0320 	rsb	r3, r2, #32
 80012f8:	fa20 f103 	lsr.w	r1, r0, r3
 80012fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001300:	fa25 f303 	lsr.w	r3, r5, r3
 8001304:	4095      	lsls	r5, r2
 8001306:	430d      	orrs	r5, r1
 8001308:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800130c:	fa1f fe8c 	uxth.w	lr, ip
 8001310:	fbb3 f1f7 	udiv	r1, r3, r7
 8001314:	fb07 3011 	mls	r0, r7, r1, r3
 8001318:	0c2b      	lsrs	r3, r5, #16
 800131a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800131e:	fb01 f00e 	mul.w	r0, r1, lr
 8001322:	4298      	cmp	r0, r3
 8001324:	fa04 f402 	lsl.w	r4, r4, r2
 8001328:	d908      	bls.n	800133c <__udivmoddi4+0x260>
 800132a:	eb1c 0303 	adds.w	r3, ip, r3
 800132e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001332:	d22f      	bcs.n	8001394 <__udivmoddi4+0x2b8>
 8001334:	4298      	cmp	r0, r3
 8001336:	d92d      	bls.n	8001394 <__udivmoddi4+0x2b8>
 8001338:	3902      	subs	r1, #2
 800133a:	4463      	add	r3, ip
 800133c:	1a1b      	subs	r3, r3, r0
 800133e:	b2ad      	uxth	r5, r5
 8001340:	fbb3 f0f7 	udiv	r0, r3, r7
 8001344:	fb07 3310 	mls	r3, r7, r0, r3
 8001348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800134c:	fb00 f30e 	mul.w	r3, r0, lr
 8001350:	42ab      	cmp	r3, r5
 8001352:	d908      	bls.n	8001366 <__udivmoddi4+0x28a>
 8001354:	eb1c 0505 	adds.w	r5, ip, r5
 8001358:	f100 38ff 	add.w	r8, r0, #4294967295
 800135c:	d216      	bcs.n	800138c <__udivmoddi4+0x2b0>
 800135e:	42ab      	cmp	r3, r5
 8001360:	d914      	bls.n	800138c <__udivmoddi4+0x2b0>
 8001362:	3802      	subs	r0, #2
 8001364:	4465      	add	r5, ip
 8001366:	1aed      	subs	r5, r5, r3
 8001368:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800136c:	e738      	b.n	80011e0 <__udivmoddi4+0x104>
 800136e:	4631      	mov	r1, r6
 8001370:	4630      	mov	r0, r6
 8001372:	e707      	b.n	8001184 <__udivmoddi4+0xa8>
 8001374:	4686      	mov	lr, r0
 8001376:	e6e5      	b.n	8001144 <__udivmoddi4+0x68>
 8001378:	4618      	mov	r0, r3
 800137a:	e6fa      	b.n	8001172 <__udivmoddi4+0x96>
 800137c:	454b      	cmp	r3, r9
 800137e:	d2a9      	bcs.n	80012d4 <__udivmoddi4+0x1f8>
 8001380:	ebb9 0802 	subs.w	r8, r9, r2
 8001384:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001388:	3801      	subs	r0, #1
 800138a:	e7a3      	b.n	80012d4 <__udivmoddi4+0x1f8>
 800138c:	4640      	mov	r0, r8
 800138e:	e7ea      	b.n	8001366 <__udivmoddi4+0x28a>
 8001390:	4620      	mov	r0, r4
 8001392:	e794      	b.n	80012be <__udivmoddi4+0x1e2>
 8001394:	4641      	mov	r1, r8
 8001396:	e7d1      	b.n	800133c <__udivmoddi4+0x260>
 8001398:	46d0      	mov	r8, sl
 800139a:	e77b      	b.n	8001294 <__udivmoddi4+0x1b8>
 800139c:	3b02      	subs	r3, #2
 800139e:	4465      	add	r5, ip
 80013a0:	e732      	b.n	8001208 <__udivmoddi4+0x12c>
 80013a2:	4608      	mov	r0, r1
 80013a4:	e709      	b.n	80011ba <__udivmoddi4+0xde>
 80013a6:	4464      	add	r4, ip
 80013a8:	3802      	subs	r0, #2
 80013aa:	e742      	b.n	8001232 <__udivmoddi4+0x156>

080013ac <__aeabi_idiv0>:
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <HandleMessage>:
static void tokenize(char *tString);
int memsearch(const char *hay, int haysize, const char *needle);


void HandleMessage(volatile tdsCommunicationBuffer * pBuffer)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b0cb      	sub	sp, #300	; 0x12c
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013be:	6018      	str	r0, [r3, #0]
    
    if(pBuffer->writePtr > 0)
 80013c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 81e1 	beq.w	8001798 <HandleMessage+0x3e8>
    {
        HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f001 ffde 	bl	8003398 <HAL_Delay>
        int32_t pos = memsearch((const char *)pBuffer->buffer, pBuffer->writePtr, "*");
 80013dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4a73      	ldr	r2, [pc, #460]	; (80015c4 <HandleMessage+0x214>)
 80013f8:	4619      	mov	r1, r3
 80013fa:	f000 fa69 	bl	80018d0 <memsearch>
 80013fe:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
        if(pos != -1)//pBuffer->buffer[0] == '*')
 8001402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	f000 81ac 	beq.w	8001766 <HandleMessage+0x3b6>
        {
			int32_t rx_timeout = 100;
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            while(memsearch((void *)pBuffer->buffer, pBuffer->writePtr, "#") == -1)
 8001414:	e01f      	b.n	8001456 <HandleMessage+0xa6>
			{
				HAL_Delay(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 ffbe 	bl	8003398 <HAL_Delay>
				--rx_timeout;
 800141c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001420:	3b01      	subs	r3, #1
 8001422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				if(rx_timeout < 0)
 8001426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800142a:	2b00      	cmp	r3, #0
 800142c:	da13      	bge.n	8001456 <HandleMessage+0xa6>
				{
					memset((void *)pBuffer->buffer,0x00,sizeof(pBuffer->buffer));
 800142e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001432:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f005 ffc2 	bl	80073c8 <memset>
					pBuffer->writePtr=0;
 8001444:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001448:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8001454:	e1a0      	b.n	8001798 <HandleMessage+0x3e8>
            while(memsearch((void *)pBuffer->buffer, pBuffer->writePtr, "#") == -1)
 8001456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800145a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001464:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800146e:	b29b      	uxth	r3, r3
 8001470:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <HandleMessage+0x218>)
 8001472:	4619      	mov	r1, r3
 8001474:	f000 fa2c 	bl	80018d0 <memsearch>
 8001478:	4603      	mov	r3, r0
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d0ca      	beq.n	8001416 <HandleMessage+0x66>
				}
			}
					
			uint8_t commandBuffer[200];
//            pBuffer->fncPtr_send(pBuffer->buffer, pBuffer->writePtr);
            memset((void *)commandBuffer, 0x00, 200);
 8001480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001484:	22c8      	movs	r2, #200	; 0xc8
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f005 ff9d 	bl	80073c8 <memset>
            memcpy((void *)commandBuffer, (void *)&pBuffer->buffer[pos + 1], strlen((void *)&pBuffer->buffer[pos + 1])-1);
 800148e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001492:	3301      	adds	r3, #1
 8001494:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001498:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	18d4      	adds	r4, r2, r3
 80014a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014a4:	3301      	adds	r3, #1
 80014a6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80014aa:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe feac 	bl	8000210 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c0:	4621      	mov	r1, r4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 ff72 	bl	80073ac <memcpy>
						
            tokenize((char *)commandBuffer);
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f98f 	bl	80017f0 <tokenize>
            
			if(-1 != memsearch((char *)gCmdBuffer[1], 20, "OPEN"))
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <HandleMessage+0x21c>)
 80014d4:	2114      	movs	r1, #20
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <HandleMessage+0x220>)
 80014d8:	f000 f9fa 	bl	80018d0 <memsearch>
 80014dc:	4603      	mov	r3, r0
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d049      	beq.n	8001578 <HandleMessage+0x1c8>
			{
				char temp[50];
				sprintf(temp,"*%s:OPENED#\r\n", gCmdBuffer[0]);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <HandleMessage+0x224>)
 80014ea:	493b      	ldr	r1, [pc, #236]	; (80015d8 <HandleMessage+0x228>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 fc5d 	bl	8007dac <siprintf>

				uint32_t tTime = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				uint32_t tPercentage = 100;
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

				if(strlen(gCmdBuffer[2]) != 0)
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HandleMessage+0x22c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HandleMessage+0x166>
				{
					tTime = strtol(gCmdBuffer[2], NULL, 10);
 8001506:	220a      	movs	r2, #10
 8001508:	2100      	movs	r1, #0
 800150a:	4834      	ldr	r0, [pc, #208]	; (80015dc <HandleMessage+0x22c>)
 800150c:	f007 fb76 	bl	8008bfc <strtol>
 8001510:	4603      	mov	r3, r0
 8001512:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				}

				if(strlen(gCmdBuffer[3]) != 0)
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HandleMessage+0x230>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <HandleMessage+0x18c>
				{
					tPercentage = strtol(gCmdBuffer[3], NULL, 10);
 800151e:	220a      	movs	r2, #10
 8001520:	2100      	movs	r1, #0
 8001522:	482f      	ldr	r0, [pc, #188]	; (80015e0 <HandleMessage+0x230>)
 8001524:	f007 fb6a 	bl	8008bfc <strtol>
 8001528:	4603      	mov	r3, r0
 800152a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
					if(tPercentage > 100)
 800152e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d902      	bls.n	800153c <HandleMessage+0x18c>
						tPercentage = 100;
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				}

				printf("Laser opened with %ld time and %ld percentage\r\n", tTime, tPercentage);
 800153c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001540:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001544:	4827      	ldr	r0, [pc, #156]	; (80015e4 <HandleMessage+0x234>)
 8001546:	f006 fba3 	bl	8007c90 <iprintf>

				IO_control_laser(1, tTime, tPercentage);
 800154a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001556:	2001      	movs	r0, #1
 8001558:	f001 fa2c 	bl	80029b4 <IO_control_laser>

				USB_Send((uint8_t *)temp, strlen(temp));
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fe55 	bl	8000210 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fb71 	bl	8001c58 <USB_Send>
 8001576:	e091      	b.n	800169c <HandleMessage+0x2ec>
			}
			else if(-1 != memsearch((char *)gCmdBuffer[1], 20, "CLOSE"))
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HandleMessage+0x238>)
 800157a:	2114      	movs	r1, #20
 800157c:	4814      	ldr	r0, [pc, #80]	; (80015d0 <HandleMessage+0x220>)
 800157e:	f000 f9a7 	bl	80018d0 <memsearch>
 8001582:	4603      	mov	r3, r0
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d034      	beq.n	80015f4 <HandleMessage+0x244>
			{
				char temp[50];
				sprintf(temp,"*%s:CLOSED#\r\n", gCmdBuffer[0]);
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HandleMessage+0x224>)
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HandleMessage+0x23c>)
 8001592:	4618      	mov	r0, r3
 8001594:	f006 fc0a 	bl	8007dac <siprintf>

				IO_control_laser(0, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f001 fa09 	bl	80029b4 <IO_control_laser>
				laser_time.timeout = 0;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HandleMessage+0x240>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
				USB_Send((uint8_t *)temp, strlen(temp));
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe2f 	bl	8000210 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fb4b 	bl	8001c58 <USB_Send>
 80015c2:	e06b      	b.n	800169c <HandleMessage+0x2ec>
 80015c4:	0800ba08 	.word	0x0800ba08
 80015c8:	0800ba0c 	.word	0x0800ba0c
 80015cc:	0800ba10 	.word	0x0800ba10
 80015d0:	20000210 	.word	0x20000210
 80015d4:	200001fc 	.word	0x200001fc
 80015d8:	0800ba18 	.word	0x0800ba18
 80015dc:	20000224 	.word	0x20000224
 80015e0:	20000238 	.word	0x20000238
 80015e4:	0800ba28 	.word	0x0800ba28
 80015e8:	0800ba58 	.word	0x0800ba58
 80015ec:	0800ba60 	.word	0x0800ba60
 80015f0:	2000138c 	.word	0x2000138c
			}
			else if(-1 != memsearch((char *)gCmdBuffer[1], 20, "MODE"))
 80015f4:	4a6a      	ldr	r2, [pc, #424]	; (80017a0 <HandleMessage+0x3f0>)
 80015f6:	2114      	movs	r1, #20
 80015f8:	486a      	ldr	r0, [pc, #424]	; (80017a4 <HandleMessage+0x3f4>)
 80015fa:	f000 f969 	bl	80018d0 <memsearch>
 80015fe:	4603      	mov	r3, r0
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d04a      	beq.n	800169c <HandleMessage+0x2ec>
			{
				char temp[50];
				float targetTemp;
				uint32_t tTime = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c


				if(strlen(gCmdBuffer[2]) != 0)
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HandleMessage+0x3f8>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HandleMessage+0x274>
				{
					tTime = strtol(gCmdBuffer[2], NULL, 10);
 8001614:	220a      	movs	r2, #10
 8001616:	2100      	movs	r1, #0
 8001618:	4863      	ldr	r0, [pc, #396]	; (80017a8 <HandleMessage+0x3f8>)
 800161a:	f007 faef 	bl	8008bfc <strtol>
 800161e:	4603      	mov	r3, r0
 8001620:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}


				if(strlen(gCmdBuffer[3]) != 0)
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HandleMessage+0x3fc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HandleMessage+0x2b6>
				{
					extern float gTemp;
					extern volatile uint8_t Mode_Flag;
					Mode_Flag=1;
 800162c:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <HandleMessage+0x400>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
					targetTemp = strtof(gCmdBuffer[3], NULL);
 8001632:	2100      	movs	r1, #0
 8001634:	485d      	ldr	r0, [pc, #372]	; (80017ac <HandleMessage+0x3fc>)
 8001636:	f007 fa13 	bl	8008a60 <strtof>
 800163a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
					if(gTemp < targetTemp)
 800163e:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HandleMessage+0x404>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001648:	f7ff fcb8 	bl	8000fbc <__aeabi_fcmpgt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HandleMessage+0x2b6>
					{
						IO_control_laser(1, tTime, 100);
 8001652:	2264      	movs	r2, #100	; 0x64
 8001654:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001658:	2001      	movs	r0, #1
 800165a:	f001 f9ab 	bl	80029b4 <IO_control_laser>
						laser_time.target_temp = targetTemp;
 800165e:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <HandleMessage+0x408>)
 8001660:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001664:	6093      	str	r3, [r2, #8]
					}
				}


				sprintf(temp,"*%s:%.02f:MODE PROCESS ON#\r\n", gCmdBuffer[0], targetTemp);
 8001666:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800166a:	f7fe ff8d 	bl	8000588 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	f107 000c 	add.w	r0, r7, #12
 8001676:	e9cd 2300 	strd	r2, r3, [sp]
 800167a:	4a50      	ldr	r2, [pc, #320]	; (80017bc <HandleMessage+0x40c>)
 800167c:	4950      	ldr	r1, [pc, #320]	; (80017c0 <HandleMessage+0x410>)
 800167e:	f006 fb95 	bl	8007dac <siprintf>
				USB_Send((uint8_t *)temp, strlen(temp));
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fdc2 	bl	8000210 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fade 	bl	8001c58 <USB_Send>
			}

			memset(gCmdBuffer[0], 0, 20);
 800169c:	2214      	movs	r2, #20
 800169e:	2100      	movs	r1, #0
 80016a0:	4846      	ldr	r0, [pc, #280]	; (80017bc <HandleMessage+0x40c>)
 80016a2:	f005 fe91 	bl	80073c8 <memset>
			memset(gCmdBuffer[1], 0, 20);
 80016a6:	2214      	movs	r2, #20
 80016a8:	2100      	movs	r1, #0
 80016aa:	483e      	ldr	r0, [pc, #248]	; (80017a4 <HandleMessage+0x3f4>)
 80016ac:	f005 fe8c 	bl	80073c8 <memset>
			memset(gCmdBuffer[2], 0, 20);
 80016b0:	2214      	movs	r2, #20
 80016b2:	2100      	movs	r1, #0
 80016b4:	483c      	ldr	r0, [pc, #240]	; (80017a8 <HandleMessage+0x3f8>)
 80016b6:	f005 fe87 	bl	80073c8 <memset>
			memset(gCmdBuffer[3], 0, 20);
 80016ba:	2214      	movs	r2, #20
 80016bc:	2100      	movs	r1, #0
 80016be:	483b      	ldr	r0, [pc, #236]	; (80017ac <HandleMessage+0x3fc>)
 80016c0:	f005 fe82 	bl	80073c8 <memset>
			memset(gCmdBuffer[4], 0, 20);
 80016c4:	2214      	movs	r2, #20
 80016c6:	2100      	movs	r1, #0
 80016c8:	483e      	ldr	r0, [pc, #248]	; (80017c4 <HandleMessage+0x414>)
 80016ca:	f005 fe7d 	bl	80073c8 <memset>
			memset(gCmdBuffer[5], 0, 20);
 80016ce:	2214      	movs	r2, #20
 80016d0:	2100      	movs	r1, #0
 80016d2:	483d      	ldr	r0, [pc, #244]	; (80017c8 <HandleMessage+0x418>)
 80016d4:	f005 fe78 	bl	80073c8 <memset>
			memset(gCmdBuffer[6], 0, 20);
 80016d8:	2214      	movs	r2, #20
 80016da:	2100      	movs	r1, #0
 80016dc:	483b      	ldr	r0, [pc, #236]	; (80017cc <HandleMessage+0x41c>)
 80016de:	f005 fe73 	bl	80073c8 <memset>
			memset(gCmdBuffer[7], 0, 20);
 80016e2:	2214      	movs	r2, #20
 80016e4:	2100      	movs	r1, #0
 80016e6:	483a      	ldr	r0, [pc, #232]	; (80017d0 <HandleMessage+0x420>)
 80016e8:	f005 fe6e 	bl	80073c8 <memset>
			memset(gCmdBuffer[8], 0, 20);
 80016ec:	2214      	movs	r2, #20
 80016ee:	2100      	movs	r1, #0
 80016f0:	4838      	ldr	r0, [pc, #224]	; (80017d4 <HandleMessage+0x424>)
 80016f2:	f005 fe69 	bl	80073c8 <memset>
			memset(gCmdBuffer[9], 0, 20);
 80016f6:	2214      	movs	r2, #20
 80016f8:	2100      	movs	r1, #0
 80016fa:	4837      	ldr	r0, [pc, #220]	; (80017d8 <HandleMessage+0x428>)
 80016fc:	f005 fe64 	bl	80073c8 <memset>
			memset(gCmdBuffer[10], 0, 20);
 8001700:	2214      	movs	r2, #20
 8001702:	2100      	movs	r1, #0
 8001704:	4835      	ldr	r0, [pc, #212]	; (80017dc <HandleMessage+0x42c>)
 8001706:	f005 fe5f 	bl	80073c8 <memset>
			memset(gCmdBuffer[11], 0, 20);
 800170a:	2214      	movs	r2, #20
 800170c:	2100      	movs	r1, #0
 800170e:	4834      	ldr	r0, [pc, #208]	; (80017e0 <HandleMessage+0x430>)
 8001710:	f005 fe5a 	bl	80073c8 <memset>
			memset(gCmdBuffer[12], 0, 20);
 8001714:	2214      	movs	r2, #20
 8001716:	2100      	movs	r1, #0
 8001718:	4832      	ldr	r0, [pc, #200]	; (80017e4 <HandleMessage+0x434>)
 800171a:	f005 fe55 	bl	80073c8 <memset>
			memset(gCmdBuffer[13], 0, 20);
 800171e:	2214      	movs	r2, #20
 8001720:	2100      	movs	r1, #0
 8001722:	4831      	ldr	r0, [pc, #196]	; (80017e8 <HandleMessage+0x438>)
 8001724:	f005 fe50 	bl	80073c8 <memset>
			memset(gCmdBuffer[14], 0, 20);
 8001728:	2214      	movs	r2, #20
 800172a:	2100      	movs	r1, #0
 800172c:	482f      	ldr	r0, [pc, #188]	; (80017ec <HandleMessage+0x43c>)
 800172e:	f005 fe4b 	bl	80073c8 <memset>
						
            memset((void *)pBuffer->buffer,0x00,pBuffer->writePtr);
 8001732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001736:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001740:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	f005 fe3a 	bl	80073c8 <memset>
            pBuffer->writePtr=0;
 8001754:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001758:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8001764:	e018      	b.n	8001798 <HandleMessage+0x3e8>
        }
        else
        {
            memset((void *)pBuffer->buffer,0x00,pBuffer->writePtr);
 8001766:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800176a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001774:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f005 fe20 	bl	80073c8 <memset>
            pBuffer->writePtr=0;
 8001788:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800178c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
        }
    }
}
 8001798:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	0800ba70 	.word	0x0800ba70
 80017a4:	20000210 	.word	0x20000210
 80017a8:	20000224 	.word	0x20000224
 80017ac:	20000238 	.word	0x20000238
 80017b0:	20001284 	.word	0x20001284
 80017b4:	20001280 	.word	0x20001280
 80017b8:	2000138c 	.word	0x2000138c
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	0800ba78 	.word	0x0800ba78
 80017c4:	2000024c 	.word	0x2000024c
 80017c8:	20000260 	.word	0x20000260
 80017cc:	20000274 	.word	0x20000274
 80017d0:	20000288 	.word	0x20000288
 80017d4:	2000029c 	.word	0x2000029c
 80017d8:	200002b0 	.word	0x200002b0
 80017dc:	200002c4 	.word	0x200002c4
 80017e0:	200002d8 	.word	0x200002d8
 80017e4:	200002ec 	.word	0x200002ec
 80017e8:	20000300 	.word	0x20000300
 80017ec:	20000314 	.word	0x20000314

080017f0 <tokenize>:

static void tokenize(char *tString)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    uint8_t tCnt= 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
    char *word = strtok_single (tString, ":");
 80017fc:	4913      	ldr	r1, [pc, #76]	; (800184c <tokenize+0x5c>)
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f82a 	bl	8001858 <strtok_single>
 8001804:	60b8      	str	r0, [r7, #8]
    while(word)
 8001806:	e018      	b.n	800183a <tokenize+0x4a>
    {
//        printf("%d: %s\r\n",tCnt,*word ? word : "");
        switch(tCnt)
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b0e      	cmp	r3, #14
 800180c:	d80c      	bhi.n	8001828 <tokenize+0x38>
            case 10: 
            case 11:
            case 12:
            case 13: 
            case 14: 
                sprintf((char *)gCmdBuffer[tCnt],"%s",word);
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <tokenize+0x60>)
 800181a:	4413      	add	r3, r2
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	490d      	ldr	r1, [pc, #52]	; (8001854 <tokenize+0x64>)
 8001820:	4618      	mov	r0, r3
 8001822:	f006 fac3 	bl	8007dac <siprintf>
                break;
 8001826:	e000      	b.n	800182a <tokenize+0x3a>
            default: break;
 8001828:	bf00      	nop

        }
        
        word = strtok_single(NULL, ":");
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <tokenize+0x5c>)
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f813 	bl	8001858 <strtok_single>
 8001832:	60b8      	str	r0, [r7, #8]
        tCnt++;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	3301      	adds	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
    while(word)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e3      	bne.n	8001808 <tokenize+0x18>
    }
    
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0800ba98 	.word	0x0800ba98
 8001850:	200001fc 	.word	0x200001fc
 8001854:	0800ba9c 	.word	0x0800ba9c

08001858 <strtok_single>:

static char * strtok_single (char * str, char const * delims)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  static char  * src = NULL;
  char  *  p,  * ret = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]

  if (str != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <strtok_single+0x1a>
    src = str;
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <strtok_single+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]

  if (src == NULL)
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <strtok_single+0x74>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <strtok_single+0x26>
    return NULL;
 800187a:	2300      	movs	r3, #0
 800187c:	e022      	b.n	80018c4 <strtok_single+0x6c>

  if ((p = strpbrk (src, delims)) != NULL) {
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <strtok_single+0x74>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fab1 	bl	8007dec <strpbrk>
 800188a:	60b8      	str	r0, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <strtok_single+0x54>
    *p  = 0;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    ret = src;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <strtok_single+0x74>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
    src = ++p;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <strtok_single+0x74>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00a      	b.n	80018c2 <strtok_single+0x6a>

  } else if (*src) {
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <strtok_single+0x74>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <strtok_single+0x6a>
    ret = src;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <strtok_single+0x74>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
    src = NULL;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <strtok_single+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000328 	.word	0x20000328

080018d0 <memsearch>:

int memsearch(const char *hay, int haysize, const char *needle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
    size_t needlesize = strlen(needle);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7fe fc97 	bl	8000210 <strlen>
 80018e2:	6178      	str	r0, [r7, #20]
    int haypos, needlepos;
    haysize -= needlesize;
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	60bb      	str	r3, [r7, #8]
    for (haypos = 0; haypos <= haysize; haypos++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e021      	b.n	8001936 <memsearch+0x66>
        for (needlepos = 0; needlepos < needlesize; needlepos++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	e00f      	b.n	8001918 <memsearch+0x48>
            if (hay[haypos + needlepos] != needle[needlepos]) {
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	440b      	add	r3, r1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d107      	bne.n	8001922 <memsearch+0x52>
        for (needlepos = 0; needlepos < needlesize; needlepos++) {
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3301      	adds	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8eb      	bhi.n	80018f8 <memsearch+0x28>
 8001920:	e000      	b.n	8001924 <memsearch+0x54>
                // Next character in haystack.
                break;
 8001922:	bf00      	nop
            }
        }
        if (needlepos == needlesize) {
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	d101      	bne.n	8001930 <memsearch+0x60>
            return haypos;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	e008      	b.n	8001942 <memsearch+0x72>
    for (haypos = 0; haypos <= haysize; haypos++) {
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	ddd9      	ble.n	80018f2 <memsearch+0x22>
        }
    }    
    return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <Init_UartHandler>:
volatile tdsCommunicationBuffer gRS232_CommStruct;

uint8_t tState = 0;

void Init_UartHandler(tdeUartInitType pUart,UART_HandleTypeDef* pUartInstance)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
	
	if(pUart==Init_USB_Uart) //RS485
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d120      	bne.n	80019a0 <Init_UartHandler+0x54>
	{
		gUSB_Uart=pUartInstance;
 800195e:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <Init_UartHandler+0xec>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6013      	str	r3, [r2, #0]
		gUSB_CommStruct.writePtr=0;
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <Init_UartHandler+0xf0>)
 8001966:	2200      	movs	r2, #0
 8001968:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		gUSB_CommStruct.readPtr=0;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <Init_UartHandler+0xf0>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		gUSB_CommStruct.bufferSize=COMMUNICATION_BUFFER_MAX_SIZE;
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <Init_UartHandler+0xf0>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		gUSB_CommStruct.lastUpdateTime=HAL_GetTick();
 800197e:	f001 fd01 	bl	8003384 <HAL_GetTick>
 8001982:	4603      	mov	r3, r0
 8001984:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <Init_UartHandler+0xf0>)
 8001986:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		UartHandler_ClearBuffer(USB_Uart_Handler);
 800198a:	2001      	movs	r0, #1
 800198c:	f000 f984 	bl	8001c98 <UartHandler_ClearBuffer>
		HAL_UART_Receive_IT(gUSB_Uart,(void *)&gUSB_DMABuffer,1);
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <Init_UartHandler+0xec>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	492a      	ldr	r1, [pc, #168]	; (8001a40 <Init_UartHandler+0xf4>)
 8001998:	4618      	mov	r0, r3
 800199a:	f004 fd4a 	bl	8006432 <HAL_UART_Receive_IT>
		gRS232_CommStruct.bufferSize=COMMUNICATION_BUFFER_MAX_SIZE;
		gRS232_CommStruct.lastUpdateTime=HAL_GetTick();
		UartHandler_ClearBuffer(RS232_Uart_Handler);
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
	}
}
 800199e:	e046      	b.n	8001a2e <Init_UartHandler+0xe2>
    else if(pUart==Init_RS485_Uart) //RS485
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d120      	bne.n	80019e8 <Init_UartHandler+0x9c>
		gRS485_Uart=pUartInstance;
 80019a6:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <Init_UartHandler+0xf8>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6013      	str	r3, [r2, #0]
		gRS485_CommStruct.writePtr=0;
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <Init_UartHandler+0xfc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		gRS485_CommStruct.readPtr=0;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <Init_UartHandler+0xfc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		gRS485_CommStruct.bufferSize=COMMUNICATION_BUFFER_MAX_SIZE;
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <Init_UartHandler+0xfc>)
 80019be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c2:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		gRS485_CommStruct.lastUpdateTime=HAL_GetTick();
 80019c6:	f001 fcdd 	bl	8003384 <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <Init_UartHandler+0xfc>)
 80019ce:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		UartHandler_ClearBuffer(RS485_Uart_Handler);
 80019d2:	2002      	movs	r0, #2
 80019d4:	f000 f960 	bl	8001c98 <UartHandler_ClearBuffer>
		HAL_UART_Receive_IT(gRS485_Uart,(void *)&gRS485_DMABuffer,1);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <Init_UartHandler+0xf8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	491b      	ldr	r1, [pc, #108]	; (8001a4c <Init_UartHandler+0x100>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fd26 	bl	8006432 <HAL_UART_Receive_IT>
}
 80019e6:	e022      	b.n	8001a2e <Init_UartHandler+0xe2>
    else if(pUart==Init_RS232_Uart) //RS232
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d11f      	bne.n	8001a2e <Init_UartHandler+0xe2>
		gRS232_Uart=pUartInstance;
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <Init_UartHandler+0x104>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6013      	str	r3, [r2, #0]
		gRS232_CommStruct.writePtr=0;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <Init_UartHandler+0x108>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		gRS232_CommStruct.readPtr=0;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <Init_UartHandler+0x108>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		gRS232_CommStruct.bufferSize=COMMUNICATION_BUFFER_MAX_SIZE;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <Init_UartHandler+0x108>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		gRS232_CommStruct.lastUpdateTime=HAL_GetTick();
 8001a0e:	f001 fcb9 	bl	8003384 <HAL_GetTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <Init_UartHandler+0x108>)
 8001a16:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		UartHandler_ClearBuffer(RS232_Uart_Handler);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 f93c 	bl	8001c98 <UartHandler_ClearBuffer>
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <Init_UartHandler+0x104>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	490c      	ldr	r1, [pc, #48]	; (8001a58 <Init_UartHandler+0x10c>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fd02 	bl	8006432 <HAL_UART_Receive_IT>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000032c 	.word	0x2000032c
 8001a3c:	2000033c 	.word	0x2000033c
 8001a40:	20000338 	.word	0x20000338
 8001a44:	20000330 	.word	0x20000330
 8001a48:	20000748 	.word	0x20000748
 8001a4c:	20000339 	.word	0x20000339
 8001a50:	20000334 	.word	0x20000334
 8001a54:	20000b54 	.word	0x20000b54
 8001a58:	2000033a 	.word	0x2000033a

08001a5c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if(HAL_UART_ERROR_FE == huart->ErrorCode)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d105      	bne.n	8001a78 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_MspDeInit(huart);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 fbad 	bl	80031cc <HAL_UART_MspDeInit>
		HAL_UART_MspInit(huart);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 fae0 	bl	8003038 <HAL_UART_MspInit>
	}
	if(huart->Instance == USART6)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_UART_ErrorCallback+0x94>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <HAL_UART_ErrorCallback+0x42>
	{
		HAL_UART_Receive_IT(gUSB_Uart,(void *)&gUSB_DMABuffer,1);
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_UART_ErrorCallback+0x98>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	491b      	ldr	r1, [pc, #108]	; (8001af8 <HAL_UART_ErrorCallback+0x9c>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fcd1 	bl	8006432 <HAL_UART_Receive_IT>
		gUSB_CommStruct.lastUpdateTime = HAL_GetTick();
 8001a90:	f001 fc78 	bl	8003384 <HAL_GetTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_UART_ErrorCallback+0xa0>)
 8001a98:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    else if(huart->Instance == USART2)
	{
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
		gRS232_CommStruct.lastUpdateTime = HAL_GetTick();
	}
}
 8001a9c:	e024      	b.n	8001ae8 <HAL_UART_ErrorCallback+0x8c>
    else if(huart->Instance == USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_UART_ErrorCallback+0xa4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_UART_ErrorCallback+0x68>
		HAL_UART_Receive_IT(gRS485_Uart,(void *)&gRS485_DMABuffer,1);
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_UART_ErrorCallback+0xa8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_UART_ErrorCallback+0xac>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fcbe 	bl	8006432 <HAL_UART_Receive_IT>
		gRS485_CommStruct.lastUpdateTime = HAL_GetTick();
 8001ab6:	f001 fc65 	bl	8003384 <HAL_GetTick>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_UART_ErrorCallback+0xb0>)
 8001abe:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
}
 8001ac2:	e011      	b.n	8001ae8 <HAL_UART_ErrorCallback+0x8c>
    else if(huart->Instance == USART2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_UART_ErrorCallback+0xb4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10c      	bne.n	8001ae8 <HAL_UART_ErrorCallback+0x8c>
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_ErrorCallback+0xb8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4910      	ldr	r1, [pc, #64]	; (8001b18 <HAL_UART_ErrorCallback+0xbc>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fcab 	bl	8006432 <HAL_UART_Receive_IT>
		gRS232_CommStruct.lastUpdateTime = HAL_GetTick();
 8001adc:	f001 fc52 	bl	8003384 <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_UART_ErrorCallback+0xc0>)
 8001ae4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40011400 	.word	0x40011400
 8001af4:	2000032c 	.word	0x2000032c
 8001af8:	20000338 	.word	0x20000338
 8001afc:	2000033c 	.word	0x2000033c
 8001b00:	40011000 	.word	0x40011000
 8001b04:	20000330 	.word	0x20000330
 8001b08:	20000339 	.word	0x20000339
 8001b0c:	20000748 	.word	0x20000748
 8001b10:	40004400 	.word	0x40004400
 8001b14:	20000334 	.word	0x20000334
 8001b18:	2000033a 	.word	0x2000033a
 8001b1c:	20000b54 	.word	0x20000b54

08001b20 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART6)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d119      	bne.n	8001b66 <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2120      	movs	r1, #32
 8001b36:	4828      	ldr	r0, [pc, #160]	; (8001bd8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b38:	f003 f82a 	bl	8004b90 <HAL_GPIO_WritePin>
		UartHandler_Add2Buffer((void *)&gUSB_CommStruct,gUSB_DMABuffer);
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_UART_RxCpltCallback+0xbc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	4826      	ldr	r0, [pc, #152]	; (8001be0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b46:	f000 f85f 	bl	8001c08 <UartHandler_Add2Buffer>
		HAL_UART_Receive_IT(gUSB_Uart,(void *)&gUSB_DMABuffer,1);
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4922      	ldr	r1, [pc, #136]	; (8001bdc <HAL_UART_RxCpltCallback+0xbc>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fc6d 	bl	8006432 <HAL_UART_Receive_IT>
		gUSB_CommStruct.lastUpdateTime = HAL_GetTick();
 8001b58:	f001 fc14 	bl	8003384 <HAL_GetTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b60:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	{
		UartHandler_Add2Buffer((void *)&gRS232_CommStruct,gRS232_DMABuffer);
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
		gRS485_CommStruct.lastUpdateTime = HAL_GetTick();
	}
}
 8001b64:	e032      	b.n	8001bcc <HAL_UART_RxCpltCallback+0xac>
    else if(huart->Instance == USART1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d114      	bne.n	8001b9a <HAL_UART_RxCpltCallback+0x7a>
		UartHandler_Add2Buffer((void *)&gRS485_CommStruct,gRS485_DMABuffer);
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_UART_RxCpltCallback+0xcc>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	481d      	ldr	r0, [pc, #116]	; (8001bf0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b7a:	f000 f845 	bl	8001c08 <UartHandler_Add2Buffer>
		HAL_UART_Receive_IT(gRS485_Uart,(void *)&gRS485_DMABuffer,1);
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_UART_RxCpltCallback+0xd4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4919      	ldr	r1, [pc, #100]	; (8001bec <HAL_UART_RxCpltCallback+0xcc>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fc53 	bl	8006432 <HAL_UART_Receive_IT>
		gRS485_CommStruct.lastUpdateTime = HAL_GetTick();
 8001b8c:	f001 fbfa 	bl	8003384 <HAL_GetTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b94:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
}
 8001b98:	e018      	b.n	8001bcc <HAL_UART_RxCpltCallback+0xac>
    else if(huart->Instance == USART2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_UART_RxCpltCallback+0xd8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d113      	bne.n	8001bcc <HAL_UART_RxCpltCallback+0xac>
		UartHandler_Add2Buffer((void *)&gRS232_CommStruct,gRS232_DMABuffer);
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_UART_RxCpltCallback+0xdc>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	4814      	ldr	r0, [pc, #80]	; (8001c00 <HAL_UART_RxCpltCallback+0xe0>)
 8001bae:	f000 f82b 	bl	8001c08 <UartHandler_Add2Buffer>
		HAL_UART_Receive_IT(gRS232_Uart,(void *)&gRS232_DMABuffer,1);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_UART_RxCpltCallback+0xe4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4910      	ldr	r1, [pc, #64]	; (8001bfc <HAL_UART_RxCpltCallback+0xdc>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 fc39 	bl	8006432 <HAL_UART_Receive_IT>
		gRS485_CommStruct.lastUpdateTime = HAL_GetTick();
 8001bc0:	f001 fbe0 	bl	8003384 <HAL_GetTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_UART_RxCpltCallback+0xd0>)
 8001bc8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40011400 	.word	0x40011400
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	20000338 	.word	0x20000338
 8001be0:	2000033c 	.word	0x2000033c
 8001be4:	2000032c 	.word	0x2000032c
 8001be8:	40011000 	.word	0x40011000
 8001bec:	20000339 	.word	0x20000339
 8001bf0:	20000748 	.word	0x20000748
 8001bf4:	20000330 	.word	0x20000330
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	2000033a 	.word	0x2000033a
 8001c00:	20000b54 	.word	0x20000b54
 8001c04:	20000334 	.word	0x20000334

08001c08 <UartHandler_Add2Buffer>:
void UartHandler_Add2Buffer(tdsCommunicationBuffer* pSource,uint8_t pVal)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
	pSource->buffer[pSource->writePtr] = pVal;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	545a      	strb	r2, [r3, r1]
	pSource->writePtr++;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    
    if(pSource->writePtr >= COMMUNICATION_BUFFER_MAX_SIZE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d303      	bcc.n	8001c4c <UartHandler_Add2Buffer+0x44>
	{
		pSource->writePtr=0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <USB_Send>:
    HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
    HAL_UART_Transmit(gUSB_Uart,&pCh,1,1000);
    HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_RESET);
}
void USB_Send(uint8_t *pBuff,uint16_t pSize)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <USB_Send+0x38>)
 8001c6a:	f002 ff91 	bl	8004b90 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(gUSB_Uart,pBuff,pSize,1000);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <USB_Send+0x3c>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	f004 fb48 	bl	800630e <HAL_UART_Transmit>
    HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2140      	movs	r1, #64	; 0x40
 8001c82:	4803      	ldr	r0, [pc, #12]	; (8001c90 <USB_Send+0x38>)
 8001c84:	f002 ff84 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020400 	.word	0x40020400
 8001c94:	2000032c 	.word	0x2000032c

08001c98 <UartHandler_ClearBuffer>:
{
    HAL_UART_Transmit(gRS232_Uart,pBuff,pSize,1000);
}

void UartHandler_ClearBuffer(tdeUartHandler pUart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	switch(pUart)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d024      	beq.n	8001cf2 <UartHandler_ClearBuffer+0x5a>
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	dc31      	bgt.n	8001d10 <UartHandler_ClearBuffer+0x78>
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d002      	beq.n	8001cb6 <UartHandler_ClearBuffer+0x1e>
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d00f      	beq.n	8001cd4 <UartHandler_ClearBuffer+0x3c>
			memset((void *)gRS232_CommStruct.buffer,0x00,sizeof(gRS232_CommStruct.buffer));
			gRS232_CommStruct.writePtr=0;
			gRS232_CommStruct.readPtr=0;
			break;
            
		default:break;
 8001cb4:	e02c      	b.n	8001d10 <UartHandler_ClearBuffer+0x78>
			memset((void *)gUSB_CommStruct.buffer,0x00,sizeof(gUSB_CommStruct.buffer));
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4817      	ldr	r0, [pc, #92]	; (8001d1c <UartHandler_ClearBuffer+0x84>)
 8001cbe:	f005 fb83 	bl	80073c8 <memset>
			gUSB_CommStruct.writePtr=0;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <UartHandler_ClearBuffer+0x84>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
			gUSB_CommStruct.readPtr=0;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <UartHandler_ClearBuffer+0x84>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
			break;
 8001cd2:	e01e      	b.n	8001d12 <UartHandler_ClearBuffer+0x7a>
			memset((void *)gRS485_CommStruct.buffer,0x00,sizeof(gRS485_CommStruct.buffer));
 8001cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4811      	ldr	r0, [pc, #68]	; (8001d20 <UartHandler_ClearBuffer+0x88>)
 8001cdc:	f005 fb74 	bl	80073c8 <memset>
			gRS485_CommStruct.writePtr=0;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <UartHandler_ClearBuffer+0x88>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
			gRS485_CommStruct.readPtr=0;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <UartHandler_ClearBuffer+0x88>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
			break;
 8001cf0:	e00f      	b.n	8001d12 <UartHandler_ClearBuffer+0x7a>
			memset((void *)gRS232_CommStruct.buffer,0x00,sizeof(gRS232_CommStruct.buffer));
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <UartHandler_ClearBuffer+0x8c>)
 8001cfa:	f005 fb65 	bl	80073c8 <memset>
			gRS232_CommStruct.writePtr=0;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <UartHandler_ClearBuffer+0x8c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
			gRS232_CommStruct.readPtr=0;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <UartHandler_ClearBuffer+0x8c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
			break;
 8001d0e:	e000      	b.n	8001d12 <UartHandler_ClearBuffer+0x7a>
		default:break;
 8001d10:	bf00      	nop
	}
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000033c 	.word	0x2000033c
 8001d20:	20000748 	.word	0x20000748
 8001d24:	20000b54 	.word	0x20000b54

08001d28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d3c:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <MX_ADC1_Init+0xf0>)
 8001d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <MX_ADC1_Init+0xf4>)
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d88:	4822      	ldr	r0, [pc, #136]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001d8a:	f001 fb29 	bl	80033e0 <HAL_ADC_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d94:	f000 fd6a 	bl	800286c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001da0:	2306      	movs	r3, #6
 8001da2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4619      	mov	r1, r3
 8001da8:	481a      	ldr	r0, [pc, #104]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001daa:	f001 fc7f 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001db4:	f000 fd5a 	bl	800286c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001db8:	230b      	movs	r3, #11
 8001dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001dc6:	f001 fc71 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001dd0:	f000 fd4c 	bl	800286c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001de2:	f001 fc63 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001dec:	f000 fd3e 	bl	800286c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001df0:	2311      	movs	r3, #17
 8001df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001df4:	2304      	movs	r3, #4
 8001df6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001dfe:	f001 fc55 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e08:	f000 fd30 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000f60 	.word	0x20000f60
 8001e18:	40012000 	.word	0x40012000
 8001e1c:	0f000001 	.word	0x0f000001

08001e20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <HAL_ADC_MspInit+0xdc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d158      	bne.n	8001ef4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_ADC_MspInit+0xe0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	481d      	ldr	r0, [pc, #116]	; (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e8e:	f002 fbfb 	bl	8004688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_ADC_MspInit+0xec>)
 8001e96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ebc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ecc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001eda:	f001 ffd7 	bl	8003e8c <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001ee4:	f000 fcc2 	bl	800286c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020800 	.word	0x40020800
 8001f08:	20000fa8 	.word	0x20000fa8
 8001f0c:	40026410 	.word	0x40026410

08001f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2038      	movs	r0, #56	; 0x38
 8001f38:	f001 ff63 	bl	8003e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f3c:	2038      	movs	r0, #56	; 0x38
 8001f3e:	f001 ff7c 	bl	8003e3a <HAL_NVIC_EnableIRQ>

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a39      	ldr	r2, [pc, #228]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <MX_GPIO_Init+0x104>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <MX_GPIO_Init+0x104>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <MX_GPIO_Init+0x104>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <MX_GPIO_Init+0x104>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|RS_EN_Pin|ES_MCU_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f648 0110 	movw	r1, #34832	; 0x8810
 8001fc0:	4825      	ldr	r0, [pc, #148]	; (8002058 <MX_GPIO_Init+0x108>)
 8001fc2:	f002 fde5 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2110      	movs	r1, #16
 8001fca:	4824      	ldr	r0, [pc, #144]	; (800205c <MX_GPIO_Init+0x10c>)
 8001fcc:	f002 fde0 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RX_LED_Pin|TX_LED_Pin|FAN_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	21f0      	movs	r1, #240	; 0xf0
 8001fd4:	4822      	ldr	r0, [pc, #136]	; (8002060 <MX_GPIO_Init+0x110>)
 8001fd6:	f002 fddb 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|RS_EN_Pin|ES_MCU_Pin;
 8001fda:	f648 0310 	movw	r3, #34832	; 0x8810
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4819      	ldr	r0, [pc, #100]	; (8002058 <MX_GPIO_Init+0x108>)
 8001ff4:	f002 fb48 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4619      	mov	r1, r3
 800200e:	4813      	ldr	r0, [pc, #76]	; (800205c <MX_GPIO_Init+0x10c>)
 8002010:	f002 fb3a 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_IN_Pin|SLIDE_SW_Pin;
 8002014:	f248 0301 	movw	r3, #32769	; 0x8001
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4619      	mov	r1, r3
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <MX_GPIO_Init+0x110>)
 800202a:	f002 fb2d 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RX_LED_Pin|TX_LED_Pin|FAN_Pin;
 800202e:	23f0      	movs	r3, #240	; 0xf0
 8002030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	4619      	mov	r1, r3
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_GPIO_Init+0x110>)
 8002046:	f002 fb1f 	bl	8004688 <HAL_GPIO_Init>

}
 800204a:	bf00      	nop
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020800 	.word	0x40020800
 8002060:	40020400 	.word	0x40020400
 8002064:	00000000 	.word	0x00000000

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f001 f924 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f8f4 	bl	8002260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f7ff ff6a 	bl	8001f50 <MX_GPIO_Init>
  MX_SPI1_Init();
 800207c:	f000 fd46 	bl	8002b0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002080:	f000 ff5c 	bl	8002f3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002084:	f000 ff84 	bl	8002f90 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002088:	f7ff ff42 	bl	8001f10 <MX_DMA_Init>
  MX_TIM6_Init();
 800208c:	f000 fef8 	bl	8002e80 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8002090:	f000 ffa8 	bl	8002fe4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002094:	f7ff fe48 	bl	8001d28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Init_UartHandler(Init_USB_Uart, &huart6);
 8002098:	495f      	ldr	r1, [pc, #380]	; (8002218 <main+0x1b0>)
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fc56 	bl	800194c <Init_UartHandler>
  Init_UartHandler(Init_RS485_Uart, &huart1);
 80020a0:	495e      	ldr	r1, [pc, #376]	; (800221c <main+0x1b4>)
 80020a2:	2002      	movs	r0, #2
 80020a4:	f7ff fc52 	bl	800194c <Init_UartHandler>
  Init_UartHandler(Init_RS232_Uart, &huart2);
 80020a8:	495d      	ldr	r1, [pc, #372]	; (8002220 <main+0x1b8>)
 80020aa:	2003      	movs	r0, #3
 80020ac:	f7ff fc4e 	bl	800194c <Init_UartHandler>
  HAL_TIM_Base_Start_IT(&htim6);
 80020b0:	485c      	ldr	r0, [pc, #368]	; (8002224 <main+0x1bc>)
 80020b2:	f003 fe1b 	bl	8005cec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tLapTime = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	2110      	movs	r1, #16
 80020be:	485a      	ldr	r0, [pc, #360]	; (8002228 <main+0x1c0>)
 80020c0:	f002 fd66 	bl	8004b90 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80020c4:	2064      	movs	r0, #100	; 0x64
 80020c6:	f001 f967 	bl	8003398 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2110      	movs	r1, #16
 80020ce:	4856      	ldr	r0, [pc, #344]	; (8002228 <main+0x1c0>)
 80020d0:	f002 fd5e 	bl	8004b90 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020da:	4854      	ldr	r0, [pc, #336]	; (800222c <main+0x1c4>)
 80020dc:	f002 fd58 	bl	8004b90 <HAL_GPIO_WritePin>


  HAL_ADC_Start_DMA(&hadc1, gADC_Val, 4);
 80020e0:	2204      	movs	r2, #4
 80020e2:	4953      	ldr	r1, [pc, #332]	; (8002230 <main+0x1c8>)
 80020e4:	4853      	ldr	r0, [pc, #332]	; (8002234 <main+0x1cc>)
 80020e6:	f001 f9bf 	bl	8003468 <HAL_ADC_Start_DMA>

  HAL_Delay(100);
 80020ea:	2064      	movs	r0, #100	; 0x64
 80020ec:	f001 f954 	bl	8003398 <HAL_Delay>

  uint8_t j;

  for(j=0;j<=100;j++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	72fb      	strb	r3, [r7, #11]
 80020f4:	e004      	b.n	8002100 <main+0x98>
  {
	  ADC_Average_Measurement_Calculator();
 80020f6:	f000 f97f 	bl	80023f8 <ADC_Average_Measurement_Calculator>
  for(j=0;j<=100;j++)
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	3301      	adds	r3, #1
 80020fe:	72fb      	strb	r3, [r7, #11]
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d9f7      	bls.n	80020f6 <main+0x8e>
  }

  while (1)
  {
	  ADC_Average_Measurement_Calculator();
 8002106:	f000 f977 	bl	80023f8 <ADC_Average_Measurement_Calculator>
	  OPAMP_Temperature=PT500_Real_Temperature_Value_Calculation();
 800210a:	f000 f9fd 	bl	8002508 <PT500_Real_Temperature_Value_Calculation>
 800210e:	4603      	mov	r3, r0
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <main+0x1d0>)
 8002112:	6013      	str	r3, [r2, #0]
	  OPAMP_Voltage=Voltage_Conversion();
 8002114:	f000 fa98 	bl	8002648 <Voltage_Conversion>
 8002118:	4603      	mov	r3, r0
 800211a:	4a48      	ldr	r2, [pc, #288]	; (800223c <main+0x1d4>)
 800211c:	6013      	str	r3, [r2, #0]
	  OPAMP_Current=Current_Conversion();
 800211e:	f000 fad3 	bl	80026c8 <Current_Conversion>
 8002122:	4603      	mov	r3, r0
 8002124:	4a46      	ldr	r2, [pc, #280]	; (8002240 <main+0x1d8>)
 8002126:	6013      	str	r3, [r2, #0]

	  IO_check_timeout();
 8002128:	f000 fc0e 	bl	8002948 <IO_check_timeout>
	  HandleMessage(&gUSB_CommStruct);
 800212c:	4845      	ldr	r0, [pc, #276]	; (8002244 <main+0x1dc>)
 800212e:	f7ff f93f 	bl	80013b0 <HandleMessage>
	  char * ptr = strstr(gRS232_CommStruct.buffer, "Temp:");
 8002132:	4945      	ldr	r1, [pc, #276]	; (8002248 <main+0x1e0>)
 8002134:	4845      	ldr	r0, [pc, #276]	; (800224c <main+0x1e4>)
 8002136:	f005 fe71 	bl	8007e1c <strstr>
 800213a:	6078      	str	r0, [r7, #4]

	  if(NULL != ptr)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d036      	beq.n	80021b0 <main+0x148>
	  	  {
	  		  HAL_Delay(50);
 8002142:	2032      	movs	r0, #50	; 0x32
 8002144:	f001 f928 	bl	8003398 <HAL_Delay>
	  		  uint32_t temp = strtol(ptr + 6, NULL, 10);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3306      	adds	r3, #6
 800214c:	220a      	movs	r2, #10
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f006 fd53 	bl	8008bfc <strtol>
 8002156:	4603      	mov	r3, r0
 8002158:	603b      	str	r3, [r7, #0]
	  		  gTemp = (float)(((float)temp - 2732.00) / 10.00);
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f7fe fe6a 	bl	8000e34 <__aeabi_ui2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa10 	bl	8000588 <__aeabi_f2d>
 8002168:	a329      	add	r3, pc, #164	; (adr r3, 8002210 <main+0x1a8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe f8ab 	bl	80002c8 <__aeabi_dsub>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <main+0x1e8>)
 8002180:	f7fe fb84 	bl	800088c <__aeabi_ddiv>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe fd4c 	bl	8000c28 <__aeabi_d2f>
 8002190:	4603      	mov	r3, r0
 8002192:	4a30      	ldr	r2, [pc, #192]	; (8002254 <main+0x1ec>)
 8002194:	6013      	str	r3, [r2, #0]
	  		  printf("IR_Temp: %.02f\r\n", gTemp);
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <main+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9f4 	bl	8000588 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	482c      	ldr	r0, [pc, #176]	; (8002258 <main+0x1f0>)
 80021a6:	f005 fd73 	bl	8007c90 <iprintf>
	  		  UartHandler_ClearBuffer(RS232_Uart_Handler);
 80021aa:	2003      	movs	r0, #3
 80021ac:	f7ff fd74 	bl	8001c98 <UartHandler_ClearBuffer>
	  		  //Laser_Target_Temp_Check();

	  	  }

	  if(HAL_GetTick() - tLapTime > 1000)
 80021b0:	f001 f8e8 	bl	8003384 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021be:	d920      	bls.n	8002202 <main+0x19a>
	  {
		  printf("Current: %.3f,Output Voltage: %.3f,OPAMP Temp: %.3f Celsius\r\n", OPAMP_Current, OPAMP_Voltage, OPAMP_Temperature);
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <main+0x1d8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9df 	bl	8000588 <__aeabi_f2d>
 80021ca:	4680      	mov	r8, r0
 80021cc:	4689      	mov	r9, r1
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <main+0x1d4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9d8 	bl	8000588 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <main+0x1d0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9d1 	bl	8000588 <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021ee:	e9cd 4500 	strd	r4, r5, [sp]
 80021f2:	4642      	mov	r2, r8
 80021f4:	464b      	mov	r3, r9
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <main+0x1f4>)
 80021f8:	f005 fd4a 	bl	8007c90 <iprintf>
		  tLapTime = HAL_GetTick();
 80021fc:	f001 f8c2 	bl	8003384 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]
	  }

	  Temperature_Fail_Check();
 8002202:	f000 faad 	bl	8002760 <Temperature_Fail_Check>
	  Short_Circuit_Check();
 8002206:	f000 faf3 	bl	80027f0 <Short_Circuit_Check>
  {
 800220a:	e77c      	b.n	8002106 <main+0x9e>
 800220c:	f3af 8000 	nop.w
 8002210:	00000000 	.word	0x00000000
 8002214:	40a55800 	.word	0x40a55800
 8002218:	200014d8 	.word	0x200014d8
 800221c:	20001450 	.word	0x20001450
 8002220:	20001494 	.word	0x20001494
 8002224:	20001408 	.word	0x20001408
 8002228:	40020400 	.word	0x40020400
 800222c:	40020000 	.word	0x40020000
 8002230:	2000139c 	.word	0x2000139c
 8002234:	20000f60 	.word	0x20000f60
 8002238:	20001274 	.word	0x20001274
 800223c:	20001278 	.word	0x20001278
 8002240:	2000127c 	.word	0x2000127c
 8002244:	2000033c 	.word	0x2000033c
 8002248:	0800baa0 	.word	0x0800baa0
 800224c:	20000b54 	.word	0x20000b54
 8002250:	40240000 	.word	0x40240000
 8002254:	20001280 	.word	0x20001280
 8002258:	0800baa8 	.word	0x0800baa8
 800225c:	0800babc 	.word	0x0800babc

08002260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b094      	sub	sp, #80	; 0x50
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	2234      	movs	r2, #52	; 0x34
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f005 f8aa 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	4b2c      	ldr	r3, [pc, #176]	; (800233c <SystemClock_Config+0xdc>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <SystemClock_Config+0xdc>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <SystemClock_Config+0xdc>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <SystemClock_Config+0xe0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <SystemClock_Config+0xe0>)
 80022aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <SystemClock_Config+0xe0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022bc:	2302      	movs	r3, #2
 80022be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c4:	2310      	movs	r3, #16
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c8:	2302      	movs	r3, #2
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022d0:	2308      	movs	r3, #8
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80022d4:	23b4      	movs	r3, #180	; 0xb4
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 ff81 	bl	80051f0 <HAL_RCC_OscConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022f4:	f000 faba 	bl	800286c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022f8:	f002 fc62 	bl	8004bc0 <HAL_PWREx_EnableOverDrive>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002302:	f000 fab3 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002306:	230f      	movs	r3, #15
 8002308:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230a:	2302      	movs	r3, #2
 800230c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2105      	movs	r1, #5
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fc9b 	bl	8004c60 <HAL_RCC_ClockConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002330:	f000 fa9c 	bl	800286c <Error_Handler>
  }
}
 8002334:	bf00      	nop
 8002336:	3750      	adds	r7, #80	; 0x50
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim == &htim6)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d134      	bne.n	80023be <HAL_TIM_PeriodElapsedCallback+0x7a>
  {
	  HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	2120      	movs	r1, #32
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800235a:	f002 fc19 	bl	8004b90 <HAL_GPIO_WritePin>

	  if(Mode_Flag==1)
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d12b      	bne.n	80023be <HAL_TIM_PeriodElapsedCallback+0x7a>
      {
		  gSlope[iCounter]=gTemp;
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800236c:	6814      	ldr	r4, [r2, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fe44 	bl	8000ffc <__aeabi_f2uiz>
 8002374:	4603      	mov	r3, r0
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800237a:	551a      	strb	r2, [r3, r4]

		  iCounter++;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002384:	6013      	str	r3, [r2, #0]

		  if(iCounter>250)
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2bfa      	cmp	r3, #250	; 0xfa
 800238c:	d917      	bls.n	80023be <HAL_TIM_PeriodElapsedCallback+0x7a>
		  {
              if((gSlope[249]-gSlope[0])>=5)
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002390:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	dd03      	ble.n	80023ac <HAL_TIM_PeriodElapsedCallback+0x68>
              {
            	  gCoefficient=0;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e002      	b.n	80023b2 <HAL_TIM_PeriodElapsedCallback+0x6e>
              }
              else
              {
            	  gCoefficient=30;
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023ae:	221e      	movs	r2, #30
 80023b0:	701a      	strb	r2, [r3, #0]
              }
			  Mode_Flag=0;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
		      iCounter=0;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
		  }
      }
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20001408 	.word	0x20001408
 80023cc:	40020400 	.word	0x40020400
 80023d0:	20001284 	.word	0x20001284
 80023d4:	20001280 	.word	0x20001280
 80023d8:	20001384 	.word	0x20001384
 80023dc:	20001288 	.word	0x20001288
 80023e0:	20001388 	.word	0x20001388

080023e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  // HAL_GPIO_TogglePin(RX_LED_GPIO_Port, RX_LED_Pin);
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <ADC_Average_Measurement_Calculator>:

void ADC_Average_Measurement_Calculator()
{
 80023f8:	b490      	push	{r4, r7}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
	uint8_t i; uint8_t ADC_Counter; uint32_t New_tSum[3]={0};
 80023fe:	463b      	mov	r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]

	if(gMeasurments_counter>=100)
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b63      	cmp	r3, #99	; 0x63
 800240e:	d93a      	bls.n	8002486 <ADC_Average_Measurement_Calculator+0x8e>
	{

	gMeasurments_counter=0;
 8002410:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]

    for(ADC_Counter=0;ADC_Counter<3;ADC_Counter++)
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
 800241a:	e031      	b.n	8002480 <ADC_Average_Measurement_Calculator+0x88>
    {
		for(i=0;i<100;i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e028      	b.n	8002474 <ADC_Average_Measurement_Calculator+0x7c>
		{

			New_tSum[ADC_Counter]=New_tSum[ADC_Counter]+gMeasurments_Values[i][ADC_Counter];
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	3310      	adds	r3, #16
 8002428:	443b      	add	r3, r7
 800242a:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	7bb8      	ldrb	r0, [r7, #14]
 8002432:	4c31      	ldr	r4, [pc, #196]	; (80024f8 <ADC_Average_Measurement_Calculator+0x100>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	4403      	add	r3, r0
 800243c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8002440:	461a      	mov	r2, r3
 8002442:	7bbb      	ldrb	r3, [r7, #14]
 8002444:	440a      	add	r2, r1
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3310      	adds	r3, #16
 800244a:	443b      	add	r3, r7
 800244c:	f843 2c10 	str.w	r2, [r3, #-16]

			gMeasurments_avgValue[ADC_Counter]=New_tSum[ADC_Counter]/(i+1);
 8002450:	7bbb      	ldrb	r3, [r7, #14]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	3310      	adds	r3, #16
 8002456:	443b      	add	r3, r7
 8002458:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	4619      	mov	r1, r3
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	fbb2 f2f1 	udiv	r2, r2, r1
 8002468:	4924      	ldr	r1, [pc, #144]	; (80024fc <ADC_Average_Measurement_Calculator+0x104>)
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0;i<100;i++)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b63      	cmp	r3, #99	; 0x63
 8002478:	d9d3      	bls.n	8002422 <ADC_Average_Measurement_Calculator+0x2a>
    for(ADC_Counter=0;ADC_Counter<3;ADC_Counter++)
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	3301      	adds	r3, #1
 800247e:	73bb      	strb	r3, [r7, #14]
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d9ca      	bls.n	800241c <ADC_Average_Measurement_Calculator+0x24>
		}
    }

	}

	gMeasurments_Values[gMeasurments_counter][0]=gADC_Val[0]; // Current
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <ADC_Average_Measurement_Calculator+0x108>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	b290      	uxth	r0, r2
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <ADC_Average_Measurement_Calculator+0x100>)
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	4602      	mov	r2, r0
 80024a0:	801a      	strh	r2, [r3, #0]
	gMeasurments_Values[gMeasurments_counter][1]=gADC_Val[1]; // Voltage
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <ADC_Average_Measurement_Calculator+0x108>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	b290      	uxth	r0, r2
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <ADC_Average_Measurement_Calculator+0x100>)
 80024b0:	460b      	mov	r3, r1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	440b      	add	r3, r1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	3302      	adds	r3, #2
 80024bc:	4602      	mov	r2, r0
 80024be:	801a      	strh	r2, [r3, #0]
	gMeasurments_Values[gMeasurments_counter][2]=gADC_Val[2]; // PT500
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <ADC_Average_Measurement_Calculator+0x108>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	b290      	uxth	r0, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <ADC_Average_Measurement_Calculator+0x100>)
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	4602      	mov	r2, r0
 80024dc:	801a      	strh	r2, [r3, #0]
	gMeasurments_counter++;
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <ADC_Average_Measurement_Calculator+0xfc>)
 80024e8:	701a      	strb	r2, [r3, #0]

}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc90      	pop	{r4, r7}
 80024f2:	4770      	bx	lr
 80024f4:	20001260 	.word	0x20001260
 80024f8:	20001008 	.word	0x20001008
 80024fc:	20001264 	.word	0x20001264
 8002500:	2000139c 	.word	0x2000139c
 8002504:	00000000 	.word	0x00000000

08002508 <PT500_Real_Temperature_Value_Calculation>:

float PT500_Real_Temperature_Value_Calculation()
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
	float Temperature_Value=0; float Voltage_Expression=0; float Resistor_Value=0;
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	607b      	str	r3, [r7, #4]

	Voltage_Expression=((float)(gMeasurments_avgValue[2])* 3.3320 / 4.0950)/1000.0000;
 8002520:	4b45      	ldr	r3, [pc, #276]	; (8002638 <PT500_Real_Temperature_Value_Calculation+0x130>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fc85 	bl	8000e34 <__aeabi_ui2f>
 800252a:	4603      	mov	r3, r0
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f82b 	bl	8000588 <__aeabi_f2d>
 8002532:	a337      	add	r3, pc, #220	; (adr r3, 8002610 <PT500_Real_Temperature_Value_Calculation+0x108>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f87e 	bl	8000638 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	a334      	add	r3, pc, #208	; (adr r3, 8002618 <PT500_Real_Temperature_Value_Calculation+0x110>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f99f 	bl	800088c <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <PT500_Real_Temperature_Value_Calculation+0x134>)
 800255c:	f7fe f996 	bl	800088c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb5e 	bl	8000c28 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	60bb      	str	r3, [r7, #8]

	Resistor_Value=((Voltage_Expression/71.6000)*110000.0000)/(3.3320-(Voltage_Expression/71.6000));
 8002570:	68b8      	ldr	r0, [r7, #8]
 8002572:	f7fe f809 	bl	8000588 <__aeabi_f2d>
 8002576:	a32a      	add	r3, pc, #168	; (adr r3, 8002620 <PT500_Real_Temperature_Value_Calculation+0x118>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe f986 	bl	800088c <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	a327      	add	r3, pc, #156	; (adr r3, 8002628 <PT500_Real_Temperature_Value_Calculation+0x120>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe f853 	bl	8000638 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4614      	mov	r4, r2
 8002598:	461d      	mov	r5, r3
 800259a:	68b8      	ldr	r0, [r7, #8]
 800259c:	f7fd fff4 	bl	8000588 <__aeabi_f2d>
 80025a0:	a31f      	add	r3, pc, #124	; (adr r3, 8002620 <PT500_Real_Temperature_Value_Calculation+0x118>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f971 	bl	800088c <__aeabi_ddiv>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	a118      	add	r1, pc, #96	; (adr r1, 8002610 <PT500_Real_Temperature_Value_Calculation+0x108>)
 80025b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b4:	f7fd fe88 	bl	80002c8 <__aeabi_dsub>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4620      	mov	r0, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	f7fe f964 	bl	800088c <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe fb2c 	bl	8000c28 <__aeabi_d2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	607b      	str	r3, [r7, #4]

	Temperature_Value=(Resistor_Value-500.0000)/1.7;
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fd ffd7 	bl	8000588 <__aeabi_f2d>
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <PT500_Real_Temperature_Value_Calculation+0x138>)
 80025e0:	f7fd fe72 	bl	80002c8 <__aeabi_dsub>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	a310      	add	r3, pc, #64	; (adr r3, 8002630 <PT500_Real_Temperature_Value_Calculation+0x128>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f94b 	bl	800088c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fb13 	bl	8000c28 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]

	return Temperature_Value;
 8002606:	68fb      	ldr	r3, [r7, #12]

}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bdb0      	pop	{r4, r5, r7, pc}
 8002610:	9db22d0e 	.word	0x9db22d0e
 8002614:	400aa7ef 	.word	0x400aa7ef
 8002618:	ae147ae1 	.word	0xae147ae1
 800261c:	40106147 	.word	0x40106147
 8002620:	66666666 	.word	0x66666666
 8002624:	4051e666 	.word	0x4051e666
 8002628:	00000000 	.word	0x00000000
 800262c:	40fadb00 	.word	0x40fadb00
 8002630:	33333333 	.word	0x33333333
 8002634:	3ffb3333 	.word	0x3ffb3333
 8002638:	20001264 	.word	0x20001264
 800263c:	408f4000 	.word	0x408f4000
 8002640:	407f4000 	.word	0x407f4000
 8002644:	00000000 	.word	0x00000000

08002648 <Voltage_Conversion>:


float Voltage_Conversion()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	float Voltage_Expression=0;
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	607b      	str	r3, [r7, #4]

	Voltage_Expression=(((float)(gMeasurments_avgValue[1]) * 11.0 * 3.332) / 4095.0);
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <Voltage_Conversion+0x78>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fbeb 	bl	8000e34 <__aeabi_ui2f>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <Voltage_Conversion+0x7c>)
 800266c:	f7fd ffe4 	bl	8000638 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	a30d      	add	r3, pc, #52	; (adr r3, 80026b0 <Voltage_Conversion+0x68>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	a30b      	add	r3, pc, #44	; (adr r3, 80026b8 <Voltage_Conversion+0x70>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fe f8fc 	bl	800088c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe fac4 	bl	8000c28 <__aeabi_d2f>
 80026a0:	4603      	mov	r3, r0
 80026a2:	607b      	str	r3, [r7, #4]

	return Voltage_Expression;
 80026a4:	687b      	ldr	r3, [r7, #4]

}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	9db22d0e 	.word	0x9db22d0e
 80026b4:	400aa7ef 	.word	0x400aa7ef
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40affe00 	.word	0x40affe00
 80026c0:	20001264 	.word	0x20001264
 80026c4:	40260000 	.word	0x40260000

080026c8 <Current_Conversion>:

float Current_Conversion()
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
	float Current_Expression=0;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]

	//VDDA = (float)3.300*( (float)*VREFIN_CAL) /  (float)gADC_Val[3];

	Current_Expression=(((float)gMeasurments_avgValue[0]* 3.332 / 4095.000)/25.000)/0.005;
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <Current_Conversion+0x90>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fbab 	bl	8000e34 <__aeabi_ui2f>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff51 	bl	8000588 <__aeabi_f2d>
 80026e6:	a316      	add	r3, pc, #88	; (adr r3, 8002740 <Current_Conversion+0x78>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ffa4 	bl	8000638 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	a313      	add	r3, pc, #76	; (adr r3, 8002748 <Current_Conversion+0x80>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fe f8c5 	bl	800088c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <Current_Conversion+0x94>)
 8002710:	f7fe f8bc 	bl	800088c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	a30c      	add	r3, pc, #48	; (adr r3, 8002750 <Current_Conversion+0x88>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fe f8b3 	bl	800088c <__aeabi_ddiv>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa7b 	bl	8000c28 <__aeabi_d2f>
 8002732:	4603      	mov	r3, r0
 8002734:	607b      	str	r3, [r7, #4]

	return Current_Expression;
 8002736:	687b      	ldr	r3, [r7, #4]

}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	9db22d0e 	.word	0x9db22d0e
 8002744:	400aa7ef 	.word	0x400aa7ef
 8002748:	00000000 	.word	0x00000000
 800274c:	40affe00 	.word	0x40affe00
 8002750:	47ae147b 	.word	0x47ae147b
 8002754:	3f747ae1 	.word	0x3f747ae1
 8002758:	20001264 	.word	0x20001264
 800275c:	40390000 	.word	0x40390000

08002760 <Temperature_Fail_Check>:

void Temperature_Fail_Check()

{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	if(PT500_Real_Temperature_Value_Calculation()>=75&&gTemp_State==0)
 8002764:	f7ff fed0 	bl	8002508 <PT500_Real_Temperature_Value_Calculation>
 8002768:	4603      	mov	r3, r0
 800276a:	491c      	ldr	r1, [pc, #112]	; (80027dc <Temperature_Fail_Check+0x7c>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fc1b 	bl	8000fa8 <__aeabi_fcmpge>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <Temperature_Fail_Check+0x5c>
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <Temperature_Fail_Check+0x80>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <Temperature_Fail_Check+0x5c>
	{
		DAC_sendCommand(0, 1, 1, 0);
 8002780:	2300      	movs	r3, #0
 8002782:	2201      	movs	r2, #1
 8002784:	2101      	movs	r1, #1
 8002786:	2000      	movs	r0, #0
 8002788:	f000 f876 	bl	8002878 <DAC_sendCommand>
		HAL_Delay(100);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f000 fe03 	bl	8003398 <HAL_Delay>
		HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002798:	4812      	ldr	r0, [pc, #72]	; (80027e4 <Temperature_Fail_Check+0x84>)
 800279a:	f002 f9f9 	bl	8004b90 <HAL_GPIO_WritePin>
		Buzzer_Effects(2);
 800279e:	2002      	movs	r0, #2
 80027a0:	f000 f970 	bl	8002a84 <Buzzer_Effects>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	480f      	ldr	r0, [pc, #60]	; (80027e8 <Temperature_Fail_Check+0x88>)
 80027aa:	f002 f9f1 	bl	8004b90 <HAL_GPIO_WritePin>
		printf("Laser shut down, temperature is higher then 110 celsius\r\n");
 80027ae:	480f      	ldr	r0, [pc, #60]	; (80027ec <Temperature_Fail_Check+0x8c>)
 80027b0:	f005 faf4 	bl	8007d9c <puts>
		gTemp_State=1;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <Temperature_Fail_Check+0x80>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
	else if(PT500_Real_Temperature_Value_Calculation()<75)
	{
		gTemp_State=0;
	}

}
 80027ba:	e00d      	b.n	80027d8 <Temperature_Fail_Check+0x78>
	else if(PT500_Real_Temperature_Value_Calculation()<75)
 80027bc:	f7ff fea4 	bl	8002508 <PT500_Real_Temperature_Value_Calculation>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4906      	ldr	r1, [pc, #24]	; (80027dc <Temperature_Fail_Check+0x7c>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fbdb 	bl	8000f80 <__aeabi_fcmplt>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <Temperature_Fail_Check+0x72>
}
 80027d0:	e002      	b.n	80027d8 <Temperature_Fail_Check+0x78>
		gTemp_State=0;
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <Temperature_Fail_Check+0x80>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	42960000 	.word	0x42960000
 80027e0:	20001270 	.word	0x20001270
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400
 80027ec:	0800bafc 	.word	0x0800bafc

080027f0 <Short_Circuit_Check>:

void Short_Circuit_Check()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	if(gADC_Val[0]>=925&&gCurrent_State==0)
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <Short_Circuit_Check+0x68>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 80027fc:	d921      	bls.n	8002842 <Short_Circuit_Check+0x52>
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <Short_Circuit_Check+0x6c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11d      	bne.n	8002842 <Short_Circuit_Check+0x52>
	{
		DAC_sendCommand(0, 1, 1, 0);
 8002806:	2300      	movs	r3, #0
 8002808:	2201      	movs	r2, #1
 800280a:	2101      	movs	r1, #1
 800280c:	2000      	movs	r0, #0
 800280e:	f000 f833 	bl	8002878 <DAC_sendCommand>
		HAL_Delay(100);
 8002812:	2064      	movs	r0, #100	; 0x64
 8002814:	f000 fdc0 	bl	8003398 <HAL_Delay>
		HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	4810      	ldr	r0, [pc, #64]	; (8002860 <Short_Circuit_Check+0x70>)
 8002820:	f002 f9b6 	bl	8004b90 <HAL_GPIO_WritePin>
		Buzzer_Effects(2);
 8002824:	2002      	movs	r0, #2
 8002826:	f000 f92d 	bl	8002a84 <Buzzer_Effects>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <Short_Circuit_Check+0x74>)
 8002830:	f002 f9ae 	bl	8004b90 <HAL_GPIO_WritePin>
		printf("Laser shut down, excessive current detected\r\n");
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <Short_Circuit_Check+0x78>)
 8002836:	f005 fab1 	bl	8007d9c <puts>
		gCurrent_State=1;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <Short_Circuit_Check+0x6c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
	}
	else if(gADC_Val[0]<925)
	{
		gCurrent_State=0;
	}
}
 8002840:	e007      	b.n	8002852 <Short_Circuit_Check+0x62>
	else if(gADC_Val[0]<925)
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <Short_Circuit_Check+0x68>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 800284a:	d802      	bhi.n	8002852 <Short_Circuit_Check+0x62>
		gCurrent_State=0;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <Short_Circuit_Check+0x6c>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000139c 	.word	0x2000139c
 800285c:	20001271 	.word	0x20001271
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	0800bb38 	.word	0x0800bb38

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <DAC_sendCommand>:
	}
	return 0;
}

void DAC_sendCommand(uint8_t pCtrl, uint8_t pGain, uint8_t pShdn, uint16_t pData)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	4603      	mov	r3, r0
 800288c:	71bb      	strb	r3, [r7, #6]
 800288e:	460b      	mov	r3, r1
 8002890:	717b      	strb	r3, [r7, #5]
 8002892:	4613      	mov	r3, r2
 8002894:	807b      	strh	r3, [r7, #2]
	
	gDAC_Data.Data.Port = 0;
 8002896:	4a27      	ldr	r2, [pc, #156]	; (8002934 <DAC_sendCommand+0xbc>)
 8002898:	7853      	ldrb	r3, [r2, #1]
 800289a:	f36f 13c7 	bfc	r3, #7, #1
 800289e:	7053      	strb	r3, [r2, #1]
	gDAC_Data.Data.Ctrl = pCtrl;
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	b2d9      	uxtb	r1, r3
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <DAC_sendCommand+0xbc>)
 80028aa:	7853      	ldrb	r3, [r2, #1]
 80028ac:	f361 1386 	bfi	r3, r1, #6, #1
 80028b0:	7053      	strb	r3, [r2, #1]
	gDAC_Data.Data.Gain = pGain;
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	b2d9      	uxtb	r1, r3
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <DAC_sendCommand+0xbc>)
 80028bc:	7853      	ldrb	r3, [r2, #1]
 80028be:	f361 1345 	bfi	r3, r1, #5, #1
 80028c2:	7053      	strb	r3, [r2, #1]
	gDAC_Data.Data.Shdn = pShdn;
 80028c4:	797b      	ldrb	r3, [r7, #5]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	b2d9      	uxtb	r1, r3
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <DAC_sendCommand+0xbc>)
 80028ce:	7853      	ldrb	r3, [r2, #1]
 80028d0:	f361 1304 	bfi	r3, r1, #4, #1
 80028d4:	7053      	strb	r3, [r2, #1]
	gDAC_Data.Data.Data = pData;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	b299      	uxth	r1, r3
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <DAC_sendCommand+0xbc>)
 80028e0:	8813      	ldrh	r3, [r2, #0]
 80028e2:	f361 030b 	bfi	r3, r1, #0, #12
 80028e6:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2110      	movs	r1, #16
 80028ec:	4812      	ldr	r0, [pc, #72]	; (8002938 <DAC_sendCommand+0xc0>)
 80028ee:	f002 f94f 	bl	8004b90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80028f2:	200a      	movs	r0, #10
 80028f4:	f000 fd50 	bl	8003398 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1,&gDAC_Data.buffer[1],1,100);
 80028f8:	2364      	movs	r3, #100	; 0x64
 80028fa:	2201      	movs	r2, #1
 80028fc:	490f      	ldr	r1, [pc, #60]	; (800293c <DAC_sendCommand+0xc4>)
 80028fe:	4810      	ldr	r0, [pc, #64]	; (8002940 <DAC_sendCommand+0xc8>)
 8002900:	f002 ff9d 	bl	800583e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&gDAC_Data.buffer[0],1,100);
 8002904:	2364      	movs	r3, #100	; 0x64
 8002906:	2201      	movs	r2, #1
 8002908:	490a      	ldr	r1, [pc, #40]	; (8002934 <DAC_sendCommand+0xbc>)
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <DAC_sendCommand+0xc8>)
 800290c:	f002 ff97 	bl	800583e <HAL_SPI_Transmit>
	HAL_Delay(10);
 8002910:	200a      	movs	r0, #10
 8002912:	f000 fd41 	bl	8003398 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002916:	2201      	movs	r2, #1
 8002918:	2110      	movs	r1, #16
 800291a:	4807      	ldr	r0, [pc, #28]	; (8002938 <DAC_sendCommand+0xc0>)
 800291c:	f002 f938 	bl	8004b90 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LDAC_GPIO_Port,LDAC_Pin,GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	2110      	movs	r1, #16
 8002924:	4807      	ldr	r0, [pc, #28]	; (8002944 <DAC_sendCommand+0xcc>)
 8002926:	f002 f933 	bl	8004b90 <HAL_GPIO_WritePin>
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	20001398 	.word	0x20001398
 8002938:	40020000 	.word	0x40020000
 800293c:	20001399 	.word	0x20001399
 8002940:	200013ac 	.word	0x200013ac
 8002944:	40020800 	.word	0x40020800

08002948 <IO_check_timeout>:

void IO_check_timeout(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

	if(laser_time.timeout > 0)
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <IO_check_timeout+0x60>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d027      	beq.n	80029a4 <IO_check_timeout+0x5c>
	{
		if(HAL_GetTick() - laser_time.init_time >= laser_time.timeout)
 8002954:	f000 fd16 	bl	8003384 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <IO_check_timeout+0x60>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1ad2      	subs	r2, r2, r3
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <IO_check_timeout+0x60>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d31d      	bcc.n	80029a4 <IO_check_timeout+0x5c>
		{
			DAC_sendCommand(0, 1, 1, 0);
 8002968:	2300      	movs	r3, #0
 800296a:	2201      	movs	r2, #1
 800296c:	2101      	movs	r1, #1
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff ff82 	bl	8002878 <DAC_sendCommand>
			HAL_Delay(100);
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	f000 fd0f 	bl	8003398 <HAL_Delay>
			HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002980:	480a      	ldr	r0, [pc, #40]	; (80029ac <IO_check_timeout+0x64>)
 8002982:	f002 f905 	bl	8004b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	4809      	ldr	r0, [pc, #36]	; (80029b0 <IO_check_timeout+0x68>)
 800298c:	f002 f900 	bl	8004b90 <HAL_GPIO_WritePin>
			Buzzer_Effects(2);
 8002990:	2002      	movs	r0, #2
 8002992:	f000 f877 	bl	8002a84 <Buzzer_Effects>
			laser_time.timeout = 0;
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <IO_check_timeout+0x60>)
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
			laser_time.target_temp = 0;
 800299c:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <IO_check_timeout+0x60>)
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
		}
	}
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000138c 	.word	0x2000138c
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400

080029b4 <IO_control_laser>:

void IO_control_laser(uint8_t command, uint32_t time, uint8_t percentage)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71bb      	strb	r3, [r7, #6]

	if(time > 0)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03e      	beq.n	8002a48 <IO_control_laser+0x94>
	{
		if(time != 0xFFFFFFFF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d00a      	beq.n	80029e8 <IO_control_laser+0x34>
		{
			laser_time.init_time = HAL_GetTick();
 80029d2:	f000 fcd7 	bl	8003384 <HAL_GetTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <IO_control_laser+0xc0>)
 80029da:	6013      	str	r3, [r2, #0]
			laser_time.timeout = time;
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <IO_control_laser+0xc0>)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6053      	str	r3, [r2, #4]
			Buzzer_Effects(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 f84e 	bl	8002a84 <Buzzer_Effects>
		}
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	4822      	ldr	r0, [pc, #136]	; (8002a78 <IO_control_laser+0xc4>)
 80029ee:	f002 f8cf 	bl	8004b90 <HAL_GPIO_WritePin>


		DAC_sendCommand(0, 1, 1, (640+(percentage * 1575 / 100)));
 80029f2:	79bb      	ldrb	r3, [r7, #6]
 80029f4:	f240 6227 	movw	r2, #1575	; 0x627
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <IO_control_laser+0xc8>)
 80029fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002a02:	1152      	asrs	r2, r2, #5
 8002a04:	17db      	asrs	r3, r3, #31
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2201      	movs	r2, #1
 8002a12:	2101      	movs	r1, #1
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff ff2f 	bl	8002878 <DAC_sendCommand>
		HAL_Delay(100);
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f000 fcbc 	bl	8003398 <HAL_Delay>
		if(command == 0)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <IO_control_laser+0x86>
		{
			HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2c:	4814      	ldr	r0, [pc, #80]	; (8002a80 <IO_control_laser+0xcc>)
 8002a2e:	f002 f8af 	bl	8004b90 <HAL_GPIO_WritePin>
			Buzzer_Effects(2);
 8002a32:	2002      	movs	r0, #2
 8002a34:	f000 f826 	bl	8002a84 <Buzzer_Effects>
	{
		HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
	    Buzzer_Effects(2);
	    HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
	}
}
 8002a38:	e017      	b.n	8002a6a <IO_control_laser+0xb6>
			HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_SET);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a40:	480f      	ldr	r0, [pc, #60]	; (8002a80 <IO_control_laser+0xcc>)
 8002a42:	f002 f8a5 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002a46:	e010      	b.n	8002a6a <IO_control_laser+0xb6>
	else if(command == 0)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <IO_control_laser+0xb6>
		HAL_GPIO_WritePin(ES_MCU_GPIO_Port, ES_MCU_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a54:	480a      	ldr	r0, [pc, #40]	; (8002a80 <IO_control_laser+0xcc>)
 8002a56:	f002 f89b 	bl	8004b90 <HAL_GPIO_WritePin>
	    Buzzer_Effects(2);
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f000 f812 	bl	8002a84 <Buzzer_Effects>
	    HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <IO_control_laser+0xc4>)
 8002a66:	f002 f893 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000138c 	.word	0x2000138c
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	51eb851f 	.word	0x51eb851f
 8002a80:	40020000 	.word	0x40020000

08002a84 <Buzzer_Effects>:


}

void Buzzer_Effects(uint8_t Status)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	if(Status==1)
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d11d      	bne.n	8002ad0 <Buzzer_Effects+0x4c>
	{
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002a94:	2201      	movs	r2, #1
 8002a96:	2110      	movs	r1, #16
 8002a98:	481b      	ldr	r0, [pc, #108]	; (8002b08 <Buzzer_Effects+0x84>)
 8002a9a:	f002 f879 	bl	8004b90 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002a9e:	2064      	movs	r0, #100	; 0x64
 8002aa0:	f000 fc7a 	bl	8003398 <HAL_Delay>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	4817      	ldr	r0, [pc, #92]	; (8002b08 <Buzzer_Effects+0x84>)
 8002aaa:	f002 f871 	bl	8004b90 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002aae:	2064      	movs	r0, #100	; 0x64
 8002ab0:	f000 fc72 	bl	8003398 <HAL_Delay>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	4813      	ldr	r0, [pc, #76]	; (8002b08 <Buzzer_Effects+0x84>)
 8002aba:	f002 f869 	bl	8004b90 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002abe:	2064      	movs	r0, #100	; 0x64
 8002ac0:	f000 fc6a 	bl	8003398 <HAL_Delay>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	480f      	ldr	r0, [pc, #60]	; (8002b08 <Buzzer_Effects+0x84>)
 8002aca:	f002 f861 	bl	8004b90 <HAL_GPIO_WritePin>

	else
	{
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8002ace:	e016      	b.n	8002afe <Buzzer_Effects+0x7a>
	else if(Status==2)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d10e      	bne.n	8002af4 <Buzzer_Effects+0x70>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2110      	movs	r1, #16
 8002ada:	480b      	ldr	r0, [pc, #44]	; (8002b08 <Buzzer_Effects+0x84>)
 8002adc:	f002 f858 	bl	8004b90 <HAL_GPIO_WritePin>
	      HAL_Delay(1000);
 8002ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae4:	f000 fc58 	bl	8003398 <HAL_Delay>
	      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2110      	movs	r1, #16
 8002aec:	4806      	ldr	r0, [pc, #24]	; (8002b08 <Buzzer_Effects+0x84>)
 8002aee:	f002 f84f 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002af2:	e004      	b.n	8002afe <Buzzer_Effects+0x7a>
		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2110      	movs	r1, #16
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <Buzzer_Effects+0x84>)
 8002afa:	f002 f849 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40020400 	.word	0x40020400

08002b0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <MX_SPI1_Init+0x68>)
 8002b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b58:	220a      	movs	r2, #10
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b5c:	4804      	ldr	r0, [pc, #16]	; (8002b70 <MX_SPI1_Init+0x64>)
 8002b5e:	f002 fde5 	bl	800572c <HAL_SPI_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b68:	f7ff fe80 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200013ac 	.word	0x200013ac
 8002b74:	40013000 	.word	0x40013000

08002b78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_SPI_MspInit+0x84>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12b      	bne.n	8002bf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_SPI_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002bd2:	23a0      	movs	r3, #160	; 0xa0
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be2:	2305      	movs	r3, #5
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_SPI_MspInit+0x8c>)
 8002bee:	f001 fd4b 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40013000 	.word	0x40013000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_MspInit+0x48>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_MspInit+0x48>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_MspInit+0x48>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_MspInit+0x48>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <HAL_MspInit+0x48>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_MspInit+0x48>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40023800 	.word	0x40023800

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <NMI_Handler+0x4>

08002c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5e:	e7fe      	b.n	8002c5e <HardFault_Handler+0x4>

08002c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <MemManage_Handler+0x4>

08002c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <BusFault_Handler+0x4>

08002c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <UsageFault_Handler+0x4>

08002c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9a:	f000 fb61 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <USART1_IRQHandler+0x10>)
 8002caa:	f003 fbf3 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20001450 	.word	0x20001450

08002cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <USART2_IRQHandler+0x10>)
 8002cbe:	f003 fbe9 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20001494 	.word	0x20001494

08002ccc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <TIM6_DAC_IRQHandler+0x10>)
 8002cd2:	f003 f879 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20001408 	.word	0x20001408

08002ce0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ce6:	f001 fa69 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000fa8 	.word	0x20000fa8

08002cf4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <USART6_IRQHandler+0x10>)
 8002cfa:	f003 fbcb 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200014d8 	.word	0x200014d8

08002d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
	return 1;
 8002d0c:	2301      	movs	r3, #1
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <_kill>:

int _kill(int pid, int sig)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d20:	f004 fb1a 	bl	8007358 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2216      	movs	r2, #22
 8002d28:	601a      	str	r2, [r3, #0]
	return -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_exit>:

void _exit (int status)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffe7 	bl	8002d16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d48:	e7fe      	b.n	8002d48 <_exit+0x12>

08002d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e00a      	b.n	8002d72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d5c:	f3af 8000 	nop.w
 8002d60:	4601      	mov	r1, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf0      	blt.n	8002d5c <_read+0x12>
	}

return len;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]

	//__io_putchar(*ptr++);
	USB_Send((uint8_t *)ptr, len);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	68b8      	ldr	r0, [r7, #8]
 8002d98:	f7fe ff5e 	bl	8001c58 <USB_Send>
	//RS485_Send((uint8_t *)ptr, len);
	//RS232_Send((uint8_t *)ptr, len);

	return len;
 8002d9c:	687b      	ldr	r3, [r7, #4]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_close>:

int _close(int file)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
	return -1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dcc:	605a      	str	r2, [r3, #4]
	return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_isatty>:

int _isatty(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return 1;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
	return 0;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f004 fa8e 	bl	8007358 <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20020000 	.word	0x20020000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20001404 	.word	0x20001404
 8002e70:	20001530 	.word	0x20001530

08002e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e86:	463b      	mov	r3, r7
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <MX_TIM6_Init+0x68>)
 8002e92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1800;
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002e96:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002e9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ea8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002eb2:	f002 fecb 	bl	8005c4c <HAL_TIM_Base_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ebc:	f7ff fcd6 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_TIM6_Init+0x64>)
 8002ece:	f003 f945 	bl	800615c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002ed8:	f7ff fcc8 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20001408 	.word	0x20001408
 8002ee8:	40001000 	.word	0x40001000

08002eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_TIM_Base_MspInit+0x48>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d115      	bne.n	8002f2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_TIM_Base_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_TIM_Base_MspInit+0x4c>)
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_TIM_Base_MspInit+0x4c>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2036      	movs	r0, #54	; 0x36
 8002f20:	f000 ff6f 	bl	8003e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f24:	2036      	movs	r0, #54	; 0x36
 8002f26:	f000 ff88 	bl	8003e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40001000 	.word	0x40001000
 8002f38:	40023800 	.word	0x40023800

08002f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <MX_USART1_UART_Init+0x50>)
 8002f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f74:	f003 f97e 	bl	8006274 <HAL_UART_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f7e:	f7ff fc75 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20001450 	.word	0x20001450
 8002f8c:	40011000 	.word	0x40011000

08002f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <MX_USART2_UART_Init+0x50>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fc8:	f003 f954 	bl	8006274 <HAL_UART_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fd2:	f7ff fc4b 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20001494 	.word	0x20001494
 8002fe0:	40004400 	.word	0x40004400

08002fe4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <MX_USART6_UART_Init+0x50>)
 8002fec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8002ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ff4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 800300a:	220c      	movs	r2, #12
 800300c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800301a:	4805      	ldr	r0, [pc, #20]	; (8003030 <MX_USART6_UART_Init+0x4c>)
 800301c:	f003 f92a 	bl	8006274 <HAL_UART_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003026:	f7ff fc21 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200014d8 	.word	0x200014d8
 8003034:	40011400 	.word	0x40011400

08003038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_UART_MspInit+0x17c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d135      	bne.n	80030c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003064:	f043 0310 	orr.w	r3, r3, #16
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_UART_MspInit+0x180>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_UART_MspInit+0x180>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003092:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030a4:	2307      	movs	r3, #7
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ac:	4619      	mov	r1, r3
 80030ae:	4843      	ldr	r0, [pc, #268]	; (80031bc <HAL_UART_MspInit+0x184>)
 80030b0:	f001 faea 	bl	8004688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2100      	movs	r1, #0
 80030b8:	2025      	movs	r0, #37	; 0x25
 80030ba:	f000 fea2 	bl	8003e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030be:	2025      	movs	r0, #37	; 0x25
 80030c0:	f000 febb 	bl	8003e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80030c4:	e072      	b.n	80031ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <HAL_UART_MspInit+0x188>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d134      	bne.n	800313a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	4a37      	ldr	r2, [pc, #220]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030de:	6413      	str	r3, [r2, #64]	; 0x40
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_UART_MspInit+0x180>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003108:	230c      	movs	r3, #12
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003118:	2307      	movs	r3, #7
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4619      	mov	r1, r3
 8003122:	4826      	ldr	r0, [pc, #152]	; (80031bc <HAL_UART_MspInit+0x184>)
 8003124:	f001 fab0 	bl	8004688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	2026      	movs	r0, #38	; 0x26
 800312e:	f000 fe68 	bl	8003e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003132:	2026      	movs	r0, #38	; 0x26
 8003134:	f000 fe81 	bl	8003e3a <HAL_NVIC_EnableIRQ>
}
 8003138:	e038      	b.n	80031ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART6)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_UART_MspInit+0x18c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d133      	bne.n	80031ac <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_UART_MspInit+0x180>)
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_UART_MspInit+0x180>)
 800314e:	f043 0320 	orr.w	r3, r3, #32
 8003152:	6453      	str	r3, [r2, #68]	; 0x44
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <HAL_UART_MspInit+0x180>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6313      	str	r3, [r2, #48]	; 0x30
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_UART_MspInit+0x180>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800317c:	23c0      	movs	r3, #192	; 0xc0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800318c:	2308      	movs	r3, #8
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	4619      	mov	r1, r3
 8003196:	480c      	ldr	r0, [pc, #48]	; (80031c8 <HAL_UART_MspInit+0x190>)
 8003198:	f001 fa76 	bl	8004688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2047      	movs	r0, #71	; 0x47
 80031a2:	f000 fe2e 	bl	8003e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031a6:	2047      	movs	r0, #71	; 0x47
 80031a8:	f000 fe47 	bl	8003e3a <HAL_NVIC_EnableIRQ>
}
 80031ac:	bf00      	nop
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40011400 	.word	0x40011400
 80031c8:	40020800 	.word	0x40020800

080031cc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_UART_MspDeInit+0x84>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10e      	bne.n	80031fc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 80031e4:	f023 0310 	bic.w	r3, r3, #16
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80031ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031ee:	481a      	ldr	r0, [pc, #104]	; (8003258 <HAL_UART_MspDeInit+0x8c>)
 80031f0:	f001 fbdc 	bl	80049ac <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80031f4:	2025      	movs	r0, #37	; 0x25
 80031f6:	f000 fe2e 	bl	8003e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 80031fa:	e024      	b.n	8003246 <HAL_UART_MspDeInit+0x7a>
  else if(uartHandle->Instance==USART2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a16      	ldr	r2, [pc, #88]	; (800325c <HAL_UART_MspDeInit+0x90>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10d      	bne.n	8003222 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 800320c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003212:	210c      	movs	r1, #12
 8003214:	4810      	ldr	r0, [pc, #64]	; (8003258 <HAL_UART_MspDeInit+0x8c>)
 8003216:	f001 fbc9 	bl	80049ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800321a:	2026      	movs	r0, #38	; 0x26
 800321c:	f000 fe1b 	bl	8003e56 <HAL_NVIC_DisableIRQ>
}
 8003220:	e011      	b.n	8003246 <HAL_UART_MspDeInit+0x7a>
  else if(uartHandle->Instance==USART6)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_UART_MspDeInit+0x94>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10c      	bne.n	8003246 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART6_CLK_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	4a08      	ldr	r2, [pc, #32]	; (8003254 <HAL_UART_MspDeInit+0x88>)
 8003232:	f023 0320 	bic.w	r3, r3, #32
 8003236:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8003238:	21c0      	movs	r1, #192	; 0xc0
 800323a:	480a      	ldr	r0, [pc, #40]	; (8003264 <HAL_UART_MspDeInit+0x98>)
 800323c:	f001 fbb6 	bl	80049ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003240:	2047      	movs	r0, #71	; 0x47
 8003242:	f000 fe08 	bl	8003e56 <HAL_NVIC_DisableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40011000 	.word	0x40011000
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000
 800325c:	40004400 	.word	0x40004400
 8003260:	40011400 	.word	0x40011400
 8003264:	40020800 	.word	0x40020800

08003268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800326c:	480d      	ldr	r0, [pc, #52]	; (80032a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326e:	490e      	ldr	r1, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003270:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003284:	4c0b      	ldr	r4, [pc, #44]	; (80032b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003292:	f7ff fdef 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003296:	f004 f865 	bl	8007364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329a:	f7fe fee5 	bl	8002068 <main>
  bx  lr    
 800329e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80032ac:	0800c03c 	.word	0x0800c03c
  ldr r2, =_sbss
 80032b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80032b4:	20001530 	.word	0x20001530

080032b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC_IRQHandler>
	...

080032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_Init+0x40>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_Init+0x40>)
 80032c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_Init+0x40>)
 80032d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_Init+0x40>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e4:	2003      	movs	r0, #3
 80032e6:	f000 fd81 	bl	8003dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ea:	200f      	movs	r0, #15
 80032ec:	f000 f808 	bl	8003300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fc8a 	bl	8002c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x54>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_InitTick+0x58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003316:	fbb3 f3f1 	udiv	r3, r3, r1
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fda7 	bl	8003e72 <HAL_SYSTICK_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00e      	b.n	800334c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d80a      	bhi.n	800334a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003334:	2200      	movs	r2, #0
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f000 fd61 	bl	8003e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003340:	4a06      	ldr	r2, [pc, #24]	; (800335c <HAL_InitTick+0x5c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000000 	.word	0x20000000
 8003358:	20000008 	.word	0x20000008
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x1c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_IncTick+0x20>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_IncTick+0x20>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000008 	.word	0x20000008
 8003380:	2000151c 	.word	0x2000151c

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <HAL_GetTick+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	2000151c 	.word	0x2000151c

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff fff0 	bl	8003384 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffe0 	bl	8003384 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000008 	.word	0x20000008

080033e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e033      	b.n	800345e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fd0e 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003426:	f023 0302 	bic.w	r3, r3, #2
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa6c 	bl	8003910 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
 800344e:	e001      	b.n	8003454 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Start_DMA+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e0e9      	b.n	800365a <HAL_ADC_Start_DMA+0x1f2>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d018      	beq.n	80034ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ac:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <HAL_ADC_Start_DMA+0x1fc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <HAL_ADC_Start_DMA+0x200>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9a      	lsrs	r2, r3, #18
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034c0:	e002      	b.n	80034c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f9      	bne.n	80034c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d107      	bne.n	80034ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	f040 80a1 	bne.w	8003640 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003528:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d106      	bne.n	800354c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f023 0206 	bic.w	r2, r3, #6
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
 800354a:	e002      	b.n	8003552 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_ADC_Start_DMA+0x204>)
 800355c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	4a43      	ldr	r2, [pc, #268]	; (8003670 <HAL_ADC_Start_DMA+0x208>)
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4a42      	ldr	r2, [pc, #264]	; (8003674 <HAL_ADC_Start_DMA+0x20c>)
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a41      	ldr	r2, [pc, #260]	; (8003678 <HAL_ADC_Start_DMA+0x210>)
 8003574:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800357e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800358e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	334c      	adds	r3, #76	; 0x4c
 80035aa:	4619      	mov	r1, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f000 fd1a 	bl	8003fe8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d12a      	bne.n	8003616 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2d      	ldr	r2, [pc, #180]	; (800367c <HAL_ADC_Start_DMA+0x214>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d015      	beq.n	80035f6 <HAL_ADC_Start_DMA+0x18e>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <HAL_ADC_Start_DMA+0x218>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_Start_DMA+0x178>
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_ADC_Start_DMA+0x204>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_ADC_Start_DMA+0x21c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d136      	bne.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_ADC_Start_DMA+0x204>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d130      	bne.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d129      	bne.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e020      	b.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_ADC_Start_DMA+0x214>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d11b      	bne.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d114      	bne.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	e00b      	b.n	8003658 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000
 8003668:	431bde83 	.word	0x431bde83
 800366c:	40012300 	.word	0x40012300
 8003670:	08003b09 	.word	0x08003b09
 8003674:	08003bc3 	.word	0x08003bc3
 8003678:	08003bdf 	.word	0x08003bdf
 800367c:	40012000 	.word	0x40012000
 8003680:	40012100 	.word	0x40012100
 8003684:	40012200 	.word	0x40012200

08003688 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x1c>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e113      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x244>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b09      	cmp	r3, #9
 80036d6:	d925      	bls.n	8003724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	2207      	movs	r2, #7
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43da      	mvns	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	400a      	ands	r2, r1
 80036fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68d9      	ldr	r1, [r3, #12]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	4618      	mov	r0, r3
 8003710:	4603      	mov	r3, r0
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4403      	add	r3, r0
 8003716:	3b1e      	subs	r3, #30
 8003718:	409a      	lsls	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	e022      	b.n	800376a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6919      	ldr	r1, [r3, #16]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	2207      	movs	r2, #7
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	400a      	ands	r2, r1
 8003746:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	4603      	mov	r3, r0
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4403      	add	r3, r0
 8003760:	409a      	lsls	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d824      	bhi.n	80037bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	3b05      	subs	r3, #5
 8003784:	221f      	movs	r2, #31
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	400a      	ands	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	3b05      	subs	r3, #5
 80037ae:	fa00 f203 	lsl.w	r2, r0, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ba:	e04c      	b.n	8003856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d824      	bhi.n	800380e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	3b23      	subs	r3, #35	; 0x23
 80037d6:	221f      	movs	r2, #31
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43da      	mvns	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	400a      	ands	r2, r1
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	3b23      	subs	r3, #35	; 0x23
 8003800:	fa00 f203 	lsl.w	r2, r0, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
 800380c:	e023      	b.n	8003856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3b41      	subs	r3, #65	; 0x41
 8003820:	221f      	movs	r2, #31
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	400a      	ands	r2, r1
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	4618      	mov	r0, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	3b41      	subs	r3, #65	; 0x41
 800384a:	fa00 f203 	lsl.w	r2, r0, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_ADC_ConfigChannel+0x250>)
 8003858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_ADC_ConfigChannel+0x254>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10f      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b12      	cmp	r3, #18
 800386a:	d10b      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <HAL_ADC_ConfigChannel+0x254>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12b      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x23a>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_ADC_ConfigChannel+0x258>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b11      	cmp	r3, #17
 800389e:	d122      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_ADC_ConfigChannel+0x258>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_ADC_ConfigChannel+0x25c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a11      	ldr	r2, [pc, #68]	; (800390c <HAL_ADC_ConfigChannel+0x260>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9a      	lsrs	r2, r3, #18
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f9      	bne.n	80038da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012300 	.word	0x40012300
 8003900:	40012000 	.word	0x40012000
 8003904:	10000012 	.word	0x10000012
 8003908:	20000000 	.word	0x20000000
 800390c:	431bde83 	.word	0x431bde83

08003910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003918:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <ADC_Init+0x1f0>)
 800391a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	021a      	lsls	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <ADC_Init+0x1f4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6899      	ldr	r1, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	e00f      	b.n	8003a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0202 	bic.w	r2, r2, #2
 8003a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7e1b      	ldrb	r3, [r3, #24]
 8003a28:	005a      	lsls	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	3b01      	subs	r3, #1
 8003a68:	035a      	lsls	r2, r3, #13
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	e007      	b.n	8003a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	051a      	lsls	r2, r3, #20
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ac6:	025a      	lsls	r2, r3, #9
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	029a      	lsls	r2, r3, #10
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40012300 	.word	0x40012300
 8003b04:	0f000001 	.word	0x0f000001

08003b08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13c      	bne.n	8003b9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d12b      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d127      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d119      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0220 	bic.w	r2, r2, #32
 8003b6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7fe fc25 	bl	80023e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b9a:	e00e      	b.n	8003bba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fd76 	bl	800369a <HAL_ADC_ErrorCallback>
}
 8003bae:	e004      	b.n	8003bba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fd59 	bl	8003688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fd4b 	bl	800369a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	60d3      	str	r3, [r2, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4906      	ldr	r1, [pc, #24]	; (8003ca4 <__NVIC_EnableIRQ+0x34>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100

08003ca8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	db12      	blt.n	8003ce0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	490a      	ldr	r1, [pc, #40]	; (8003cec <__NVIC_DisableIRQ+0x44>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2001      	movs	r0, #1
 8003cca:	fa00 f202 	lsl.w	r2, r0, r2
 8003cce:	3320      	adds	r3, #32
 8003cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd4:	f3bf 8f4f 	dsb	sy
}
 8003cd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cda:	f3bf 8f6f 	isb	sy
}
 8003cde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	; (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db8:	d301      	bcc.n	8003dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00f      	b.n	8003dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <SysTick_Config+0x40>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc6:	210f      	movs	r1, #15
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	f7ff ff90 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <SysTick_Config+0x40>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <SysTick_Config+0x40>)
 8003dd8:	2207      	movs	r2, #7
 8003dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	e000e010 	.word	0xe000e010

08003dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff09 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e14:	f7ff ff1e 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	6978      	ldr	r0, [r7, #20]
 8003e20:	f7ff ff90 	bl	8003d44 <NVIC_EncodePriority>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff5f 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4603      	mov	r3, r0
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff11 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff1f 	bl	8003ca8 <__NVIC_DisableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ff94 	bl	8003da8 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e98:	f7ff fa74 	bl	8003384 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e099      	b.n	8003fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec8:	e00f      	b.n	8003eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eca:	f7ff fa5b 	bl	8003384 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d908      	bls.n	8003eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e078      	b.n	8003fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e8      	bne.n	8003eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_DMA_Init+0x158>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0307 	bic.w	r3, r3, #7
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d117      	bne.n	8003fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 faff 	bl	8004594 <DMA_CheckFifoParam>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003faa:	2301      	movs	r3, #1
 8003fac:	e016      	b.n	8003fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fab8 	bl	800452c <DMA_CalcBaseAndBitshift>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	223f      	movs	r2, #63	; 0x3f
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	f010803f 	.word	0xf010803f

08003fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_DMA_Start_IT+0x26>
 800400a:	2302      	movs	r3, #2
 800400c:	e040      	b.n	8004090 <HAL_DMA_Start_IT+0xa8>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d12f      	bne.n	8004082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa4a 	bl	80044d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	223f      	movs	r2, #63	; 0x3f
 8004042:	409a      	lsls	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0216 	orr.w	r2, r2, #22
 8004056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040a6:	f7ff f96d 	bl	8003384 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e052      	b.n	8004170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_Abort+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	e013      	b.n	8004144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411c:	f7ff f932 	bl	8003384 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b05      	cmp	r3, #5
 8004128:	d90c      	bls.n	8004144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e015      	b.n	8004170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	223f      	movs	r2, #63	; 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00c      	b.n	80041b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
	...

080041bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c8:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <HAL_DMA_IRQHandler+0x248>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8e      	ldr	r2, [pc, #568]	; (8004408 <HAL_DMA_IRQHandler+0x24c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2208      	movs	r2, #8
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2204      	movs	r2, #4
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2204      	movs	r2, #4
 8004282:	409a      	lsls	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2210      	movs	r2, #16
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d043      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03c      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2210      	movs	r2, #16
 80042b8:	409a      	lsls	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d024      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e01f      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e016      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0208 	bic.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2220      	movs	r2, #32
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 808f 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8087 	beq.w	800445c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b05      	cmp	r3, #5
 8004364:	d136      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x1da>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	223f      	movs	r2, #63	; 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d07e      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
        }
        return;
 80043d2:	e079      	b.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01d      	beq.n	800441e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e02c      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000
 8004408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01e      	b.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2b00      	cmp	r3, #0
 8004462:	d032      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d307      	bcc.n	80044a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <HAL_DMA_IRQHandler+0x2cc>
 80044a2:	e000      	b.n	80044a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e000      	b.n	80044ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80044c8:	bf00      	nop
    }
  }
}
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d108      	bne.n	8004510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800450e:	e007      	b.n	8004520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
	...

0800452c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3b10      	subs	r3, #16
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <DMA_CalcBaseAndBitshift+0x60>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <DMA_CalcBaseAndBitshift+0x64>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d909      	bls.n	800456e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	659a      	str	r2, [r3, #88]	; 0x58
 800456c:	e007      	b.n	800457e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	aaaaaaab 	.word	0xaaaaaaab
 8004590:	0800bb80 	.word	0x0800bb80

08004594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11f      	bne.n	80045ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d856      	bhi.n	8004662 <DMA_CheckFifoParam+0xce>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x28>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	08004663 	.word	0x08004663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d046      	beq.n	8004666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e043      	b.n	8004666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e6:	d140      	bne.n	800466a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ec:	e03d      	b.n	800466a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d121      	bne.n	800463c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d837      	bhi.n	800466e <DMA_CheckFifoParam+0xda>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <DMA_CheckFifoParam+0x70>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004615 	.word	0x08004615
 8004608:	0800461b 	.word	0x0800461b
 800460c:	08004615 	.word	0x08004615
 8004610:	0800462d 	.word	0x0800462d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e030      	b.n	800467c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d025      	beq.n	8004672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462a:	e022      	b.n	8004672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004634:	d11f      	bne.n	8004676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800463a:	e01c      	b.n	8004676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d903      	bls.n	800464a <DMA_CheckFifoParam+0xb6>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004648:	e018      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
      break;
 800464e:	e015      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e00b      	b.n	800467a <DMA_CheckFifoParam+0xe6>
      break;
 8004662:	bf00      	nop
 8004664:	e00a      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
 8004668:	e008      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e006      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;   
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800467a:	bf00      	nop
    }
  } 
  
  return status; 
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e165      	b.n	8004970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a4:	2201      	movs	r2, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	f040 8154 	bne.w	800496a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d005      	beq.n	80046da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d130      	bne.n	800473c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2203      	movs	r2, #3
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004710:	2201      	movs	r2, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 0201 	and.w	r2, r3, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d017      	beq.n	8004778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d123      	bne.n	80047cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	08da      	lsrs	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3208      	adds	r2, #8
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	220f      	movs	r2, #15
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	08da      	lsrs	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3208      	adds	r2, #8
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80ae 	beq.w	800496a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_GPIO_Init+0x2fc>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_GPIO_Init+0x2fc>)
 8004818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800481c:	6453      	str	r3, [r2, #68]	; 0x44
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_GPIO_Init+0x2fc>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482a:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_GPIO_Init+0x300>)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_GPIO_Init+0x304>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d025      	beq.n	80048a2 <HAL_GPIO_Init+0x21a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4d      	ldr	r2, [pc, #308]	; (8004990 <HAL_GPIO_Init+0x308>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <HAL_GPIO_Init+0x216>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4c      	ldr	r2, [pc, #304]	; (8004994 <HAL_GPIO_Init+0x30c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d019      	beq.n	800489a <HAL_GPIO_Init+0x212>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4b      	ldr	r2, [pc, #300]	; (8004998 <HAL_GPIO_Init+0x310>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_GPIO_Init+0x20e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4a      	ldr	r2, [pc, #296]	; (800499c <HAL_GPIO_Init+0x314>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00d      	beq.n	8004892 <HAL_GPIO_Init+0x20a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a49      	ldr	r2, [pc, #292]	; (80049a0 <HAL_GPIO_Init+0x318>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <HAL_GPIO_Init+0x206>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <HAL_GPIO_Init+0x31c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_GPIO_Init+0x202>
 8004886:	2306      	movs	r3, #6
 8004888:	e00c      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800488a:	2307      	movs	r3, #7
 800488c:	e00a      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800488e:	2305      	movs	r3, #5
 8004890:	e008      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 8004892:	2304      	movs	r3, #4
 8004894:	e006      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 8004896:	2303      	movs	r3, #3
 8004898:	e004      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800489a:	2302      	movs	r3, #2
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 80048a2:	2300      	movs	r3, #0
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	f002 0203 	and.w	r2, r2, #3
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	4093      	lsls	r3, r2
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b4:	4934      	ldr	r1, [pc, #208]	; (8004988 <HAL_GPIO_Init+0x300>)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	3302      	adds	r3, #2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_GPIO_Init+0x320>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048e6:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <HAL_GPIO_Init+0x320>)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ec:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_GPIO_Init+0x320>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_GPIO_Init+0x320>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_GPIO_Init+0x320>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_GPIO_Init+0x320>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <HAL_GPIO_Init+0x320>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004964:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <HAL_GPIO_Init+0x320>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b0f      	cmp	r3, #15
 8004974:	f67f ae96 	bls.w	80046a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3724      	adds	r7, #36	; 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40023800 	.word	0x40023800
 8004988:	40013800 	.word	0x40013800
 800498c:	40020000 	.word	0x40020000
 8004990:	40020400 	.word	0x40020400
 8004994:	40020800 	.word	0x40020800
 8004998:	40020c00 	.word	0x40020c00
 800499c:	40021000 	.word	0x40021000
 80049a0:	40021400 	.word	0x40021400
 80049a4:	40021800 	.word	0x40021800
 80049a8:	40013c00 	.word	0x40013c00

080049ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e0c7      	b.n	8004b58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049c8:	2201      	movs	r2, #1
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	f040 80b7 	bne.w	8004b52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80049e4:	4a61      	ldr	r2, [pc, #388]	; (8004b6c <HAL_GPIO_DeInit+0x1c0>)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	220f      	movs	r2, #15
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a59      	ldr	r2, [pc, #356]	; (8004b70 <HAL_GPIO_DeInit+0x1c4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d025      	beq.n	8004a5a <HAL_GPIO_DeInit+0xae>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_GPIO_DeInit+0x1c8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <HAL_GPIO_DeInit+0xaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a57      	ldr	r2, [pc, #348]	; (8004b78 <HAL_GPIO_DeInit+0x1cc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d019      	beq.n	8004a52 <HAL_GPIO_DeInit+0xa6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a56      	ldr	r2, [pc, #344]	; (8004b7c <HAL_GPIO_DeInit+0x1d0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_GPIO_DeInit+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a55      	ldr	r2, [pc, #340]	; (8004b80 <HAL_GPIO_DeInit+0x1d4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00d      	beq.n	8004a4a <HAL_GPIO_DeInit+0x9e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a54      	ldr	r2, [pc, #336]	; (8004b84 <HAL_GPIO_DeInit+0x1d8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_DeInit+0x9a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a53      	ldr	r2, [pc, #332]	; (8004b88 <HAL_GPIO_DeInit+0x1dc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_GPIO_DeInit+0x96>
 8004a3e:	2306      	movs	r3, #6
 8004a40:	e00c      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a42:	2307      	movs	r3, #7
 8004a44:	e00a      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a46:	2305      	movs	r3, #5
 8004a48:	e008      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	e006      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e004      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e002      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_GPIO_DeInit+0xb0>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	f002 0203 	and.w	r2, r2, #3
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	4093      	lsls	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d132      	bne.n	8004ad2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a6c:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	4945      	ldr	r1, [pc, #276]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a7a:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	4942      	ldr	r1, [pc, #264]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	493e      	ldr	r1, [pc, #248]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	493b      	ldr	r1, [pc, #236]	; (8004b8c <HAL_GPIO_DeInit+0x1e0>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <HAL_GPIO_DeInit+0x1c0>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	3302      	adds	r3, #2
 8004abc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	4829      	ldr	r0, [pc, #164]	; (8004b6c <HAL_GPIO_DeInit+0x1c0>)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	400a      	ands	r2, r1
 8004acc:	3302      	adds	r3, #2
 8004ace:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2103      	movs	r1, #3
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	08d2      	lsrs	r2, r2, #3
 8004b08:	4019      	ands	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3208      	adds	r2, #8
 8004b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2103      	movs	r1, #3
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3301      	adds	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	f67f af34 	bls.w	80049c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	40020000 	.word	0x40020000
 8004b74:	40020400 	.word	0x40020400
 8004b78:	40020800 	.word	0x40020800
 8004b7c:	40020c00 	.word	0x40020c00
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40021400 	.word	0x40021400
 8004b88:	40021800 	.word	0x40021800
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bac:	e003      	b.n	8004bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	619a      	str	r2, [r3, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_PWREx_EnableOverDrive+0x94>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bec:	f7fe fbca 	bl	8003384 <HAL_GetTick>
 8004bf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bf2:	e009      	b.n	8004c08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf4:	f7fe fbc6 	bl	8003384 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c02:	d901      	bls.n	8004c08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e01f      	b.n	8004c48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c14:	d1ee      	bne.n	8004bf4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c1c:	f7fe fbb2 	bl	8003384 <HAL_GetTick>
 8004c20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c22:	e009      	b.n	8004c38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c24:	f7fe fbae 	bl	8003384 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c32:	d901      	bls.n	8004c38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e007      	b.n	8004c48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c44:	d1ee      	bne.n	8004c24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	420e0040 	.word	0x420e0040
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	420e0044 	.word	0x420e0044

08004c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0cc      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b68      	ldr	r3, [pc, #416]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d90c      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b8      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ccc:	4b53      	ldr	r3, [pc, #332]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	494d      	ldr	r1, [pc, #308]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d044      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d119      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e067      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fe fb18 	bl	8003384 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fe fb14 	bl	8003384 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e04f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20c      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b22      	ldr	r3, [pc, #136]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e032      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4916      	ldr	r1, [pc, #88]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	490e      	ldr	r1, [pc, #56]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004de6:	f000 f853 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	490a      	ldr	r1, [pc, #40]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fa7a 	bl	8003300 <HAL_InitTick>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023c00 	.word	0x40023c00
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	0800bb68 	.word	0x0800bb68
 8004e24:	20000000 	.word	0x20000000
 8004e28:	20000004 	.word	0x20000004

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	20000000 	.word	0x20000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff2 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800bb78 	.word	0x0800bb78

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e6c:	f7ff ffde 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	0800bb78 	.word	0x0800bb78

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b0a6      	sub	sp, #152	; 0x98
 8004e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb6:	4bc4      	ldr	r3, [pc, #784]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	f200 8188 	bhi.w	80051d4 <HAL_RCC_GetSysClockFreq+0x344>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	080051d5 	.word	0x080051d5
 8004ed4:	080051d5 	.word	0x080051d5
 8004ed8:	080051d5 	.word	0x080051d5
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	080051d5 	.word	0x080051d5
 8004ee4:	080051d5 	.word	0x080051d5
 8004ee8:	080051d5 	.word	0x080051d5
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	080051d5 	.word	0x080051d5
 8004ef4:	080051d5 	.word	0x080051d5
 8004ef8:	080051d5 	.word	0x080051d5
 8004efc:	0800507d 	.word	0x0800507d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f00:	4bb2      	ldr	r3, [pc, #712]	; (80051cc <HAL_RCC_GetSysClockFreq+0x33c>)
 8004f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004f06:	e169      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x34c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f08:	4bb1      	ldr	r3, [pc, #708]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x340>)
 8004f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f0e:	e165      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x34c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f10:	4bad      	ldr	r3, [pc, #692]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f1c:	4baa      	ldr	r3, [pc, #680]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d030      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0xfa>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f28:	4ba7      	ldr	r3, [pc, #668]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	099b      	lsrs	r3, r3, #6
 8004f2e:	2200      	movs	r2, #0
 8004f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004f40:	4ba3      	ldr	r3, [pc, #652]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x340>)
 8004f42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004f46:	462a      	mov	r2, r5
 8004f48:	fb03 f202 	mul.w	r2, r3, r2
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4621      	mov	r1, r4
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	4a9e      	ldr	r2, [pc, #632]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x340>)
 8004f58:	4621      	mov	r1, r4
 8004f5a:	fba1 2102 	umull	r2, r1, r1, r2
 8004f5e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004f60:	67ba      	str	r2, [r7, #120]	; 0x78
 8004f62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f64:	4413      	add	r3, r2
 8004f66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f70:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f76:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004f7a:	f7fc f85f 	bl	800103c <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4613      	mov	r3, r2
 8004f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f88:	e066      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	2200      	movs	r2, #0
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
 8004f94:	657a      	str	r2, [r7, #84]	; 0x54
 8004f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	0159      	lsls	r1, r3, #5
 8004fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb8:	0150      	lsls	r0, r2, #5
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	1a51      	subs	r1, r2, r1
 8004fc2:	6139      	str	r1, [r7, #16]
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd8:	4659      	mov	r1, fp
 8004fda:	018b      	lsls	r3, r1, #6
 8004fdc:	4651      	mov	r1, sl
 8004fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe2:	4651      	mov	r1, sl
 8004fe4:	018a      	lsls	r2, r1, #6
 8004fe6:	46d4      	mov	ip, sl
 8004fe8:	ebb2 080c 	subs.w	r8, r2, ip
 8004fec:	4659      	mov	r1, fp
 8004fee:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005006:	4690      	mov	r8, r2
 8005008:	4699      	mov	r9, r3
 800500a:	4623      	mov	r3, r4
 800500c:	eb18 0303 	adds.w	r3, r8, r3
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	462b      	mov	r3, r5
 8005014:	eb49 0303 	adc.w	r3, r9, r3
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005026:	4629      	mov	r1, r5
 8005028:	028b      	lsls	r3, r1, #10
 800502a:	4620      	mov	r0, r4
 800502c:	4629      	mov	r1, r5
 800502e:	4604      	mov	r4, r0
 8005030:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005034:	4601      	mov	r1, r0
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005040:	2200      	movs	r2, #0
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	647a      	str	r2, [r7, #68]	; 0x44
 8005046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800504a:	f7fb fff7 	bl	800103c <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4613      	mov	r3, r2
 8005054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005058:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	3301      	adds	r3, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800506a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800506e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800507a:	e0af      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x34c>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800507c:	4b52      	ldr	r3, [pc, #328]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005088:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d029      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005094:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	2200      	movs	r2, #0
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
 800509e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050a6:	2100      	movs	r1, #0
 80050a8:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x340>)
 80050aa:	fb03 f201 	mul.w	r2, r3, r1
 80050ae:	2300      	movs	r3, #0
 80050b0:	fb00 f303 	mul.w	r3, r0, r3
 80050b4:	4413      	add	r3, r2
 80050b6:	4a46      	ldr	r2, [pc, #280]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x340>)
 80050b8:	fba0 2102 	umull	r2, r1, r0, r2
 80050bc:	6779      	str	r1, [r7, #116]	; 0x74
 80050be:	673a      	str	r2, [r7, #112]	; 0x70
 80050c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050c2:	4413      	add	r3, r2
 80050c4:	677b      	str	r3, [r7, #116]	; 0x74
 80050c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ca:	2200      	movs	r2, #0
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
 80050ce:	637a      	str	r2, [r7, #52]	; 0x34
 80050d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80050d8:	f7fb ffb0 	bl	800103c <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4613      	mov	r3, r2
 80050e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050e6:	e05f      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x318>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e8:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	2200      	movs	r2, #0
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005116:	0150      	lsls	r0, r2, #5
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	46c4      	mov	ip, r8
 800511e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005122:	4640      	mov	r0, r8
 8005124:	4649      	mov	r1, r9
 8005126:	468c      	mov	ip, r1
 8005128:	eb63 0b0c 	sbc.w	fp, r3, ip
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800513c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005140:	ebb2 040a 	subs.w	r4, r2, sl
 8005144:	eb63 050b 	sbc.w	r5, r3, fp
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	00eb      	lsls	r3, r5, #3
 8005152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005156:	00e2      	lsls	r2, r4, #3
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	4603      	mov	r3, r0
 800515e:	18e3      	adds	r3, r4, r3
 8005160:	603b      	str	r3, [r7, #0]
 8005162:	460b      	mov	r3, r1
 8005164:	eb45 0303 	adc.w	r3, r5, r3
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005176:	4629      	mov	r1, r5
 8005178:	028b      	lsls	r3, r1, #10
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	4604      	mov	r4, r0
 8005180:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005184:	4601      	mov	r1, r0
 8005186:	028a      	lsls	r2, r1, #10
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005190:	2200      	movs	r2, #0
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	61fa      	str	r2, [r7, #28]
 8005196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800519a:	f7fb ff4f 	bl	800103c <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4613      	mov	r3, r2
 80051a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0f1b      	lsrs	r3, r3, #28
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80051b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051c6:	e009      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x34c>
 80051c8:	40023800 	.word	0x40023800
 80051cc:	00f42400 	.word	0x00f42400
 80051d0:	017d7840 	.word	0x017d7840
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3798      	adds	r7, #152	; 0x98
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	00f42400 	.word	0x00f42400

080051f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e28d      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8083 	beq.w	8005316 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005210:	4b94      	ldr	r3, [pc, #592]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b04      	cmp	r3, #4
 800521a:	d019      	beq.n	8005250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800521c:	4b91      	ldr	r3, [pc, #580]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005224:	2b08      	cmp	r3, #8
 8005226:	d106      	bne.n	8005236 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005228:	4b8e      	ldr	r3, [pc, #568]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005234:	d00c      	beq.n	8005250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005236:	4b8b      	ldr	r3, [pc, #556]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d112      	bne.n	8005268 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b88      	ldr	r3, [pc, #544]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524e:	d10b      	bne.n	8005268 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005250:	4b84      	ldr	r3, [pc, #528]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05b      	beq.n	8005314 <HAL_RCC_OscConfig+0x124>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d157      	bne.n	8005314 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e25a      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d106      	bne.n	8005280 <HAL_RCC_OscConfig+0x90>
 8005272:	4b7c      	ldr	r3, [pc, #496]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7b      	ldr	r2, [pc, #492]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e01d      	b.n	80052bc <HAL_RCC_OscConfig+0xcc>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0xb4>
 800528a:	4b76      	ldr	r3, [pc, #472]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a75      	ldr	r2, [pc, #468]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b73      	ldr	r3, [pc, #460]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a72      	ldr	r2, [pc, #456]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0xcc>
 80052a4:	4b6f      	ldr	r3, [pc, #444]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6e      	ldr	r2, [pc, #440]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b6c      	ldr	r3, [pc, #432]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6b      	ldr	r2, [pc, #428]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80052b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fe f85e 	bl	8003384 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fe f85a 	bl	8003384 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e21f      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0xdc>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fe f84a 	bl	8003384 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f4:	f7fe f846 	bl	8003384 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e20b      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005306:	4b57      	ldr	r3, [pc, #348]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x104>
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d06f      	beq.n	8005402 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005322:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800532e:	4b4d      	ldr	r3, [pc, #308]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005336:	2b08      	cmp	r3, #8
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800533a:	4b4a      	ldr	r3, [pc, #296]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d11c      	bne.n	800538c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005352:	4b44      	ldr	r3, [pc, #272]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d116      	bne.n	800538c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535e:	4b41      	ldr	r3, [pc, #260]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_RCC_OscConfig+0x186>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d001      	beq.n	8005376 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e1d3      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4937      	ldr	r1, [pc, #220]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538a:	e03a      	b.n	8005402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005394:	4b34      	ldr	r3, [pc, #208]	; (8005468 <HAL_RCC_OscConfig+0x278>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fd fff3 	bl	8003384 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fd ffef 	bl	8003384 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e1b4      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4925      	ldr	r1, [pc, #148]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]
 80053d4:	e015      	b.n	8005402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d6:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HAL_RCC_OscConfig+0x278>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fd ffd2 	bl	8003384 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e4:	f7fd ffce 	bl	8003384 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e193      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f6:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d036      	beq.n	800547c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_RCC_OscConfig+0x27c>)
 8005418:	2201      	movs	r2, #1
 800541a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fd ffb2 	bl	8003384 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005424:	f7fd ffae 	bl	8003384 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e173      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <HAL_RCC_OscConfig+0x274>)
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x234>
 8005442:	e01b      	b.n	800547c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_OscConfig+0x27c>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544a:	f7fd ff9b 	bl	8003384 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	e00e      	b.n	8005470 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005452:	f7fd ff97 	bl	8003384 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d907      	bls.n	8005470 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e15c      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
 8005464:	40023800 	.word	0x40023800
 8005468:	42470000 	.word	0x42470000
 800546c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005470:	4b8a      	ldr	r3, [pc, #552]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1ea      	bne.n	8005452 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8097 	beq.w	80055b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800548e:	4b83      	ldr	r3, [pc, #524]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	4b7f      	ldr	r3, [pc, #508]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4a7e      	ldr	r2, [pc, #504]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80054a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a8:	6413      	str	r3, [r2, #64]	; 0x40
 80054aa:	4b7c      	ldr	r3, [pc, #496]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	60bb      	str	r3, [r7, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ba:	4b79      	ldr	r3, [pc, #484]	; (80056a0 <HAL_RCC_OscConfig+0x4b0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d118      	bne.n	80054f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x4b0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a75      	ldr	r2, [pc, #468]	; (80056a0 <HAL_RCC_OscConfig+0x4b0>)
 80054cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d2:	f7fd ff57 	bl	8003384 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054da:	f7fd ff53 	bl	8003384 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e118      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ec:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_RCC_OscConfig+0x4b0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d106      	bne.n	800550e <HAL_RCC_OscConfig+0x31e>
 8005500:	4b66      	ldr	r3, [pc, #408]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6713      	str	r3, [r2, #112]	; 0x70
 800550c:	e01c      	b.n	8005548 <HAL_RCC_OscConfig+0x358>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b05      	cmp	r3, #5
 8005514:	d10c      	bne.n	8005530 <HAL_RCC_OscConfig+0x340>
 8005516:	4b61      	ldr	r3, [pc, #388]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a60      	ldr	r2, [pc, #384]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
 8005522:	4b5e      	ldr	r3, [pc, #376]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	4a5d      	ldr	r2, [pc, #372]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6713      	str	r3, [r2, #112]	; 0x70
 800552e:	e00b      	b.n	8005548 <HAL_RCC_OscConfig+0x358>
 8005530:	4b5a      	ldr	r3, [pc, #360]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	4a59      	ldr	r2, [pc, #356]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
 800553c:	4b57      	ldr	r3, [pc, #348]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	4a56      	ldr	r2, [pc, #344]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005542:	f023 0304 	bic.w	r3, r3, #4
 8005546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fd ff18 	bl	8003384 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005556:	e00a      	b.n	800556e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fd ff14 	bl	8003384 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e0d7      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	4b4b      	ldr	r3, [pc, #300]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ee      	beq.n	8005558 <HAL_RCC_OscConfig+0x368>
 800557a:	e014      	b.n	80055a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fd ff02 	bl	8003384 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005582:	e00a      	b.n	800559a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005584:	f7fd fefe 	bl	8003384 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0c1      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559a:	4b40      	ldr	r3, [pc, #256]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1ee      	bne.n	8005584 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ac:	4b3b      	ldr	r3, [pc, #236]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	4a3a      	ldr	r2, [pc, #232]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80055b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80ad 	beq.w	800571c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055c2:	4b36      	ldr	r3, [pc, #216]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d060      	beq.n	8005690 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d145      	bne.n	8005662 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <HAL_RCC_OscConfig+0x4b4>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fd fed2 	bl	8003384 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fd fece 	bl	8003384 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e093      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f6:	4b29      	ldr	r3, [pc, #164]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	019b      	lsls	r3, r3, #6
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	3b01      	subs	r3, #1
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	071b      	lsls	r3, r3, #28
 800562e:	491b      	ldr	r1, [pc, #108]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005634:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <HAL_RCC_OscConfig+0x4b4>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fd fea3 	bl	8003384 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd fe9f 	bl	8003384 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e064      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x452>
 8005660:	e05c      	b.n	800571c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <HAL_RCC_OscConfig+0x4b4>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fd fe8c 	bl	8003384 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd fe88 	bl	8003384 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e04d      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <HAL_RCC_OscConfig+0x4ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x480>
 800568e:	e045      	b.n	800571c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e040      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
 800569c:	40023800 	.word	0x40023800
 80056a0:	40007000 	.word	0x40007000
 80056a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056a8:	4b1f      	ldr	r3, [pc, #124]	; (8005728 <HAL_RCC_OscConfig+0x538>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d030      	beq.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d129      	bne.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d122      	bne.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056d8:	4013      	ands	r3, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d119      	bne.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	3b01      	subs	r3, #1
 80056f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d10f      	bne.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d107      	bne.n	8005718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d001      	beq.n	800571c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40023800 	.word	0x40023800

0800572c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e07b      	b.n	8005836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574e:	d009      	beq.n	8005764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
 8005756:	e005      	b.n	8005764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fd f9fa 	bl	8002b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	ea42 0103 	orr.w	r1, r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	0c1b      	lsrs	r3, r3, #16
 8005802:	f003 0104 	and.w	r1, r3, #4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0210 	and.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b088      	sub	sp, #32
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_SPI_Transmit+0x22>
 800585c:	2302      	movs	r3, #2
 800585e:	e126      	b.n	8005aae <HAL_SPI_Transmit+0x270>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005868:	f7fd fd8c 	bl	8003384 <HAL_GetTick>
 800586c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d002      	beq.n	8005884 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800587e:	2302      	movs	r3, #2
 8005880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005882:	e10b      	b.n	8005a9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_SPI_Transmit+0x52>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005894:	e102      	b.n	8005a9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2203      	movs	r2, #3
 800589a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058dc:	d10f      	bne.n	80058fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d007      	beq.n	800591c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005924:	d14b      	bne.n	80059be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_SPI_Transmit+0xf6>
 800592e:	8afb      	ldrh	r3, [r7, #22]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d13e      	bne.n	80059b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005958:	e02b      	b.n	80059b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d112      	bne.n	800598e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	881a      	ldrh	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	86da      	strh	r2, [r3, #54]	; 0x36
 800598c:	e011      	b.n	80059b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800598e:	f7fd fcf9 	bl	8003384 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d803      	bhi.n	80059a6 <HAL_SPI_Transmit+0x168>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a4:	d102      	bne.n	80059ac <HAL_SPI_Transmit+0x16e>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059b0:	e074      	b.n	8005a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ce      	bne.n	800595a <HAL_SPI_Transmit+0x11c>
 80059bc:	e04c      	b.n	8005a58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_SPI_Transmit+0x18e>
 80059c6:	8afb      	ldrh	r3, [r7, #22]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d140      	bne.n	8005a4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059f2:	e02c      	b.n	8005a4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d113      	bne.n	8005a2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	7812      	ldrb	r2, [r2, #0]
 8005a0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a28:	e011      	b.n	8005a4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2a:	f7fd fcab 	bl	8003384 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_Transmit+0x204>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_Transmit+0x20a>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a4c:	e026      	b.n	8005a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1cd      	bne.n	80059f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f8b3 	bl	8005bc8 <SPI_EndRxTxTransaction>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e000      	b.n	8005a9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ac8:	f7fd fc5c 	bl	8003384 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ad8:	f7fd fc54 	bl	8003384 <HAL_GetTick>
 8005adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	015b      	lsls	r3, r3, #5
 8005ae4:	0d1b      	lsrs	r3, r3, #20
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	e054      	b.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d050      	beq.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af8:	f7fd fc44 	bl	8003384 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d902      	bls.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d13d      	bne.n	8005b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b26:	d111      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b30:	d004      	beq.n	8005b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3a:	d107      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b54:	d10f      	bne.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e017      	b.n	8005bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d19b      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000000 	.word	0x20000000

08005bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <SPI_EndRxTxTransaction+0x7c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <SPI_EndRxTxTransaction+0x80>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	0d5b      	lsrs	r3, r3, #21
 8005be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d112      	bne.n	8005c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff5a 	bl	8005ab8 <SPI_WaitFlagStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e00f      	b.n	8005c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d0f2      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x52>
 8005c34:	e000      	b.n	8005c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c36:	bf00      	nop
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000000 	.word	0x20000000
 8005c48:	165e9f81 	.word	0x165e9f81

08005c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e041      	b.n	8005ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fd f93a 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f000 f9c8 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d001      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e04e      	b.n	8005da2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a22      	ldr	r2, [pc, #136]	; (8005dac <HAL_TIM_Base_Start_IT+0xc0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d01d      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x80>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d111      	bne.n	8005d90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d010      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	e007      	b.n	8005da0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40010400 	.word	0x40010400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40001800 	.word	0x40001800

08005dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0202 	mvn.w	r2, #2
 8005df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8ed 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f8e0 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8ef 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0204 	mvn.w	r2, #4
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8c3 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8b6 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8c5 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0208 	mvn.w	r2, #8
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f899 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f88c 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f89b 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f86f 	bl	8005fea <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f862 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f871 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0201 	mvn.w	r2, #1
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fc f9fc 	bl	8002344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f975 	bl	8006262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d10e      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d107      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f835 	bl	800600e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d10e      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d107      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0220 	mvn.w	r2, #32
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f940 	bl	8006250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a3f      	ldr	r2, [pc, #252]	; (8006130 <TIM_Base_SetConfig+0x110>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d00f      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a3c      	ldr	r2, [pc, #240]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a3b      	ldr	r2, [pc, #236]	; (8006138 <TIM_Base_SetConfig+0x118>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a3a      	ldr	r2, [pc, #232]	; (800613c <TIM_Base_SetConfig+0x11c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a39      	ldr	r2, [pc, #228]	; (8006140 <TIM_Base_SetConfig+0x120>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2e      	ldr	r2, [pc, #184]	; (8006130 <TIM_Base_SetConfig+0x110>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d027      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2b      	ldr	r2, [pc, #172]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d023      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <TIM_Base_SetConfig+0x118>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a29      	ldr	r2, [pc, #164]	; (800613c <TIM_Base_SetConfig+0x11c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a28      	ldr	r2, [pc, #160]	; (8006140 <TIM_Base_SetConfig+0x120>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a27      	ldr	r2, [pc, #156]	; (8006144 <TIM_Base_SetConfig+0x124>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a26      	ldr	r2, [pc, #152]	; (8006148 <TIM_Base_SetConfig+0x128>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <TIM_Base_SetConfig+0x12c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a24      	ldr	r2, [pc, #144]	; (8006150 <TIM_Base_SetConfig+0x130>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a23      	ldr	r2, [pc, #140]	; (8006154 <TIM_Base_SetConfig+0x134>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a22      	ldr	r2, [pc, #136]	; (8006158 <TIM_Base_SetConfig+0x138>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d108      	bne.n	80060e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a09      	ldr	r2, [pc, #36]	; (8006130 <TIM_Base_SetConfig+0x110>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_Base_SetConfig+0xf8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <TIM_Base_SetConfig+0x120>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40010000 	.word	0x40010000
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40010400 	.word	0x40010400
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800
 8006150:	40001800 	.word	0x40001800
 8006154:	40001c00 	.word	0x40001c00
 8006158:	40002000 	.word	0x40002000

0800615c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006170:	2302      	movs	r3, #2
 8006172:	e05a      	b.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a20      	ldr	r2, [pc, #128]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01d      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a19      	ldr	r2, [pc, #100]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d10c      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4313      	orrs	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	40010000 	.word	0x40010000
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40010400 	.word	0x40010400
 8006248:	40014000 	.word	0x40014000
 800624c:	40001800 	.word	0x40001800

08006250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e03f      	b.n	8006306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fc fecc 	bl	8003038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fdd1 	bl	8006e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b08a      	sub	sp, #40	; 0x28
 8006312:	af02      	add	r7, sp, #8
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b20      	cmp	r3, #32
 800632c:	d17c      	bne.n	8006428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_UART_Transmit+0x2c>
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e075      	b.n	800642a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x3e>
 8006348:	2302      	movs	r3, #2
 800634a:	e06e      	b.n	800642a <HAL_UART_Transmit+0x11c>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2221      	movs	r2, #33	; 0x21
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006362:	f7fd f80f 	bl	8003384 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	88fa      	ldrh	r2, [r7, #6]
 8006372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637c:	d108      	bne.n	8006390 <HAL_UART_Transmit+0x82>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	e003      	b.n	8006398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063a0:	e02a      	b.n	80063f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	; 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fb13 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e036      	b.n	800642a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	3302      	adds	r3, #2
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e007      	b.n	80063ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1cf      	bne.n	80063a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2140      	movs	r1, #64	; 0x40
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fae3 	bl	80069d8 <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e006      	b.n	800642a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	4613      	mov	r3, r2
 800643e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	d11d      	bne.n	8006488 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Receive_IT+0x26>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e016      	b.n	800648a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_UART_Receive_IT+0x38>
 8006466:	2302      	movs	r3, #2
 8006468:	e00f      	b.n	800648a <HAL_UART_Receive_IT+0x58>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	461a      	mov	r2, r3
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fb18 	bl	8006ab4 <UART_Start_Receive_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	e000      	b.n	800648a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b0ba      	sub	sp, #232	; 0xe8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_UART_IRQHandler+0x66>
 80064e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fbf8 	bl	8006ce8 <UART_Receive_IT>
      return;
 80064f8:	e256      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80de 	beq.w	80066c0 <HAL_UART_IRQHandler+0x22c>
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80d1 	beq.w	80066c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_UART_IRQHandler+0xae>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_UART_IRQHandler+0xd2>
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f043 0202 	orr.w	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_UART_IRQHandler+0xf6>
 8006572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <HAL_UART_IRQHandler+0x126>
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0208 	orr.w	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 81ed 	beq.w	800699e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_UART_IRQHandler+0x14e>
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb83 	bl	8006ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_UART_IRQHandler+0x17a>
 8006606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d04f      	beq.n	80066ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa8d 	bl	8006b2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d141      	bne.n	80066a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800663c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3314      	adds	r3, #20
 800664a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800664e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800665a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1d9      	bne.n	8006622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	d013      	beq.n	800669e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4a7d      	ldr	r2, [pc, #500]	; (8006870 <HAL_UART_IRQHandler+0x3dc>)
 800667c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fd78 	bl	8004178 <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00e      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fb f9dc 	bl	8001a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e00a      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb f9d8 	bl	8001a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e006      	b.n	80066bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fb f9d4 	bl	8001a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066ba:	e170      	b.n	800699e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	bf00      	nop
    return;
 80066be:	e16e      	b.n	800699e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f040 814a 	bne.w	800695e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8143 	beq.w	800695e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 813c 	beq.w	800695e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	f040 80b4 	bne.w	8006874 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8140 	beq.w	80069a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800672a:	429a      	cmp	r2, r3
 800672c:	f080 8139 	bcs.w	80069a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006736:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006742:	f000 8088 	beq.w	8006856 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800675c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800677e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800678a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d9      	bne.n	8006746 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3314      	adds	r3, #20
 80067b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e1      	bne.n	8006792 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e3      	bne.n	80067ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006826:	f023 0310 	bic.w	r3, r3, #16
 800682a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006838:	65ba      	str	r2, [r7, #88]	; 0x58
 800683a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800683e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e3      	bne.n	8006814 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	4618      	mov	r0, r3
 8006852:	f7fd fc21 	bl	8004098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800685e:	b29b      	uxth	r3, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	b29b      	uxth	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f8ab 	bl	80069c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800686c:	e099      	b.n	80069a2 <HAL_UART_IRQHandler+0x50e>
 800686e:	bf00      	nop
 8006870:	08006bf3 	.word	0x08006bf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800687c:	b29b      	uxth	r3, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 808b 	beq.w	80069a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8086 	beq.w	80069a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068be:	647a      	str	r2, [r7, #68]	; 0x44
 80068c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e3      	bne.n	800689a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	623b      	str	r3, [r7, #32]
   return(result);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068f6:	633a      	str	r2, [r7, #48]	; 0x30
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e3      	bne.n	80068d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60fb      	str	r3, [r7, #12]
   return(result);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800693c:	61fa      	str	r2, [r7, #28]
 800693e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	617b      	str	r3, [r7, #20]
   return(result);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e3      	bne.n	8006918 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f833 	bl	80069c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800695c:	e023      	b.n	80069a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <HAL_UART_IRQHandler+0x4ea>
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f94f 	bl	8006c1a <UART_Transmit_IT>
    return;
 800697c:	e014      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00e      	beq.n	80069a8 <HAL_UART_IRQHandler+0x514>
 800698a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f98e 	bl	8006cb8 <UART_EndTransmit_IT>
    return;
 800699c:	e004      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
    return;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
      return;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HAL_UART_IRQHandler+0x514>
      return;
 80069a6:	bf00      	nop
  }
}
 80069a8:	37e8      	adds	r7, #232	; 0xe8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr

080069c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b090      	sub	sp, #64	; 0x40
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e8:	e050      	b.n	8006a8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d04c      	beq.n	8006a8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f8:	f7fc fcc4 	bl	8003384 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d241      	bcs.n	8006a8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a28:	637a      	str	r2, [r7, #52]	; 0x34
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3314      	adds	r3, #20
 8006a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f023 0301 	bic.w	r3, r3, #1
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3314      	adds	r3, #20
 8006a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a5c:	623a      	str	r2, [r7, #32]
 8006a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	6a3a      	ldr	r2, [r7, #32]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e5      	bne.n	8006a3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e00f      	b.n	8006aac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4013      	ands	r3, r2
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d09f      	beq.n	80069ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3740      	adds	r7, #64	; 0x40
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2222      	movs	r2, #34	; 0x22
 8006ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0201 	orr.w	r2, r2, #1
 8006b10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0220 	orr.w	r2, r2, #32
 8006b20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b095      	sub	sp, #84	; 0x54
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b56:	643a      	str	r2, [r7, #64]	; 0x40
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3314      	adds	r3, #20
 8006b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d119      	bne.n	8006bda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f023 0310 	bic.w	r3, r3, #16
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc6:	61ba      	str	r2, [r7, #24]
 8006bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6979      	ldr	r1, [r7, #20]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006be8:	bf00      	nop
 8006bea:	3754      	adds	r7, #84	; 0x54
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7fa ff25 	bl	8001a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b21      	cmp	r3, #33	; 0x21
 8006c2c:	d13e      	bne.n	8006cac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c36:	d114      	bne.n	8006c62 <UART_Transmit_IT+0x48>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d110      	bne.n	8006c62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	1c9a      	adds	r2, r3, #2
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	621a      	str	r2, [r3, #32]
 8006c60:	e008      	b.n	8006c74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6211      	str	r1, [r2, #32]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	4619      	mov	r1, r3
 8006c82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10f      	bne.n	8006ca8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fe69 	bl	80069b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b22      	cmp	r3, #34	; 0x22
 8006cfa:	f040 80ab 	bne.w	8006e54 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d06:	d117      	bne.n	8006d38 <UART_Receive_IT+0x50>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d113      	bne.n	8006d38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	629a      	str	r2, [r3, #40]	; 0x28
 8006d36:	e026      	b.n	8006d86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d007      	beq.n	8006d5c <UART_Receive_IT+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <UART_Receive_IT+0x82>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	e008      	b.n	8006d7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4619      	mov	r1, r3
 8006d94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d15a      	bne.n	8006e50 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0220 	bic.w	r2, r2, #32
 8006da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695a      	ldr	r2, [r3, #20]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d135      	bne.n	8006e46 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	613b      	str	r3, [r7, #16]
   return(result);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	623a      	str	r2, [r7, #32]
 8006e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e5      	bne.n	8006de0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d10a      	bne.n	8006e38 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fdbf 	bl	80069c2 <HAL_UARTEx_RxEventCallback>
 8006e44:	e002      	b.n	8006e4c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fa fe6a 	bl	8001b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e002      	b.n	8006e56 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e000      	b.n	8006e56 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e54:	2302      	movs	r3, #2
  }
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3730      	adds	r7, #48	; 0x30
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e64:	b0c0      	sub	sp, #256	; 0x100
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	68d9      	ldr	r1, [r3, #12]
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	ea40 0301 	orr.w	r3, r0, r1
 8006e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006eb8:	f021 010c 	bic.w	r1, r1, #12
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eda:	6999      	ldr	r1, [r3, #24]
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	ea40 0301 	orr.w	r3, r0, r1
 8006ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b91      	ldr	r3, [pc, #580]	; (8007134 <UART_SetConfig+0x2d4>)
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d005      	beq.n	8006f00 <UART_SetConfig+0xa0>
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b8f      	ldr	r3, [pc, #572]	; (8007138 <UART_SetConfig+0x2d8>)
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d104      	bne.n	8006f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fd ffb2 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8006f04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f08:	e003      	b.n	8006f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7fd ff99 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8006f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1c:	f040 8110 	bne.w	8007140 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	1891      	adds	r1, r2, r2
 8006f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f3a:	415b      	adcs	r3, r3
 8006f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	4604      	mov	r4, r0
 8006f48:	eb12 0804 	adds.w	r8, r2, r4
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	eb43 0904 	adc.w	r9, r3, r4
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f66:	4690      	mov	r8, r2
 8006f68:	4699      	mov	r9, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	eb18 0303 	adds.w	r3, r8, r3
 8006f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f74:	460b      	mov	r3, r1
 8006f76:	eb49 0303 	adc.w	r3, r9, r3
 8006f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f92:	460b      	mov	r3, r1
 8006f94:	18db      	adds	r3, r3, r3
 8006f96:	653b      	str	r3, [r7, #80]	; 0x50
 8006f98:	4613      	mov	r3, r2
 8006f9a:	eb42 0303 	adc.w	r3, r2, r3
 8006f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fa8:	f7fa f848 	bl	800103c <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4b62      	ldr	r3, [pc, #392]	; (800713c <UART_SetConfig+0x2dc>)
 8006fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	011c      	lsls	r4, r3, #4
 8006fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	1891      	adds	r1, r2, r2
 8006fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fd4:	415b      	adcs	r3, r3
 8006fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fdc:	4645      	mov	r5, r8
 8006fde:	eb12 0a05 	adds.w	sl, r2, r5
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	eb43 0b05 	adc.w	fp, r3, r5
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007000:	4692      	mov	sl, r2
 8007002:	469b      	mov	fp, r3
 8007004:	4603      	mov	r3, r0
 8007006:	eb1a 0303 	adds.w	r3, sl, r3
 800700a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800700e:	460b      	mov	r3, r1
 8007010:	eb4b 0303 	adc.w	r3, fp, r3
 8007014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007024:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800702c:	460b      	mov	r3, r1
 800702e:	18db      	adds	r3, r3, r3
 8007030:	643b      	str	r3, [r7, #64]	; 0x40
 8007032:	4613      	mov	r3, r2
 8007034:	eb42 0303 	adc.w	r3, r2, r3
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
 800703a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800703e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007042:	f7f9 fffb 	bl	800103c <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4611      	mov	r1, r2
 800704c:	4b3b      	ldr	r3, [pc, #236]	; (800713c <UART_SetConfig+0x2dc>)
 800704e:	fba3 2301 	umull	r2, r3, r3, r1
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	2264      	movs	r2, #100	; 0x64
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	1acb      	subs	r3, r1, r3
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007062:	4b36      	ldr	r3, [pc, #216]	; (800713c <UART_SetConfig+0x2dc>)
 8007064:	fba3 2302 	umull	r2, r3, r3, r2
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007070:	441c      	add	r4, r3
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800707c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	63b9      	str	r1, [r7, #56]	; 0x38
 800708c:	415b      	adcs	r3, r3
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007094:	4641      	mov	r1, r8
 8007096:	1851      	adds	r1, r2, r1
 8007098:	6339      	str	r1, [r7, #48]	; 0x30
 800709a:	4649      	mov	r1, r9
 800709c:	414b      	adcs	r3, r1
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070ac:	4659      	mov	r1, fp
 80070ae:	00cb      	lsls	r3, r1, #3
 80070b0:	4655      	mov	r5, sl
 80070b2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80070b6:	4651      	mov	r1, sl
 80070b8:	00ca      	lsls	r2, r1, #3
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	4642      	mov	r2, r8
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070c8:	464b      	mov	r3, r9
 80070ca:	460a      	mov	r2, r1
 80070cc:	eb42 0303 	adc.w	r3, r2, r3
 80070d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070e8:	460b      	mov	r3, r1
 80070ea:	18db      	adds	r3, r3, r3
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ee:	4613      	mov	r3, r2
 80070f0:	eb42 0303 	adc.w	r3, r2, r3
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070fe:	f7f9 ff9d 	bl	800103c <__aeabi_uldivmod>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4b0d      	ldr	r3, [pc, #52]	; (800713c <UART_SetConfig+0x2dc>)
 8007108:	fba3 1302 	umull	r1, r3, r3, r2
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2164      	movs	r1, #100	; 0x64
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	3332      	adds	r3, #50	; 0x32
 800711a:	4a08      	ldr	r2, [pc, #32]	; (800713c <UART_SetConfig+0x2dc>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 0207 	and.w	r2, r3, #7
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4422      	add	r2, r4
 800712e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007130:	e109      	b.n	8007346 <UART_SetConfig+0x4e6>
 8007132:	bf00      	nop
 8007134:	40011000 	.word	0x40011000
 8007138:	40011400 	.word	0x40011400
 800713c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007144:	2200      	movs	r2, #0
 8007146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800714a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800714e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007152:	4642      	mov	r2, r8
 8007154:	464b      	mov	r3, r9
 8007156:	1891      	adds	r1, r2, r2
 8007158:	6239      	str	r1, [r7, #32]
 800715a:	415b      	adcs	r3, r3
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007162:	4641      	mov	r1, r8
 8007164:	1854      	adds	r4, r2, r1
 8007166:	46cc      	mov	ip, r9
 8007168:	eb43 050c 	adc.w	r5, r3, ip
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	00eb      	lsls	r3, r5, #3
 8007176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800717a:	00e2      	lsls	r2, r4, #3
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	4640      	mov	r0, r8
 8007182:	4649      	mov	r1, r9
 8007184:	4603      	mov	r3, r0
 8007186:	18e3      	adds	r3, r4, r3
 8007188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800718c:	460b      	mov	r3, r1
 800718e:	eb45 0303 	adc.w	r3, r5, r3
 8007192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071b2:	4629      	mov	r1, r5
 80071b4:	008b      	lsls	r3, r1, #2
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4604      	mov	r4, r0
 80071bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80071c0:	4601      	mov	r1, r0
 80071c2:	008a      	lsls	r2, r1, #2
 80071c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071c8:	f7f9 ff38 	bl	800103c <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4b60      	ldr	r3, [pc, #384]	; (8007354 <UART_SetConfig+0x4f4>)
 80071d2:	fba3 2302 	umull	r2, r3, r3, r2
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	011c      	lsls	r4, r3, #4
 80071da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071ec:	4642      	mov	r2, r8
 80071ee:	464b      	mov	r3, r9
 80071f0:	1891      	adds	r1, r2, r2
 80071f2:	61b9      	str	r1, [r7, #24]
 80071f4:	415b      	adcs	r3, r3
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071fc:	4641      	mov	r1, r8
 80071fe:	1851      	adds	r1, r2, r1
 8007200:	6139      	str	r1, [r7, #16]
 8007202:	4649      	mov	r1, r9
 8007204:	414b      	adcs	r3, r1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007214:	4659      	mov	r1, fp
 8007216:	00cb      	lsls	r3, r1, #3
 8007218:	4655      	mov	r5, sl
 800721a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800721e:	4651      	mov	r1, sl
 8007220:	00ca      	lsls	r2, r1, #3
 8007222:	4610      	mov	r0, r2
 8007224:	4619      	mov	r1, r3
 8007226:	4603      	mov	r3, r0
 8007228:	4642      	mov	r2, r8
 800722a:	189b      	adds	r3, r3, r2
 800722c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007230:	464b      	mov	r3, r9
 8007232:	460a      	mov	r2, r1
 8007234:	eb42 0303 	adc.w	r3, r2, r3
 8007238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	67bb      	str	r3, [r7, #120]	; 0x78
 8007246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007254:	4649      	mov	r1, r9
 8007256:	008b      	lsls	r3, r1, #2
 8007258:	4645      	mov	r5, r8
 800725a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800725e:	4641      	mov	r1, r8
 8007260:	008a      	lsls	r2, r1, #2
 8007262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007266:	f7f9 fee9 	bl	800103c <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <UART_SetConfig+0x4f4>)
 8007270:	fba3 1302 	umull	r1, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	2164      	movs	r1, #100	; 0x64
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	3332      	adds	r3, #50	; 0x32
 8007282:	4a34      	ldr	r2, [pc, #208]	; (8007354 <UART_SetConfig+0x4f4>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800728e:	441c      	add	r4, r3
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007294:	2200      	movs	r2, #0
 8007296:	673b      	str	r3, [r7, #112]	; 0x70
 8007298:	677a      	str	r2, [r7, #116]	; 0x74
 800729a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800729e:	4642      	mov	r2, r8
 80072a0:	464b      	mov	r3, r9
 80072a2:	1891      	adds	r1, r2, r2
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	415b      	adcs	r3, r3
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ae:	4641      	mov	r1, r8
 80072b0:	1851      	adds	r1, r2, r1
 80072b2:	6039      	str	r1, [r7, #0]
 80072b4:	4649      	mov	r1, r9
 80072b6:	414b      	adcs	r3, r1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072c6:	4659      	mov	r1, fp
 80072c8:	00cb      	lsls	r3, r1, #3
 80072ca:	4655      	mov	r5, sl
 80072cc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80072d0:	4651      	mov	r1, sl
 80072d2:	00ca      	lsls	r2, r1, #3
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	4603      	mov	r3, r0
 80072da:	4642      	mov	r2, r8
 80072dc:	189b      	adds	r3, r3, r2
 80072de:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e0:	464b      	mov	r3, r9
 80072e2:	460a      	mov	r2, r1
 80072e4:	eb42 0303 	adc.w	r3, r2, r3
 80072e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	663b      	str	r3, [r7, #96]	; 0x60
 80072f4:	667a      	str	r2, [r7, #100]	; 0x64
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007302:	4649      	mov	r1, r9
 8007304:	008b      	lsls	r3, r1, #2
 8007306:	4645      	mov	r5, r8
 8007308:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800730c:	4641      	mov	r1, r8
 800730e:	008a      	lsls	r2, r1, #2
 8007310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007314:	f7f9 fe92 	bl	800103c <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <UART_SetConfig+0x4f4>)
 800731e:	fba3 1302 	umull	r1, r3, r3, r2
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2164      	movs	r1, #100	; 0x64
 8007326:	fb01 f303 	mul.w	r3, r1, r3
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	3332      	adds	r3, #50	; 0x32
 8007330:	4a08      	ldr	r2, [pc, #32]	; (8007354 <UART_SetConfig+0x4f4>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	f003 020f 	and.w	r2, r3, #15
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4422      	add	r2, r4
 8007344:	609a      	str	r2, [r3, #8]
}
 8007346:	bf00      	nop
 8007348:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800734c:	46bd      	mov	sp, r7
 800734e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007352:	bf00      	nop
 8007354:	51eb851f 	.word	0x51eb851f

08007358 <__errno>:
 8007358:	4b01      	ldr	r3, [pc, #4]	; (8007360 <__errno+0x8>)
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	2000000c 	.word	0x2000000c

08007364 <__libc_init_array>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	4d0d      	ldr	r5, [pc, #52]	; (800739c <__libc_init_array+0x38>)
 8007368:	4c0d      	ldr	r4, [pc, #52]	; (80073a0 <__libc_init_array+0x3c>)
 800736a:	1b64      	subs	r4, r4, r5
 800736c:	10a4      	asrs	r4, r4, #2
 800736e:	2600      	movs	r6, #0
 8007370:	42a6      	cmp	r6, r4
 8007372:	d109      	bne.n	8007388 <__libc_init_array+0x24>
 8007374:	4d0b      	ldr	r5, [pc, #44]	; (80073a4 <__libc_init_array+0x40>)
 8007376:	4c0c      	ldr	r4, [pc, #48]	; (80073a8 <__libc_init_array+0x44>)
 8007378:	f004 fb38 	bl	800b9ec <_init>
 800737c:	1b64      	subs	r4, r4, r5
 800737e:	10a4      	asrs	r4, r4, #2
 8007380:	2600      	movs	r6, #0
 8007382:	42a6      	cmp	r6, r4
 8007384:	d105      	bne.n	8007392 <__libc_init_array+0x2e>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	f855 3b04 	ldr.w	r3, [r5], #4
 800738c:	4798      	blx	r3
 800738e:	3601      	adds	r6, #1
 8007390:	e7ee      	b.n	8007370 <__libc_init_array+0xc>
 8007392:	f855 3b04 	ldr.w	r3, [r5], #4
 8007396:	4798      	blx	r3
 8007398:	3601      	adds	r6, #1
 800739a:	e7f2      	b.n	8007382 <__libc_init_array+0x1e>
 800739c:	0800c034 	.word	0x0800c034
 80073a0:	0800c034 	.word	0x0800c034
 80073a4:	0800c034 	.word	0x0800c034
 80073a8:	0800c038 	.word	0x0800c038

080073ac <memcpy>:
 80073ac:	440a      	add	r2, r1
 80073ae:	4291      	cmp	r1, r2
 80073b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073b4:	d100      	bne.n	80073b8 <memcpy+0xc>
 80073b6:	4770      	bx	lr
 80073b8:	b510      	push	{r4, lr}
 80073ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c2:	4291      	cmp	r1, r2
 80073c4:	d1f9      	bne.n	80073ba <memcpy+0xe>
 80073c6:	bd10      	pop	{r4, pc}

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <__cvt>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	b088      	sub	sp, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	461f      	mov	r7, r3
 80073e2:	4614      	mov	r4, r2
 80073e4:	bfb8      	it	lt
 80073e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80073ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80073ee:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80073f2:	bfb6      	itet	lt
 80073f4:	461f      	movlt	r7, r3
 80073f6:	2300      	movge	r3, #0
 80073f8:	232d      	movlt	r3, #45	; 0x2d
 80073fa:	7013      	strb	r3, [r2, #0]
 80073fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073fe:	f023 0820 	bic.w	r8, r3, #32
 8007402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007406:	d005      	beq.n	8007414 <__cvt+0x3c>
 8007408:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800740c:	d100      	bne.n	8007410 <__cvt+0x38>
 800740e:	3501      	adds	r5, #1
 8007410:	2302      	movs	r3, #2
 8007412:	e000      	b.n	8007416 <__cvt+0x3e>
 8007414:	2303      	movs	r3, #3
 8007416:	aa07      	add	r2, sp, #28
 8007418:	9204      	str	r2, [sp, #16]
 800741a:	aa06      	add	r2, sp, #24
 800741c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007420:	e9cd 3500 	strd	r3, r5, [sp]
 8007424:	4622      	mov	r2, r4
 8007426:	463b      	mov	r3, r7
 8007428:	f001 fd3a 	bl	8008ea0 <_dtoa_r>
 800742c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007430:	4606      	mov	r6, r0
 8007432:	d102      	bne.n	800743a <__cvt+0x62>
 8007434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d522      	bpl.n	8007480 <__cvt+0xa8>
 800743a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800743e:	eb06 0905 	add.w	r9, r6, r5
 8007442:	d110      	bne.n	8007466 <__cvt+0x8e>
 8007444:	7833      	ldrb	r3, [r6, #0]
 8007446:	2b30      	cmp	r3, #48	; 0x30
 8007448:	d10a      	bne.n	8007460 <__cvt+0x88>
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4620      	mov	r0, r4
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 fb59 	bl	8000b08 <__aeabi_dcmpeq>
 8007456:	b918      	cbnz	r0, 8007460 <__cvt+0x88>
 8007458:	f1c5 0501 	rsb	r5, r5, #1
 800745c:	f8ca 5000 	str.w	r5, [sl]
 8007460:	f8da 3000 	ldr.w	r3, [sl]
 8007464:	4499      	add	r9, r3
 8007466:	2200      	movs	r2, #0
 8007468:	2300      	movs	r3, #0
 800746a:	4620      	mov	r0, r4
 800746c:	4639      	mov	r1, r7
 800746e:	f7f9 fb4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007472:	b108      	cbz	r0, 8007478 <__cvt+0xa0>
 8007474:	f8cd 901c 	str.w	r9, [sp, #28]
 8007478:	2230      	movs	r2, #48	; 0x30
 800747a:	9b07      	ldr	r3, [sp, #28]
 800747c:	454b      	cmp	r3, r9
 800747e:	d307      	bcc.n	8007490 <__cvt+0xb8>
 8007480:	9b07      	ldr	r3, [sp, #28]
 8007482:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007484:	1b9b      	subs	r3, r3, r6
 8007486:	4630      	mov	r0, r6
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	b008      	add	sp, #32
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	9107      	str	r1, [sp, #28]
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e7f0      	b.n	800747a <__cvt+0xa2>

08007498 <__exponent>:
 8007498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749a:	4603      	mov	r3, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	bfb8      	it	lt
 80074a0:	4249      	neglt	r1, r1
 80074a2:	f803 2b02 	strb.w	r2, [r3], #2
 80074a6:	bfb4      	ite	lt
 80074a8:	222d      	movlt	r2, #45	; 0x2d
 80074aa:	222b      	movge	r2, #43	; 0x2b
 80074ac:	2909      	cmp	r1, #9
 80074ae:	7042      	strb	r2, [r0, #1]
 80074b0:	dd2a      	ble.n	8007508 <__exponent+0x70>
 80074b2:	f10d 0407 	add.w	r4, sp, #7
 80074b6:	46a4      	mov	ip, r4
 80074b8:	270a      	movs	r7, #10
 80074ba:	46a6      	mov	lr, r4
 80074bc:	460a      	mov	r2, r1
 80074be:	fb91 f6f7 	sdiv	r6, r1, r7
 80074c2:	fb07 1516 	mls	r5, r7, r6, r1
 80074c6:	3530      	adds	r5, #48	; 0x30
 80074c8:	2a63      	cmp	r2, #99	; 0x63
 80074ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80074ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074d2:	4631      	mov	r1, r6
 80074d4:	dcf1      	bgt.n	80074ba <__exponent+0x22>
 80074d6:	3130      	adds	r1, #48	; 0x30
 80074d8:	f1ae 0502 	sub.w	r5, lr, #2
 80074dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074e0:	1c44      	adds	r4, r0, #1
 80074e2:	4629      	mov	r1, r5
 80074e4:	4561      	cmp	r1, ip
 80074e6:	d30a      	bcc.n	80074fe <__exponent+0x66>
 80074e8:	f10d 0209 	add.w	r2, sp, #9
 80074ec:	eba2 020e 	sub.w	r2, r2, lr
 80074f0:	4565      	cmp	r5, ip
 80074f2:	bf88      	it	hi
 80074f4:	2200      	movhi	r2, #0
 80074f6:	4413      	add	r3, r2
 80074f8:	1a18      	subs	r0, r3, r0
 80074fa:	b003      	add	sp, #12
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007502:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007506:	e7ed      	b.n	80074e4 <__exponent+0x4c>
 8007508:	2330      	movs	r3, #48	; 0x30
 800750a:	3130      	adds	r1, #48	; 0x30
 800750c:	7083      	strb	r3, [r0, #2]
 800750e:	70c1      	strb	r1, [r0, #3]
 8007510:	1d03      	adds	r3, r0, #4
 8007512:	e7f1      	b.n	80074f8 <__exponent+0x60>

08007514 <_printf_float>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	b091      	sub	sp, #68	; 0x44
 800751a:	460c      	mov	r4, r1
 800751c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007520:	4616      	mov	r6, r2
 8007522:	461f      	mov	r7, r3
 8007524:	4605      	mov	r5, r0
 8007526:	f002 ffc1 	bl	800a4ac <_localeconv_r>
 800752a:	6803      	ldr	r3, [r0, #0]
 800752c:	9309      	str	r3, [sp, #36]	; 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f7f8 fe6e 	bl	8000210 <strlen>
 8007534:	2300      	movs	r3, #0
 8007536:	930e      	str	r3, [sp, #56]	; 0x38
 8007538:	f8d8 3000 	ldr.w	r3, [r8]
 800753c:	900a      	str	r0, [sp, #40]	; 0x28
 800753e:	3307      	adds	r3, #7
 8007540:	f023 0307 	bic.w	r3, r3, #7
 8007544:	f103 0208 	add.w	r2, r3, #8
 8007548:	f894 9018 	ldrb.w	r9, [r4, #24]
 800754c:	f8d4 b000 	ldr.w	fp, [r4]
 8007550:	f8c8 2000 	str.w	r2, [r8]
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800755c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007560:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007564:	930b      	str	r3, [sp, #44]	; 0x2c
 8007566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007568:	4b9c      	ldr	r3, [pc, #624]	; (80077dc <_printf_float+0x2c8>)
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	4640      	mov	r0, r8
 8007570:	f7f9 fafc 	bl	8000b6c <__aeabi_dcmpun>
 8007574:	bb70      	cbnz	r0, 80075d4 <_printf_float+0xc0>
 8007576:	4b99      	ldr	r3, [pc, #612]	; (80077dc <_printf_float+0x2c8>)
 8007578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	4640      	mov	r0, r8
 8007580:	f7f9 fad6 	bl	8000b30 <__aeabi_dcmple>
 8007584:	bb30      	cbnz	r0, 80075d4 <_printf_float+0xc0>
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	4640      	mov	r0, r8
 800758c:	4651      	mov	r1, sl
 800758e:	f7f9 fac5 	bl	8000b1c <__aeabi_dcmplt>
 8007592:	b110      	cbz	r0, 800759a <_printf_float+0x86>
 8007594:	232d      	movs	r3, #45	; 0x2d
 8007596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759a:	4b91      	ldr	r3, [pc, #580]	; (80077e0 <_printf_float+0x2cc>)
 800759c:	4891      	ldr	r0, [pc, #580]	; (80077e4 <_printf_float+0x2d0>)
 800759e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075a2:	bf94      	ite	ls
 80075a4:	4698      	movls	r8, r3
 80075a6:	4680      	movhi	r8, r0
 80075a8:	2303      	movs	r3, #3
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	f02b 0304 	bic.w	r3, fp, #4
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	f04f 0a00 	mov.w	sl, #0
 80075b6:	9700      	str	r7, [sp, #0]
 80075b8:	4633      	mov	r3, r6
 80075ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f9d2 	bl	8007968 <_printf_common>
 80075c4:	3001      	adds	r0, #1
 80075c6:	f040 808f 	bne.w	80076e8 <_printf_float+0x1d4>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	b011      	add	sp, #68	; 0x44
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	4642      	mov	r2, r8
 80075d6:	4653      	mov	r3, sl
 80075d8:	4640      	mov	r0, r8
 80075da:	4651      	mov	r1, sl
 80075dc:	f7f9 fac6 	bl	8000b6c <__aeabi_dcmpun>
 80075e0:	b140      	cbz	r0, 80075f4 <_printf_float+0xe0>
 80075e2:	f1ba 0f00 	cmp.w	sl, #0
 80075e6:	bfbc      	itt	lt
 80075e8:	232d      	movlt	r3, #45	; 0x2d
 80075ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075ee:	487e      	ldr	r0, [pc, #504]	; (80077e8 <_printf_float+0x2d4>)
 80075f0:	4b7e      	ldr	r3, [pc, #504]	; (80077ec <_printf_float+0x2d8>)
 80075f2:	e7d4      	b.n	800759e <_printf_float+0x8a>
 80075f4:	6863      	ldr	r3, [r4, #4]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80075fc:	d142      	bne.n	8007684 <_printf_float+0x170>
 80075fe:	2306      	movs	r3, #6
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	9206      	str	r2, [sp, #24]
 8007606:	aa0e      	add	r2, sp, #56	; 0x38
 8007608:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800760c:	aa0d      	add	r2, sp, #52	; 0x34
 800760e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007612:	9203      	str	r2, [sp, #12]
 8007614:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007618:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4642      	mov	r2, r8
 8007624:	4653      	mov	r3, sl
 8007626:	4628      	mov	r0, r5
 8007628:	910b      	str	r1, [sp, #44]	; 0x2c
 800762a:	f7ff fed5 	bl	80073d8 <__cvt>
 800762e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007630:	2947      	cmp	r1, #71	; 0x47
 8007632:	4680      	mov	r8, r0
 8007634:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007636:	d108      	bne.n	800764a <_printf_float+0x136>
 8007638:	1cc8      	adds	r0, r1, #3
 800763a:	db02      	blt.n	8007642 <_printf_float+0x12e>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	4299      	cmp	r1, r3
 8007640:	dd40      	ble.n	80076c4 <_printf_float+0x1b0>
 8007642:	f1a9 0902 	sub.w	r9, r9, #2
 8007646:	fa5f f989 	uxtb.w	r9, r9
 800764a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800764e:	d81f      	bhi.n	8007690 <_printf_float+0x17c>
 8007650:	3901      	subs	r1, #1
 8007652:	464a      	mov	r2, r9
 8007654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007658:	910d      	str	r1, [sp, #52]	; 0x34
 800765a:	f7ff ff1d 	bl	8007498 <__exponent>
 800765e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007660:	1813      	adds	r3, r2, r0
 8007662:	2a01      	cmp	r2, #1
 8007664:	4682      	mov	sl, r0
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	dc02      	bgt.n	8007670 <_printf_float+0x15c>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	07d2      	lsls	r2, r2, #31
 800766e:	d501      	bpl.n	8007674 <_printf_float+0x160>
 8007670:	3301      	adds	r3, #1
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007678:	2b00      	cmp	r3, #0
 800767a:	d09c      	beq.n	80075b6 <_printf_float+0xa2>
 800767c:	232d      	movs	r3, #45	; 0x2d
 800767e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007682:	e798      	b.n	80075b6 <_printf_float+0xa2>
 8007684:	2947      	cmp	r1, #71	; 0x47
 8007686:	d1bc      	bne.n	8007602 <_printf_float+0xee>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ba      	bne.n	8007602 <_printf_float+0xee>
 800768c:	2301      	movs	r3, #1
 800768e:	e7b7      	b.n	8007600 <_printf_float+0xec>
 8007690:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007694:	d118      	bne.n	80076c8 <_printf_float+0x1b4>
 8007696:	2900      	cmp	r1, #0
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	dd0b      	ble.n	80076b4 <_printf_float+0x1a0>
 800769c:	6121      	str	r1, [r4, #16]
 800769e:	b913      	cbnz	r3, 80076a6 <_printf_float+0x192>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	07d0      	lsls	r0, r2, #31
 80076a4:	d502      	bpl.n	80076ac <_printf_float+0x198>
 80076a6:	3301      	adds	r3, #1
 80076a8:	440b      	add	r3, r1
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	65a1      	str	r1, [r4, #88]	; 0x58
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	e7df      	b.n	8007674 <_printf_float+0x160>
 80076b4:	b913      	cbnz	r3, 80076bc <_printf_float+0x1a8>
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	07d2      	lsls	r2, r2, #31
 80076ba:	d501      	bpl.n	80076c0 <_printf_float+0x1ac>
 80076bc:	3302      	adds	r3, #2
 80076be:	e7f4      	b.n	80076aa <_printf_float+0x196>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7f2      	b.n	80076aa <_printf_float+0x196>
 80076c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80076c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ca:	4299      	cmp	r1, r3
 80076cc:	db05      	blt.n	80076da <_printf_float+0x1c6>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	6121      	str	r1, [r4, #16]
 80076d2:	07d8      	lsls	r0, r3, #31
 80076d4:	d5ea      	bpl.n	80076ac <_printf_float+0x198>
 80076d6:	1c4b      	adds	r3, r1, #1
 80076d8:	e7e7      	b.n	80076aa <_printf_float+0x196>
 80076da:	2900      	cmp	r1, #0
 80076dc:	bfd4      	ite	le
 80076de:	f1c1 0202 	rsble	r2, r1, #2
 80076e2:	2201      	movgt	r2, #1
 80076e4:	4413      	add	r3, r2
 80076e6:	e7e0      	b.n	80076aa <_printf_float+0x196>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	055a      	lsls	r2, r3, #21
 80076ec:	d407      	bmi.n	80076fe <_printf_float+0x1ea>
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	4642      	mov	r2, r8
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	d12b      	bne.n	8007754 <_printf_float+0x240>
 80076fc:	e765      	b.n	80075ca <_printf_float+0xb6>
 80076fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007702:	f240 80dc 	bls.w	80078be <_printf_float+0x3aa>
 8007706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	f7f9 f9fb 	bl	8000b08 <__aeabi_dcmpeq>
 8007712:	2800      	cmp	r0, #0
 8007714:	d033      	beq.n	800777e <_printf_float+0x26a>
 8007716:	4a36      	ldr	r2, [pc, #216]	; (80077f0 <_printf_float+0x2dc>)
 8007718:	2301      	movs	r3, #1
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f af52 	beq.w	80075ca <_printf_float+0xb6>
 8007726:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800772a:	429a      	cmp	r2, r3
 800772c:	db02      	blt.n	8007734 <_printf_float+0x220>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	07d8      	lsls	r0, r3, #31
 8007732:	d50f      	bpl.n	8007754 <_printf_float+0x240>
 8007734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f af43 	beq.w	80075ca <_printf_float+0xb6>
 8007744:	f04f 0800 	mov.w	r8, #0
 8007748:	f104 091a 	add.w	r9, r4, #26
 800774c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800774e:	3b01      	subs	r3, #1
 8007750:	4543      	cmp	r3, r8
 8007752:	dc09      	bgt.n	8007768 <_printf_float+0x254>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	f100 8101 	bmi.w	800795e <_printf_float+0x44a>
 800775c:	68e0      	ldr	r0, [r4, #12]
 800775e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007760:	4298      	cmp	r0, r3
 8007762:	bfb8      	it	lt
 8007764:	4618      	movlt	r0, r3
 8007766:	e732      	b.n	80075ce <_printf_float+0xba>
 8007768:	2301      	movs	r3, #1
 800776a:	464a      	mov	r2, r9
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	f43f af29 	beq.w	80075ca <_printf_float+0xb6>
 8007778:	f108 0801 	add.w	r8, r8, #1
 800777c:	e7e6      	b.n	800774c <_printf_float+0x238>
 800777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	dc37      	bgt.n	80077f4 <_printf_float+0x2e0>
 8007784:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <_printf_float+0x2dc>)
 8007786:	2301      	movs	r3, #1
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f af1b 	beq.w	80075ca <_printf_float+0xb6>
 8007794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007798:	4313      	orrs	r3, r2
 800779a:	d102      	bne.n	80077a2 <_printf_float+0x28e>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d5d8      	bpl.n	8007754 <_printf_float+0x240>
 80077a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f af0c 	beq.w	80075ca <_printf_float+0xb6>
 80077b2:	f04f 0900 	mov.w	r9, #0
 80077b6:	f104 0a1a 	add.w	sl, r4, #26
 80077ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077bc:	425b      	negs	r3, r3
 80077be:	454b      	cmp	r3, r9
 80077c0:	dc01      	bgt.n	80077c6 <_printf_float+0x2b2>
 80077c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c4:	e794      	b.n	80076f0 <_printf_float+0x1dc>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f aefa 	beq.w	80075ca <_printf_float+0xb6>
 80077d6:	f109 0901 	add.w	r9, r9, #1
 80077da:	e7ee      	b.n	80077ba <_printf_float+0x2a6>
 80077dc:	7fefffff 	.word	0x7fefffff
 80077e0:	0800bb8c 	.word	0x0800bb8c
 80077e4:	0800bb90 	.word	0x0800bb90
 80077e8:	0800bb98 	.word	0x0800bb98
 80077ec:	0800bb94 	.word	0x0800bb94
 80077f0:	0800bb9c 	.word	0x0800bb9c
 80077f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077f8:	429a      	cmp	r2, r3
 80077fa:	bfa8      	it	ge
 80077fc:	461a      	movge	r2, r3
 80077fe:	2a00      	cmp	r2, #0
 8007800:	4691      	mov	r9, r2
 8007802:	dc37      	bgt.n	8007874 <_printf_float+0x360>
 8007804:	f04f 0b00 	mov.w	fp, #0
 8007808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780c:	f104 021a 	add.w	r2, r4, #26
 8007810:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007814:	ebaa 0309 	sub.w	r3, sl, r9
 8007818:	455b      	cmp	r3, fp
 800781a:	dc33      	bgt.n	8007884 <_printf_float+0x370>
 800781c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007820:	429a      	cmp	r2, r3
 8007822:	db3b      	blt.n	800789c <_printf_float+0x388>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	07da      	lsls	r2, r3, #31
 8007828:	d438      	bmi.n	800789c <_printf_float+0x388>
 800782a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800782c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800782e:	eba3 020a 	sub.w	r2, r3, sl
 8007832:	eba3 0901 	sub.w	r9, r3, r1
 8007836:	4591      	cmp	r9, r2
 8007838:	bfa8      	it	ge
 800783a:	4691      	movge	r9, r2
 800783c:	f1b9 0f00 	cmp.w	r9, #0
 8007840:	dc34      	bgt.n	80078ac <_printf_float+0x398>
 8007842:	f04f 0800 	mov.w	r8, #0
 8007846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800784a:	f104 0a1a 	add.w	sl, r4, #26
 800784e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	eba3 0309 	sub.w	r3, r3, r9
 8007858:	4543      	cmp	r3, r8
 800785a:	f77f af7b 	ble.w	8007754 <_printf_float+0x240>
 800785e:	2301      	movs	r3, #1
 8007860:	4652      	mov	r2, sl
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f aeae 	beq.w	80075ca <_printf_float+0xb6>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	e7ec      	b.n	800784e <_printf_float+0x33a>
 8007874:	4613      	mov	r3, r2
 8007876:	4631      	mov	r1, r6
 8007878:	4642      	mov	r2, r8
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	d1c0      	bne.n	8007804 <_printf_float+0x2f0>
 8007882:	e6a2      	b.n	80075ca <_printf_float+0xb6>
 8007884:	2301      	movs	r3, #1
 8007886:	4631      	mov	r1, r6
 8007888:	4628      	mov	r0, r5
 800788a:	920b      	str	r2, [sp, #44]	; 0x2c
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f ae9b 	beq.w	80075ca <_printf_float+0xb6>
 8007894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007896:	f10b 0b01 	add.w	fp, fp, #1
 800789a:	e7b9      	b.n	8007810 <_printf_float+0x2fc>
 800789c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	d1bf      	bne.n	800782a <_printf_float+0x316>
 80078aa:	e68e      	b.n	80075ca <_printf_float+0xb6>
 80078ac:	464b      	mov	r3, r9
 80078ae:	eb08 020a 	add.w	r2, r8, sl
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1c2      	bne.n	8007842 <_printf_float+0x32e>
 80078bc:	e685      	b.n	80075ca <_printf_float+0xb6>
 80078be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	dc01      	bgt.n	80078c8 <_printf_float+0x3b4>
 80078c4:	07db      	lsls	r3, r3, #31
 80078c6:	d537      	bpl.n	8007938 <_printf_float+0x424>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4642      	mov	r2, r8
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f ae79 	beq.w	80075ca <_printf_float+0xb6>
 80078d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f ae71 	beq.w	80075ca <_printf_float+0xb6>
 80078e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078ec:	2200      	movs	r2, #0
 80078ee:	2300      	movs	r3, #0
 80078f0:	f7f9 f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80078f4:	b9d8      	cbnz	r0, 800792e <_printf_float+0x41a>
 80078f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f8:	f108 0201 	add.w	r2, r8, #1
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d10e      	bne.n	8007926 <_printf_float+0x412>
 8007908:	e65f      	b.n	80075ca <_printf_float+0xb6>
 800790a:	2301      	movs	r3, #1
 800790c:	464a      	mov	r2, r9
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f ae58 	beq.w	80075ca <_printf_float+0xb6>
 800791a:	f108 0801 	add.w	r8, r8, #1
 800791e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007920:	3b01      	subs	r3, #1
 8007922:	4543      	cmp	r3, r8
 8007924:	dcf1      	bgt.n	800790a <_printf_float+0x3f6>
 8007926:	4653      	mov	r3, sl
 8007928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800792c:	e6e1      	b.n	80076f2 <_printf_float+0x1de>
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	f104 091a 	add.w	r9, r4, #26
 8007936:	e7f2      	b.n	800791e <_printf_float+0x40a>
 8007938:	2301      	movs	r3, #1
 800793a:	4642      	mov	r2, r8
 800793c:	e7df      	b.n	80078fe <_printf_float+0x3ea>
 800793e:	2301      	movs	r3, #1
 8007940:	464a      	mov	r2, r9
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	f43f ae3e 	beq.w	80075ca <_printf_float+0xb6>
 800794e:	f108 0801 	add.w	r8, r8, #1
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007956:	1a5b      	subs	r3, r3, r1
 8007958:	4543      	cmp	r3, r8
 800795a:	dcf0      	bgt.n	800793e <_printf_float+0x42a>
 800795c:	e6fe      	b.n	800775c <_printf_float+0x248>
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	f104 0919 	add.w	r9, r4, #25
 8007966:	e7f4      	b.n	8007952 <_printf_float+0x43e>

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4616      	mov	r6, r2
 800796e:	4699      	mov	r9, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007978:	4293      	cmp	r3, r2
 800797a:	bfb8      	it	lt
 800797c:	4613      	movlt	r3, r2
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007984:	4607      	mov	r7, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b10a      	cbz	r2, 800798e <_printf_common+0x26>
 800798a:	3301      	adds	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	0699      	lsls	r1, r3, #26
 8007992:	bf42      	ittt	mi
 8007994:	6833      	ldrmi	r3, [r6, #0]
 8007996:	3302      	addmi	r3, #2
 8007998:	6033      	strmi	r3, [r6, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d106      	bne.n	80079b0 <_printf_common+0x48>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	6832      	ldr	r2, [r6, #0]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc26      	bgt.n	80079fe <_printf_common+0x96>
 80079b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b4:	1e13      	subs	r3, r2, #0
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d42b      	bmi.n	8007a18 <_printf_common+0xb0>
 80079c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d01e      	beq.n	8007a0c <_printf_common+0xa4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	68e5      	ldr	r5, [r4, #12]
 80079d2:	6832      	ldr	r2, [r6, #0]
 80079d4:	f003 0306 	and.w	r3, r3, #6
 80079d8:	2b04      	cmp	r3, #4
 80079da:	bf08      	it	eq
 80079dc:	1aad      	subeq	r5, r5, r2
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	bf0c      	ite	eq
 80079e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e8:	2500      	movne	r5, #0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfc4      	itt	gt
 80079ee:	1a9b      	subgt	r3, r3, r2
 80079f0:	18ed      	addgt	r5, r5, r3
 80079f2:	2600      	movs	r6, #0
 80079f4:	341a      	adds	r4, #26
 80079f6:	42b5      	cmp	r5, r6
 80079f8:	d11a      	bne.n	8007a30 <_printf_common+0xc8>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e008      	b.n	8007a10 <_printf_common+0xa8>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4649      	mov	r1, r9
 8007a04:	4638      	mov	r0, r7
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d103      	bne.n	8007a14 <_printf_common+0xac>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	3501      	adds	r5, #1
 8007a16:	e7c6      	b.n	80079a6 <_printf_common+0x3e>
 8007a18:	18e1      	adds	r1, r4, r3
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	2030      	movs	r0, #48	; 0x30
 8007a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a22:	4422      	add	r2, r4
 8007a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	e7c7      	b.n	80079c0 <_printf_common+0x58>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4622      	mov	r2, r4
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d0e6      	beq.n	8007a0c <_printf_common+0xa4>
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7d9      	b.n	80079f6 <_printf_common+0x8e>
	...

08007a44 <_printf_i>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	7e0f      	ldrb	r7, [r1, #24]
 8007a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a4c:	2f78      	cmp	r7, #120	; 0x78
 8007a4e:	4691      	mov	r9, r2
 8007a50:	4680      	mov	r8, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	469a      	mov	sl, r3
 8007a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a5a:	d807      	bhi.n	8007a6c <_printf_i+0x28>
 8007a5c:	2f62      	cmp	r7, #98	; 0x62
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x32>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f000 80d8 	beq.w	8007c16 <_printf_i+0x1d2>
 8007a66:	2f58      	cmp	r7, #88	; 0x58
 8007a68:	f000 80a3 	beq.w	8007bb2 <_printf_i+0x16e>
 8007a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a74:	e03a      	b.n	8007aec <_printf_i+0xa8>
 8007a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a7a:	2b15      	cmp	r3, #21
 8007a7c:	d8f6      	bhi.n	8007a6c <_printf_i+0x28>
 8007a7e:	a101      	add	r1, pc, #4	; (adr r1, 8007a84 <_printf_i+0x40>)
 8007a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007a6d 	.word	0x08007a6d
 8007a90:	08007a6d 	.word	0x08007a6d
 8007a94:	08007a6d 	.word	0x08007a6d
 8007a98:	08007a6d 	.word	0x08007a6d
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007a6d 	.word	0x08007a6d
 8007aa4:	08007a6d 	.word	0x08007a6d
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007bfd 	.word	0x08007bfd
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007bdf 	.word	0x08007bdf
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007c1f 	.word	0x08007c1f
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007be7 	.word	0x08007be7
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	602a      	str	r2, [r5, #0]
 8007ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0a3      	b.n	8007c38 <_printf_i+0x1f4>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	6829      	ldr	r1, [r5, #0]
 8007af4:	0606      	lsls	r6, r0, #24
 8007af6:	f101 0304 	add.w	r3, r1, #4
 8007afa:	d50a      	bpl.n	8007b12 <_printf_i+0xce>
 8007afc:	680e      	ldr	r6, [r1, #0]
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	2e00      	cmp	r6, #0
 8007b02:	da03      	bge.n	8007b0c <_printf_i+0xc8>
 8007b04:	232d      	movs	r3, #45	; 0x2d
 8007b06:	4276      	negs	r6, r6
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0c:	485e      	ldr	r0, [pc, #376]	; (8007c88 <_printf_i+0x244>)
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e019      	b.n	8007b46 <_printf_i+0x102>
 8007b12:	680e      	ldr	r6, [r1, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b1a:	bf18      	it	ne
 8007b1c:	b236      	sxthne	r6, r6
 8007b1e:	e7ef      	b.n	8007b00 <_printf_i+0xbc>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	6029      	str	r1, [r5, #0]
 8007b28:	0601      	lsls	r1, r0, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0xec>
 8007b2c:	681e      	ldr	r6, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0xf2>
 8007b30:	0646      	lsls	r6, r0, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0xe8>
 8007b34:	881e      	ldrh	r6, [r3, #0]
 8007b36:	4854      	ldr	r0, [pc, #336]	; (8007c88 <_printf_i+0x244>)
 8007b38:	2f6f      	cmp	r7, #111	; 0x6f
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2308      	moveq	r3, #8
 8007b3e:	230a      	movne	r3, #10
 8007b40:	2100      	movs	r1, #0
 8007b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b46:	6865      	ldr	r5, [r4, #4]
 8007b48:	60a5      	str	r5, [r4, #8]
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	bfa2      	ittt	ge
 8007b4e:	6821      	ldrge	r1, [r4, #0]
 8007b50:	f021 0104 	bicge.w	r1, r1, #4
 8007b54:	6021      	strge	r1, [r4, #0]
 8007b56:	b90e      	cbnz	r6, 8007b5c <_printf_i+0x118>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	d04d      	beq.n	8007bf8 <_printf_i+0x1b4>
 8007b5c:	4615      	mov	r5, r2
 8007b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b62:	fb03 6711 	mls	r7, r3, r1, r6
 8007b66:	5dc7      	ldrb	r7, [r0, r7]
 8007b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b6c:	4637      	mov	r7, r6
 8007b6e:	42bb      	cmp	r3, r7
 8007b70:	460e      	mov	r6, r1
 8007b72:	d9f4      	bls.n	8007b5e <_printf_i+0x11a>
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d10b      	bne.n	8007b90 <_printf_i+0x14c>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07de      	lsls	r6, r3, #31
 8007b7c:	d508      	bpl.n	8007b90 <_printf_i+0x14c>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4299      	cmp	r1, r3
 8007b84:	bfde      	ittt	le
 8007b86:	2330      	movle	r3, #48	; 0x30
 8007b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b90:	1b52      	subs	r2, r2, r5
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	f8cd a000 	str.w	sl, [sp]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	aa03      	add	r2, sp, #12
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7ff fee2 	bl	8007968 <_printf_common>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d14c      	bne.n	8007c42 <_printf_i+0x1fe>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b004      	add	sp, #16
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	4835      	ldr	r0, [pc, #212]	; (8007c88 <_printf_i+0x244>)
 8007bb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bb8:	6829      	ldr	r1, [r5, #0]
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bc0:	6029      	str	r1, [r5, #0]
 8007bc2:	061d      	lsls	r5, r3, #24
 8007bc4:	d514      	bpl.n	8007bf0 <_printf_i+0x1ac>
 8007bc6:	07df      	lsls	r7, r3, #31
 8007bc8:	bf44      	itt	mi
 8007bca:	f043 0320 	orrmi.w	r3, r3, #32
 8007bce:	6023      	strmi	r3, [r4, #0]
 8007bd0:	b91e      	cbnz	r6, 8007bda <_printf_i+0x196>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7b0      	b.n	8007b40 <_printf_i+0xfc>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	2378      	movs	r3, #120	; 0x78
 8007be8:	4828      	ldr	r0, [pc, #160]	; (8007c8c <_printf_i+0x248>)
 8007bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bee:	e7e3      	b.n	8007bb8 <_printf_i+0x174>
 8007bf0:	0659      	lsls	r1, r3, #25
 8007bf2:	bf48      	it	mi
 8007bf4:	b2b6      	uxthmi	r6, r6
 8007bf6:	e7e6      	b.n	8007bc6 <_printf_i+0x182>
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	e7bb      	b.n	8007b74 <_printf_i+0x130>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	6826      	ldr	r6, [r4, #0]
 8007c00:	6961      	ldr	r1, [r4, #20]
 8007c02:	1d18      	adds	r0, r3, #4
 8007c04:	6028      	str	r0, [r5, #0]
 8007c06:	0635      	lsls	r5, r6, #24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0x1cc>
 8007c0c:	6019      	str	r1, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0x1d2>
 8007c10:	0670      	lsls	r0, r6, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0x1c8>
 8007c14:	8019      	strh	r1, [r3, #0]
 8007c16:	2300      	movs	r3, #0
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	4615      	mov	r5, r2
 8007c1c:	e7ba      	b.n	8007b94 <_printf_i+0x150>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	602a      	str	r2, [r5, #0]
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f7f8 faf8 	bl	8000220 <memchr>
 8007c30:	b108      	cbz	r0, 8007c36 <_printf_i+0x1f2>
 8007c32:	1b40      	subs	r0, r0, r5
 8007c34:	6060      	str	r0, [r4, #4]
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c40:	e7a8      	b.n	8007b94 <_printf_i+0x150>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d0ab      	beq.n	8007ba8 <_printf_i+0x164>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	d413      	bmi.n	8007c7e <_printf_i+0x23a>
 8007c56:	68e0      	ldr	r0, [r4, #12]
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	bfb8      	it	lt
 8007c5e:	4618      	movlt	r0, r3
 8007c60:	e7a4      	b.n	8007bac <_printf_i+0x168>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d09b      	beq.n	8007ba8 <_printf_i+0x164>
 8007c70:	3501      	adds	r5, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	9903      	ldr	r1, [sp, #12]
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dcf2      	bgt.n	8007c62 <_printf_i+0x21e>
 8007c7c:	e7eb      	b.n	8007c56 <_printf_i+0x212>
 8007c7e:	2500      	movs	r5, #0
 8007c80:	f104 0619 	add.w	r6, r4, #25
 8007c84:	e7f5      	b.n	8007c72 <_printf_i+0x22e>
 8007c86:	bf00      	nop
 8007c88:	0800bb9e 	.word	0x0800bb9e
 8007c8c:	0800bbaf 	.word	0x0800bbaf

08007c90 <iprintf>:
 8007c90:	b40f      	push	{r0, r1, r2, r3}
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <iprintf+0x2c>)
 8007c94:	b513      	push	{r0, r1, r4, lr}
 8007c96:	681c      	ldr	r4, [r3, #0]
 8007c98:	b124      	cbz	r4, 8007ca4 <iprintf+0x14>
 8007c9a:	69a3      	ldr	r3, [r4, #24]
 8007c9c:	b913      	cbnz	r3, 8007ca4 <iprintf+0x14>
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f002 f802 	bl	8009ca8 <__sinit>
 8007ca4:	ab05      	add	r3, sp, #20
 8007ca6:	9a04      	ldr	r2, [sp, #16]
 8007ca8:	68a1      	ldr	r1, [r4, #8]
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	4620      	mov	r0, r4
 8007cae:	f003 fbad 	bl	800b40c <_vfiprintf_r>
 8007cb2:	b002      	add	sp, #8
 8007cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb8:	b004      	add	sp, #16
 8007cba:	4770      	bx	lr
 8007cbc:	2000000c 	.word	0x2000000c

08007cc0 <_puts_r>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	b118      	cbz	r0, 8007cd0 <_puts_r+0x10>
 8007cc8:	6983      	ldr	r3, [r0, #24]
 8007cca:	b90b      	cbnz	r3, 8007cd0 <_puts_r+0x10>
 8007ccc:	f001 ffec 	bl	8009ca8 <__sinit>
 8007cd0:	69ab      	ldr	r3, [r5, #24]
 8007cd2:	68ac      	ldr	r4, [r5, #8]
 8007cd4:	b913      	cbnz	r3, 8007cdc <_puts_r+0x1c>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f001 ffe6 	bl	8009ca8 <__sinit>
 8007cdc:	4b2c      	ldr	r3, [pc, #176]	; (8007d90 <_puts_r+0xd0>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d120      	bne.n	8007d24 <_puts_r+0x64>
 8007ce2:	686c      	ldr	r4, [r5, #4]
 8007ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce6:	07db      	lsls	r3, r3, #31
 8007ce8:	d405      	bmi.n	8007cf6 <_puts_r+0x36>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	0598      	lsls	r0, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_puts_r+0x36>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f002 fbe0 	bl	800a4b6 <__retarget_lock_acquire_recursive>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	0719      	lsls	r1, r3, #28
 8007cfa:	d51d      	bpl.n	8007d38 <_puts_r+0x78>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b1db      	cbz	r3, 8007d38 <_puts_r+0x78>
 8007d00:	3e01      	subs	r6, #1
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	bb39      	cbnz	r1, 8007d5e <_puts_r+0x9e>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	da38      	bge.n	8007d84 <_puts_r+0xc4>
 8007d12:	4622      	mov	r2, r4
 8007d14:	210a      	movs	r1, #10
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 ff7a 	bl	8008c10 <__swbuf_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d011      	beq.n	8007d44 <_puts_r+0x84>
 8007d20:	250a      	movs	r5, #10
 8007d22:	e011      	b.n	8007d48 <_puts_r+0x88>
 8007d24:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <_puts_r+0xd4>)
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d101      	bne.n	8007d2e <_puts_r+0x6e>
 8007d2a:	68ac      	ldr	r4, [r5, #8]
 8007d2c:	e7da      	b.n	8007ce4 <_puts_r+0x24>
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <_puts_r+0xd8>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	bf08      	it	eq
 8007d34:	68ec      	ldreq	r4, [r5, #12]
 8007d36:	e7d5      	b.n	8007ce4 <_puts_r+0x24>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 ffba 	bl	8008cb4 <__swsetup_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d0dd      	beq.n	8007d00 <_puts_r+0x40>
 8007d44:	f04f 35ff 	mov.w	r5, #4294967295
 8007d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d4a:	07da      	lsls	r2, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_puts_r+0x9a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_puts_r+0x9a>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f002 fbaf 	bl	800a4b8 <__retarget_lock_release_recursive>
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da04      	bge.n	8007d6c <_puts_r+0xac>
 8007d62:	69a2      	ldr	r2, [r4, #24]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	dc06      	bgt.n	8007d76 <_puts_r+0xb6>
 8007d68:	290a      	cmp	r1, #10
 8007d6a:	d004      	beq.n	8007d76 <_puts_r+0xb6>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	6022      	str	r2, [r4, #0]
 8007d72:	7019      	strb	r1, [r3, #0]
 8007d74:	e7c5      	b.n	8007d02 <_puts_r+0x42>
 8007d76:	4622      	mov	r2, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 ff49 	bl	8008c10 <__swbuf_r>
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d1bf      	bne.n	8007d02 <_puts_r+0x42>
 8007d82:	e7df      	b.n	8007d44 <_puts_r+0x84>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	250a      	movs	r5, #10
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	6022      	str	r2, [r4, #0]
 8007d8c:	701d      	strb	r5, [r3, #0]
 8007d8e:	e7db      	b.n	8007d48 <_puts_r+0x88>
 8007d90:	0800bdc4 	.word	0x0800bdc4
 8007d94:	0800bde4 	.word	0x0800bde4
 8007d98:	0800bda4 	.word	0x0800bda4

08007d9c <puts>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <puts+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f7ff bf8d 	b.w	8007cc0 <_puts_r>
 8007da6:	bf00      	nop
 8007da8:	2000000c 	.word	0x2000000c

08007dac <siprintf>:
 8007dac:	b40e      	push	{r1, r2, r3}
 8007dae:	b500      	push	{lr}
 8007db0:	b09c      	sub	sp, #112	; 0x70
 8007db2:	ab1d      	add	r3, sp, #116	; 0x74
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	9006      	str	r0, [sp, #24]
 8007db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dbc:	4809      	ldr	r0, [pc, #36]	; (8007de4 <siprintf+0x38>)
 8007dbe:	9107      	str	r1, [sp, #28]
 8007dc0:	9104      	str	r1, [sp, #16]
 8007dc2:	4909      	ldr	r1, [pc, #36]	; (8007de8 <siprintf+0x3c>)
 8007dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	a902      	add	r1, sp, #8
 8007dd0:	f003 f9f4 	bl	800b1bc <_svfiprintf_r>
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	b01c      	add	sp, #112	; 0x70
 8007ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de0:	b003      	add	sp, #12
 8007de2:	4770      	bx	lr
 8007de4:	2000000c 	.word	0x2000000c
 8007de8:	ffff0208 	.word	0xffff0208

08007dec <strpbrk>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4603      	mov	r3, r0
 8007df0:	7800      	ldrb	r0, [r0, #0]
 8007df2:	b190      	cbz	r0, 8007e1a <strpbrk+0x2e>
 8007df4:	460c      	mov	r4, r1
 8007df6:	4618      	mov	r0, r3
 8007df8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007dfc:	b14d      	cbz	r5, 8007e12 <strpbrk+0x26>
 8007dfe:	460a      	mov	r2, r1
 8007e00:	e001      	b.n	8007e06 <strpbrk+0x1a>
 8007e02:	42ae      	cmp	r6, r5
 8007e04:	d009      	beq.n	8007e1a <strpbrk+0x2e>
 8007e06:	4614      	mov	r4, r2
 8007e08:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	d1f8      	bne.n	8007e02 <strpbrk+0x16>
 8007e10:	e7f1      	b.n	8007df6 <strpbrk+0xa>
 8007e12:	7823      	ldrb	r3, [r4, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf08      	it	eq
 8007e18:	2000      	moveq	r0, #0
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}

08007e1c <strstr>:
 8007e1c:	780a      	ldrb	r2, [r1, #0]
 8007e1e:	b570      	push	{r4, r5, r6, lr}
 8007e20:	b96a      	cbnz	r2, 8007e3e <strstr+0x22>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d109      	bne.n	8007e3c <strstr+0x20>
 8007e28:	460c      	mov	r4, r1
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f6      	beq.n	8007e22 <strstr+0x6>
 8007e34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e38:	429e      	cmp	r6, r3
 8007e3a:	d0f7      	beq.n	8007e2c <strstr+0x10>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	7803      	ldrb	r3, [r0, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1ef      	bne.n	8007e24 <strstr+0x8>
 8007e44:	4618      	mov	r0, r3
 8007e46:	e7ec      	b.n	8007e22 <strstr+0x6>

08007e48 <sulp>:
 8007e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	4690      	mov	r8, r2
 8007e50:	f002 ff1e 	bl	800ac90 <__ulp>
 8007e54:	4604      	mov	r4, r0
 8007e56:	460d      	mov	r5, r1
 8007e58:	f1b8 0f00 	cmp.w	r8, #0
 8007e5c:	d011      	beq.n	8007e82 <sulp+0x3a>
 8007e5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd0b      	ble.n	8007e82 <sulp+0x3a>
 8007e6a:	051b      	lsls	r3, r3, #20
 8007e6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e70:	2400      	movs	r4, #0
 8007e72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e76:	4622      	mov	r2, r4
 8007e78:	462b      	mov	r3, r5
 8007e7a:	f7f8 fbdd 	bl	8000638 <__aeabi_dmul>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460d      	mov	r5, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8a:	0000      	movs	r0, r0
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <_strtod_l>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b09f      	sub	sp, #124	; 0x7c
 8007e96:	469b      	mov	fp, r3
 8007e98:	2300      	movs	r3, #0
 8007e9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e9c:	4b9e      	ldr	r3, [pc, #632]	; (8008118 <_strtod_l+0x288>)
 8007e9e:	9215      	str	r2, [sp, #84]	; 0x54
 8007ea0:	681f      	ldr	r7, [r3, #0]
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	460e      	mov	r6, r1
 8007ea8:	f7f8 f9b2 	bl	8000210 <strlen>
 8007eac:	f04f 0800 	mov.w	r8, #0
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	f04f 0900 	mov.w	r9, #0
 8007eb6:	9619      	str	r6, [sp, #100]	; 0x64
 8007eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007eba:	781a      	ldrb	r2, [r3, #0]
 8007ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8007ebe:	d04c      	beq.n	8007f5a <_strtod_l+0xca>
 8007ec0:	d83a      	bhi.n	8007f38 <_strtod_l+0xa8>
 8007ec2:	2a0d      	cmp	r2, #13
 8007ec4:	d833      	bhi.n	8007f2e <_strtod_l+0x9e>
 8007ec6:	2a08      	cmp	r2, #8
 8007ec8:	d833      	bhi.n	8007f32 <_strtod_l+0xa2>
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	d03d      	beq.n	8007f4a <_strtod_l+0xba>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007ed4:	782b      	ldrb	r3, [r5, #0]
 8007ed6:	2b30      	cmp	r3, #48	; 0x30
 8007ed8:	f040 80aa 	bne.w	8008030 <_strtod_l+0x1a0>
 8007edc:	786b      	ldrb	r3, [r5, #1]
 8007ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ee2:	2b58      	cmp	r3, #88	; 0x58
 8007ee4:	d166      	bne.n	8007fb4 <_strtod_l+0x124>
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	ab1a      	add	r3, sp, #104	; 0x68
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4a8b      	ldr	r2, [pc, #556]	; (800811c <_strtod_l+0x28c>)
 8007ef0:	f8cd b008 	str.w	fp, [sp, #8]
 8007ef4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ef6:	a919      	add	r1, sp, #100	; 0x64
 8007ef8:	4650      	mov	r0, sl
 8007efa:	f001 ffd9 	bl	8009eb0 <__gethex>
 8007efe:	f010 0607 	ands.w	r6, r0, #7
 8007f02:	4604      	mov	r4, r0
 8007f04:	d005      	beq.n	8007f12 <_strtod_l+0x82>
 8007f06:	2e06      	cmp	r6, #6
 8007f08:	d129      	bne.n	8007f5e <_strtod_l+0xce>
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9519      	str	r5, [sp, #100]	; 0x64
 8007f10:	930a      	str	r3, [sp, #40]	; 0x28
 8007f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 858a 	bne.w	8008a2e <_strtod_l+0xb9e>
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1c:	b1d3      	cbz	r3, 8007f54 <_strtod_l+0xc4>
 8007f1e:	4642      	mov	r2, r8
 8007f20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f24:	4610      	mov	r0, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	b01f      	add	sp, #124	; 0x7c
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	2a20      	cmp	r2, #32
 8007f30:	d1cd      	bne.n	8007ece <_strtod_l+0x3e>
 8007f32:	3301      	adds	r3, #1
 8007f34:	9319      	str	r3, [sp, #100]	; 0x64
 8007f36:	e7bf      	b.n	8007eb8 <_strtod_l+0x28>
 8007f38:	2a2d      	cmp	r2, #45	; 0x2d
 8007f3a:	d1c8      	bne.n	8007ece <_strtod_l+0x3e>
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	9219      	str	r2, [sp, #100]	; 0x64
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1c3      	bne.n	8007ed2 <_strtod_l+0x42>
 8007f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f4c:	9619      	str	r6, [sp, #100]	; 0x64
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 856b 	bne.w	8008a2a <_strtod_l+0xb9a>
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	e7e4      	b.n	8007f24 <_strtod_l+0x94>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	e7ef      	b.n	8007f3e <_strtod_l+0xae>
 8007f5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f60:	b13a      	cbz	r2, 8007f72 <_strtod_l+0xe2>
 8007f62:	2135      	movs	r1, #53	; 0x35
 8007f64:	a81c      	add	r0, sp, #112	; 0x70
 8007f66:	f002 ff97 	bl	800ae98 <__copybits>
 8007f6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f002 fb63 	bl	800a638 <_Bfree>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	2e04      	cmp	r6, #4
 8007f76:	d806      	bhi.n	8007f86 <_strtod_l+0xf6>
 8007f78:	e8df f006 	tbb	[pc, r6]
 8007f7c:	1714030a 	.word	0x1714030a
 8007f80:	0a          	.byte	0x0a
 8007f81:	00          	.byte	0x00
 8007f82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007f86:	0721      	lsls	r1, r4, #28
 8007f88:	d5c3      	bpl.n	8007f12 <_strtod_l+0x82>
 8007f8a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007f8e:	e7c0      	b.n	8007f12 <_strtod_l+0x82>
 8007f90:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007f94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007fa2:	e7f0      	b.n	8007f86 <_strtod_l+0xf6>
 8007fa4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008120 <_strtod_l+0x290>
 8007fa8:	e7ed      	b.n	8007f86 <_strtod_l+0xf6>
 8007faa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007fae:	f04f 38ff 	mov.w	r8, #4294967295
 8007fb2:	e7e8      	b.n	8007f86 <_strtod_l+0xf6>
 8007fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	9219      	str	r2, [sp, #100]	; 0x64
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b30      	cmp	r3, #48	; 0x30
 8007fbe:	d0f9      	beq.n	8007fb4 <_strtod_l+0x124>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0a6      	beq.n	8007f12 <_strtod_l+0x82>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fca:	9308      	str	r3, [sp, #32]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007fd2:	469b      	mov	fp, r3
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007fd8:	7805      	ldrb	r5, [r0, #0]
 8007fda:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007fde:	b2d9      	uxtb	r1, r3
 8007fe0:	2909      	cmp	r1, #9
 8007fe2:	d927      	bls.n	8008034 <_strtod_l+0x1a4>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f003 fb9d 	bl	800b726 <strncmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d033      	beq.n	8008058 <_strtod_l+0x1c8>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	465c      	mov	r4, fp
 8007ff6:	9004      	str	r0, [sp, #16]
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2a65      	cmp	r2, #101	; 0x65
 8007ffc:	d001      	beq.n	8008002 <_strtod_l+0x172>
 8007ffe:	2a45      	cmp	r2, #69	; 0x45
 8008000:	d114      	bne.n	800802c <_strtod_l+0x19c>
 8008002:	b91c      	cbnz	r4, 800800c <_strtod_l+0x17c>
 8008004:	9a07      	ldr	r2, [sp, #28]
 8008006:	4302      	orrs	r2, r0
 8008008:	d09f      	beq.n	8007f4a <_strtod_l+0xba>
 800800a:	2400      	movs	r4, #0
 800800c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800800e:	1c72      	adds	r2, r6, #1
 8008010:	9219      	str	r2, [sp, #100]	; 0x64
 8008012:	7872      	ldrb	r2, [r6, #1]
 8008014:	2a2b      	cmp	r2, #43	; 0x2b
 8008016:	d079      	beq.n	800810c <_strtod_l+0x27c>
 8008018:	2a2d      	cmp	r2, #45	; 0x2d
 800801a:	f000 8083 	beq.w	8008124 <_strtod_l+0x294>
 800801e:	2700      	movs	r7, #0
 8008020:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008024:	2909      	cmp	r1, #9
 8008026:	f240 8083 	bls.w	8008130 <_strtod_l+0x2a0>
 800802a:	9619      	str	r6, [sp, #100]	; 0x64
 800802c:	2500      	movs	r5, #0
 800802e:	e09f      	b.n	8008170 <_strtod_l+0x2e0>
 8008030:	2300      	movs	r3, #0
 8008032:	e7c8      	b.n	8007fc6 <_strtod_l+0x136>
 8008034:	f1bb 0f08 	cmp.w	fp, #8
 8008038:	bfd5      	itete	le
 800803a:	9906      	ldrle	r1, [sp, #24]
 800803c:	9905      	ldrgt	r1, [sp, #20]
 800803e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008042:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008046:	f100 0001 	add.w	r0, r0, #1
 800804a:	bfd4      	ite	le
 800804c:	9306      	strle	r3, [sp, #24]
 800804e:	9305      	strgt	r3, [sp, #20]
 8008050:	f10b 0b01 	add.w	fp, fp, #1
 8008054:	9019      	str	r0, [sp, #100]	; 0x64
 8008056:	e7be      	b.n	8007fd6 <_strtod_l+0x146>
 8008058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800805a:	191a      	adds	r2, r3, r4
 800805c:	9219      	str	r2, [sp, #100]	; 0x64
 800805e:	5d1a      	ldrb	r2, [r3, r4]
 8008060:	f1bb 0f00 	cmp.w	fp, #0
 8008064:	d036      	beq.n	80080d4 <_strtod_l+0x244>
 8008066:	9004      	str	r0, [sp, #16]
 8008068:	465c      	mov	r4, fp
 800806a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800806e:	2b09      	cmp	r3, #9
 8008070:	d912      	bls.n	8008098 <_strtod_l+0x208>
 8008072:	2301      	movs	r3, #1
 8008074:	e7c1      	b.n	8007ffa <_strtod_l+0x16a>
 8008076:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	9219      	str	r2, [sp, #100]	; 0x64
 800807c:	785a      	ldrb	r2, [r3, #1]
 800807e:	3001      	adds	r0, #1
 8008080:	2a30      	cmp	r2, #48	; 0x30
 8008082:	d0f8      	beq.n	8008076 <_strtod_l+0x1e6>
 8008084:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008088:	2b08      	cmp	r3, #8
 800808a:	f200 84d5 	bhi.w	8008a38 <_strtod_l+0xba8>
 800808e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008090:	9004      	str	r0, [sp, #16]
 8008092:	2000      	movs	r0, #0
 8008094:	9308      	str	r3, [sp, #32]
 8008096:	4604      	mov	r4, r0
 8008098:	3a30      	subs	r2, #48	; 0x30
 800809a:	f100 0301 	add.w	r3, r0, #1
 800809e:	d013      	beq.n	80080c8 <_strtod_l+0x238>
 80080a0:	9904      	ldr	r1, [sp, #16]
 80080a2:	4419      	add	r1, r3
 80080a4:	9104      	str	r1, [sp, #16]
 80080a6:	4623      	mov	r3, r4
 80080a8:	1905      	adds	r5, r0, r4
 80080aa:	210a      	movs	r1, #10
 80080ac:	42ab      	cmp	r3, r5
 80080ae:	d113      	bne.n	80080d8 <_strtod_l+0x248>
 80080b0:	1823      	adds	r3, r4, r0
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	f104 0401 	add.w	r4, r4, #1
 80080b8:	4404      	add	r4, r0
 80080ba:	dc1b      	bgt.n	80080f4 <_strtod_l+0x264>
 80080bc:	9906      	ldr	r1, [sp, #24]
 80080be:	230a      	movs	r3, #10
 80080c0:	fb03 2301 	mla	r3, r3, r1, r2
 80080c4:	9306      	str	r3, [sp, #24]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080ca:	1c51      	adds	r1, r2, #1
 80080cc:	9119      	str	r1, [sp, #100]	; 0x64
 80080ce:	7852      	ldrb	r2, [r2, #1]
 80080d0:	4618      	mov	r0, r3
 80080d2:	e7ca      	b.n	800806a <_strtod_l+0x1da>
 80080d4:	4658      	mov	r0, fp
 80080d6:	e7d3      	b.n	8008080 <_strtod_l+0x1f0>
 80080d8:	2b08      	cmp	r3, #8
 80080da:	dc04      	bgt.n	80080e6 <_strtod_l+0x256>
 80080dc:	9f06      	ldr	r7, [sp, #24]
 80080de:	434f      	muls	r7, r1
 80080e0:	9706      	str	r7, [sp, #24]
 80080e2:	3301      	adds	r3, #1
 80080e4:	e7e2      	b.n	80080ac <_strtod_l+0x21c>
 80080e6:	1c5f      	adds	r7, r3, #1
 80080e8:	2f10      	cmp	r7, #16
 80080ea:	bfde      	ittt	le
 80080ec:	9f05      	ldrle	r7, [sp, #20]
 80080ee:	434f      	mulle	r7, r1
 80080f0:	9705      	strle	r7, [sp, #20]
 80080f2:	e7f6      	b.n	80080e2 <_strtod_l+0x252>
 80080f4:	2c10      	cmp	r4, #16
 80080f6:	bfdf      	itttt	le
 80080f8:	9905      	ldrle	r1, [sp, #20]
 80080fa:	230a      	movle	r3, #10
 80080fc:	fb03 2301 	mlale	r3, r3, r1, r2
 8008100:	9305      	strle	r3, [sp, #20]
 8008102:	e7e0      	b.n	80080c6 <_strtod_l+0x236>
 8008104:	2300      	movs	r3, #0
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	2301      	movs	r3, #1
 800810a:	e77b      	b.n	8008004 <_strtod_l+0x174>
 800810c:	2700      	movs	r7, #0
 800810e:	1cb2      	adds	r2, r6, #2
 8008110:	9219      	str	r2, [sp, #100]	; 0x64
 8008112:	78b2      	ldrb	r2, [r6, #2]
 8008114:	e784      	b.n	8008020 <_strtod_l+0x190>
 8008116:	bf00      	nop
 8008118:	0800be6c 	.word	0x0800be6c
 800811c:	0800bbc0 	.word	0x0800bbc0
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	2701      	movs	r7, #1
 8008126:	e7f2      	b.n	800810e <_strtod_l+0x27e>
 8008128:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800812a:	1c51      	adds	r1, r2, #1
 800812c:	9119      	str	r1, [sp, #100]	; 0x64
 800812e:	7852      	ldrb	r2, [r2, #1]
 8008130:	2a30      	cmp	r2, #48	; 0x30
 8008132:	d0f9      	beq.n	8008128 <_strtod_l+0x298>
 8008134:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008138:	2908      	cmp	r1, #8
 800813a:	f63f af77 	bhi.w	800802c <_strtod_l+0x19c>
 800813e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008142:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008144:	9209      	str	r2, [sp, #36]	; 0x24
 8008146:	f04f 0e0a 	mov.w	lr, #10
 800814a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800814c:	1c51      	adds	r1, r2, #1
 800814e:	9119      	str	r1, [sp, #100]	; 0x64
 8008150:	7852      	ldrb	r2, [r2, #1]
 8008152:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008156:	2d09      	cmp	r5, #9
 8008158:	d935      	bls.n	80081c6 <_strtod_l+0x336>
 800815a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800815c:	1b49      	subs	r1, r1, r5
 800815e:	2908      	cmp	r1, #8
 8008160:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008164:	dc02      	bgt.n	800816c <_strtod_l+0x2dc>
 8008166:	4565      	cmp	r5, ip
 8008168:	bfa8      	it	ge
 800816a:	4665      	movge	r5, ip
 800816c:	b107      	cbz	r7, 8008170 <_strtod_l+0x2e0>
 800816e:	426d      	negs	r5, r5
 8008170:	2c00      	cmp	r4, #0
 8008172:	d14c      	bne.n	800820e <_strtod_l+0x37e>
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	4301      	orrs	r1, r0
 8008178:	f47f aecb 	bne.w	8007f12 <_strtod_l+0x82>
 800817c:	2b00      	cmp	r3, #0
 800817e:	f47f aee4 	bne.w	8007f4a <_strtod_l+0xba>
 8008182:	2a69      	cmp	r2, #105	; 0x69
 8008184:	d026      	beq.n	80081d4 <_strtod_l+0x344>
 8008186:	dc23      	bgt.n	80081d0 <_strtod_l+0x340>
 8008188:	2a49      	cmp	r2, #73	; 0x49
 800818a:	d023      	beq.n	80081d4 <_strtod_l+0x344>
 800818c:	2a4e      	cmp	r2, #78	; 0x4e
 800818e:	f47f aedc 	bne.w	8007f4a <_strtod_l+0xba>
 8008192:	499d      	ldr	r1, [pc, #628]	; (8008408 <_strtod_l+0x578>)
 8008194:	a819      	add	r0, sp, #100	; 0x64
 8008196:	f002 f8d9 	bl	800a34c <__match>
 800819a:	2800      	cmp	r0, #0
 800819c:	f43f aed5 	beq.w	8007f4a <_strtod_l+0xba>
 80081a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b28      	cmp	r3, #40	; 0x28
 80081a6:	d12c      	bne.n	8008202 <_strtod_l+0x372>
 80081a8:	4998      	ldr	r1, [pc, #608]	; (800840c <_strtod_l+0x57c>)
 80081aa:	aa1c      	add	r2, sp, #112	; 0x70
 80081ac:	a819      	add	r0, sp, #100	; 0x64
 80081ae:	f002 f8e1 	bl	800a374 <__hexnan>
 80081b2:	2805      	cmp	r0, #5
 80081b4:	d125      	bne.n	8008202 <_strtod_l+0x372>
 80081b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081b8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80081bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081c4:	e6a5      	b.n	8007f12 <_strtod_l+0x82>
 80081c6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80081ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80081ce:	e7bc      	b.n	800814a <_strtod_l+0x2ba>
 80081d0:	2a6e      	cmp	r2, #110	; 0x6e
 80081d2:	e7dc      	b.n	800818e <_strtod_l+0x2fe>
 80081d4:	498e      	ldr	r1, [pc, #568]	; (8008410 <_strtod_l+0x580>)
 80081d6:	a819      	add	r0, sp, #100	; 0x64
 80081d8:	f002 f8b8 	bl	800a34c <__match>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f43f aeb4 	beq.w	8007f4a <_strtod_l+0xba>
 80081e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081e4:	498b      	ldr	r1, [pc, #556]	; (8008414 <_strtod_l+0x584>)
 80081e6:	3b01      	subs	r3, #1
 80081e8:	a819      	add	r0, sp, #100	; 0x64
 80081ea:	9319      	str	r3, [sp, #100]	; 0x64
 80081ec:	f002 f8ae 	bl	800a34c <__match>
 80081f0:	b910      	cbnz	r0, 80081f8 <_strtod_l+0x368>
 80081f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081f4:	3301      	adds	r3, #1
 80081f6:	9319      	str	r3, [sp, #100]	; 0x64
 80081f8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008418 <_strtod_l+0x588>
 80081fc:	f04f 0800 	mov.w	r8, #0
 8008200:	e687      	b.n	8007f12 <_strtod_l+0x82>
 8008202:	4886      	ldr	r0, [pc, #536]	; (800841c <_strtod_l+0x58c>)
 8008204:	f003 fa32 	bl	800b66c <nan>
 8008208:	4680      	mov	r8, r0
 800820a:	4689      	mov	r9, r1
 800820c:	e681      	b.n	8007f12 <_strtod_l+0x82>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	9806      	ldr	r0, [sp, #24]
 8008212:	1aeb      	subs	r3, r5, r3
 8008214:	f1bb 0f00 	cmp.w	fp, #0
 8008218:	bf08      	it	eq
 800821a:	46a3      	moveq	fp, r4
 800821c:	2c10      	cmp	r4, #16
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	4626      	mov	r6, r4
 8008222:	bfa8      	it	ge
 8008224:	2610      	movge	r6, #16
 8008226:	f7f8 f98d 	bl	8000544 <__aeabi_ui2d>
 800822a:	2c09      	cmp	r4, #9
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	dd13      	ble.n	800825a <_strtod_l+0x3ca>
 8008232:	4b7b      	ldr	r3, [pc, #492]	; (8008420 <_strtod_l+0x590>)
 8008234:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008238:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800823c:	f7f8 f9fc 	bl	8000638 <__aeabi_dmul>
 8008240:	4680      	mov	r8, r0
 8008242:	9805      	ldr	r0, [sp, #20]
 8008244:	4689      	mov	r9, r1
 8008246:	f7f8 f97d 	bl	8000544 <__aeabi_ui2d>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4640      	mov	r0, r8
 8008250:	4649      	mov	r1, r9
 8008252:	f7f8 f83b 	bl	80002cc <__adddf3>
 8008256:	4680      	mov	r8, r0
 8008258:	4689      	mov	r9, r1
 800825a:	2c0f      	cmp	r4, #15
 800825c:	dc36      	bgt.n	80082cc <_strtod_l+0x43c>
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f43f ae56 	beq.w	8007f12 <_strtod_l+0x82>
 8008266:	dd22      	ble.n	80082ae <_strtod_l+0x41e>
 8008268:	2b16      	cmp	r3, #22
 800826a:	dc09      	bgt.n	8008280 <_strtod_l+0x3f0>
 800826c:	496c      	ldr	r1, [pc, #432]	; (8008420 <_strtod_l+0x590>)
 800826e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	f7f8 f9dd 	bl	8000638 <__aeabi_dmul>
 800827e:	e7c3      	b.n	8008208 <_strtod_l+0x378>
 8008280:	9a07      	ldr	r2, [sp, #28]
 8008282:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008286:	4293      	cmp	r3, r2
 8008288:	db20      	blt.n	80082cc <_strtod_l+0x43c>
 800828a:	4d65      	ldr	r5, [pc, #404]	; (8008420 <_strtod_l+0x590>)
 800828c:	f1c4 040f 	rsb	r4, r4, #15
 8008290:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800829c:	f7f8 f9cc 	bl	8000638 <__aeabi_dmul>
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	1b1c      	subs	r4, r3, r4
 80082a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80082a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082ac:	e7e5      	b.n	800827a <_strtod_l+0x3ea>
 80082ae:	9b07      	ldr	r3, [sp, #28]
 80082b0:	3316      	adds	r3, #22
 80082b2:	db0b      	blt.n	80082cc <_strtod_l+0x43c>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	1b5d      	subs	r5, r3, r5
 80082b8:	4b59      	ldr	r3, [pc, #356]	; (8008420 <_strtod_l+0x590>)
 80082ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80082be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082c2:	4640      	mov	r0, r8
 80082c4:	4649      	mov	r1, r9
 80082c6:	f7f8 fae1 	bl	800088c <__aeabi_ddiv>
 80082ca:	e79d      	b.n	8008208 <_strtod_l+0x378>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	1ba6      	subs	r6, r4, r6
 80082d0:	441e      	add	r6, r3
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	dd74      	ble.n	80083c0 <_strtod_l+0x530>
 80082d6:	f016 030f 	ands.w	r3, r6, #15
 80082da:	d00a      	beq.n	80082f2 <_strtod_l+0x462>
 80082dc:	4950      	ldr	r1, [pc, #320]	; (8008420 <_strtod_l+0x590>)
 80082de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082e2:	4642      	mov	r2, r8
 80082e4:	464b      	mov	r3, r9
 80082e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ea:	f7f8 f9a5 	bl	8000638 <__aeabi_dmul>
 80082ee:	4680      	mov	r8, r0
 80082f0:	4689      	mov	r9, r1
 80082f2:	f036 060f 	bics.w	r6, r6, #15
 80082f6:	d052      	beq.n	800839e <_strtod_l+0x50e>
 80082f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80082fc:	dd27      	ble.n	800834e <_strtod_l+0x4be>
 80082fe:	f04f 0b00 	mov.w	fp, #0
 8008302:	f8cd b010 	str.w	fp, [sp, #16]
 8008306:	f8cd b020 	str.w	fp, [sp, #32]
 800830a:	f8cd b018 	str.w	fp, [sp, #24]
 800830e:	2322      	movs	r3, #34	; 0x22
 8008310:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008418 <_strtod_l+0x588>
 8008314:	f8ca 3000 	str.w	r3, [sl]
 8008318:	f04f 0800 	mov.w	r8, #0
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f43f adf7 	beq.w	8007f12 <_strtod_l+0x82>
 8008324:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008326:	4650      	mov	r0, sl
 8008328:	f002 f986 	bl	800a638 <_Bfree>
 800832c:	9906      	ldr	r1, [sp, #24]
 800832e:	4650      	mov	r0, sl
 8008330:	f002 f982 	bl	800a638 <_Bfree>
 8008334:	9904      	ldr	r1, [sp, #16]
 8008336:	4650      	mov	r0, sl
 8008338:	f002 f97e 	bl	800a638 <_Bfree>
 800833c:	9908      	ldr	r1, [sp, #32]
 800833e:	4650      	mov	r0, sl
 8008340:	f002 f97a 	bl	800a638 <_Bfree>
 8008344:	4659      	mov	r1, fp
 8008346:	4650      	mov	r0, sl
 8008348:	f002 f976 	bl	800a638 <_Bfree>
 800834c:	e5e1      	b.n	8007f12 <_strtod_l+0x82>
 800834e:	4b35      	ldr	r3, [pc, #212]	; (8008424 <_strtod_l+0x594>)
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	2300      	movs	r3, #0
 8008354:	1136      	asrs	r6, r6, #4
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	461f      	mov	r7, r3
 800835c:	2e01      	cmp	r6, #1
 800835e:	dc21      	bgt.n	80083a4 <_strtod_l+0x514>
 8008360:	b10b      	cbz	r3, 8008366 <_strtod_l+0x4d6>
 8008362:	4680      	mov	r8, r0
 8008364:	4689      	mov	r9, r1
 8008366:	4b2f      	ldr	r3, [pc, #188]	; (8008424 <_strtod_l+0x594>)
 8008368:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800836c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008370:	4642      	mov	r2, r8
 8008372:	464b      	mov	r3, r9
 8008374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008378:	f7f8 f95e 	bl	8000638 <__aeabi_dmul>
 800837c:	4b26      	ldr	r3, [pc, #152]	; (8008418 <_strtod_l+0x588>)
 800837e:	460a      	mov	r2, r1
 8008380:	400b      	ands	r3, r1
 8008382:	4929      	ldr	r1, [pc, #164]	; (8008428 <_strtod_l+0x598>)
 8008384:	428b      	cmp	r3, r1
 8008386:	4680      	mov	r8, r0
 8008388:	d8b9      	bhi.n	80082fe <_strtod_l+0x46e>
 800838a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800838e:	428b      	cmp	r3, r1
 8008390:	bf86      	itte	hi
 8008392:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800842c <_strtod_l+0x59c>
 8008396:	f04f 38ff 	movhi.w	r8, #4294967295
 800839a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800839e:	2300      	movs	r3, #0
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	e07f      	b.n	80084a4 <_strtod_l+0x614>
 80083a4:	07f2      	lsls	r2, r6, #31
 80083a6:	d505      	bpl.n	80083b4 <_strtod_l+0x524>
 80083a8:	9b05      	ldr	r3, [sp, #20]
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f943 	bl	8000638 <__aeabi_dmul>
 80083b2:	2301      	movs	r3, #1
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	3208      	adds	r2, #8
 80083b8:	3701      	adds	r7, #1
 80083ba:	1076      	asrs	r6, r6, #1
 80083bc:	9205      	str	r2, [sp, #20]
 80083be:	e7cd      	b.n	800835c <_strtod_l+0x4cc>
 80083c0:	d0ed      	beq.n	800839e <_strtod_l+0x50e>
 80083c2:	4276      	negs	r6, r6
 80083c4:	f016 020f 	ands.w	r2, r6, #15
 80083c8:	d00a      	beq.n	80083e0 <_strtod_l+0x550>
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <_strtod_l+0x590>)
 80083cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f8 fa58 	bl	800088c <__aeabi_ddiv>
 80083dc:	4680      	mov	r8, r0
 80083de:	4689      	mov	r9, r1
 80083e0:	1136      	asrs	r6, r6, #4
 80083e2:	d0dc      	beq.n	800839e <_strtod_l+0x50e>
 80083e4:	2e1f      	cmp	r6, #31
 80083e6:	dd23      	ble.n	8008430 <_strtod_l+0x5a0>
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	f8cd b010 	str.w	fp, [sp, #16]
 80083f0:	f8cd b020 	str.w	fp, [sp, #32]
 80083f4:	f8cd b018 	str.w	fp, [sp, #24]
 80083f8:	2322      	movs	r3, #34	; 0x22
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	f04f 0900 	mov.w	r9, #0
 8008402:	f8ca 3000 	str.w	r3, [sl]
 8008406:	e789      	b.n	800831c <_strtod_l+0x48c>
 8008408:	0800bb99 	.word	0x0800bb99
 800840c:	0800bbd4 	.word	0x0800bbd4
 8008410:	0800bb91 	.word	0x0800bb91
 8008414:	0800bd14 	.word	0x0800bd14
 8008418:	7ff00000 	.word	0x7ff00000
 800841c:	0800c028 	.word	0x0800c028
 8008420:	0800bf08 	.word	0x0800bf08
 8008424:	0800bee0 	.word	0x0800bee0
 8008428:	7ca00000 	.word	0x7ca00000
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	f016 0310 	ands.w	r3, r6, #16
 8008434:	bf18      	it	ne
 8008436:	236a      	movne	r3, #106	; 0x6a
 8008438:	4fb1      	ldr	r7, [pc, #708]	; (8008700 <_strtod_l+0x870>)
 800843a:	9305      	str	r3, [sp, #20]
 800843c:	4640      	mov	r0, r8
 800843e:	4649      	mov	r1, r9
 8008440:	2300      	movs	r3, #0
 8008442:	07f2      	lsls	r2, r6, #31
 8008444:	d504      	bpl.n	8008450 <_strtod_l+0x5c0>
 8008446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844a:	f7f8 f8f5 	bl	8000638 <__aeabi_dmul>
 800844e:	2301      	movs	r3, #1
 8008450:	1076      	asrs	r6, r6, #1
 8008452:	f107 0708 	add.w	r7, r7, #8
 8008456:	d1f4      	bne.n	8008442 <_strtod_l+0x5b2>
 8008458:	b10b      	cbz	r3, 800845e <_strtod_l+0x5ce>
 800845a:	4680      	mov	r8, r0
 800845c:	4689      	mov	r9, r1
 800845e:	9b05      	ldr	r3, [sp, #20]
 8008460:	b1c3      	cbz	r3, 8008494 <_strtod_l+0x604>
 8008462:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008466:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800846a:	2b00      	cmp	r3, #0
 800846c:	4649      	mov	r1, r9
 800846e:	dd11      	ble.n	8008494 <_strtod_l+0x604>
 8008470:	2b1f      	cmp	r3, #31
 8008472:	f340 8124 	ble.w	80086be <_strtod_l+0x82e>
 8008476:	2b34      	cmp	r3, #52	; 0x34
 8008478:	bfde      	ittt	le
 800847a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800847e:	f04f 33ff 	movle.w	r3, #4294967295
 8008482:	fa03 f202 	lslle.w	r2, r3, r2
 8008486:	f04f 0800 	mov.w	r8, #0
 800848a:	bfcc      	ite	gt
 800848c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008490:	ea02 0901 	andle.w	r9, r2, r1
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	4640      	mov	r0, r8
 800849a:	4649      	mov	r1, r9
 800849c:	f7f8 fb34 	bl	8000b08 <__aeabi_dcmpeq>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d1a1      	bne.n	80083e8 <_strtod_l+0x558>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	9908      	ldr	r1, [sp, #32]
 80084aa:	4623      	mov	r3, r4
 80084ac:	465a      	mov	r2, fp
 80084ae:	4650      	mov	r0, sl
 80084b0:	f002 f92a 	bl	800a708 <__s2b>
 80084b4:	9008      	str	r0, [sp, #32]
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f af21 	beq.w	80082fe <_strtod_l+0x46e>
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	1b5d      	subs	r5, r3, r5
 80084c0:	9b07      	ldr	r3, [sp, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfb4      	ite	lt
 80084c6:	462b      	movlt	r3, r5
 80084c8:	2300      	movge	r3, #0
 80084ca:	930e      	str	r3, [sp, #56]	; 0x38
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	f04f 0b00 	mov.w	fp, #0
 80084d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084d6:	9314      	str	r3, [sp, #80]	; 0x50
 80084d8:	f8cd b010 	str.w	fp, [sp, #16]
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	4650      	mov	r0, sl
 80084e0:	6859      	ldr	r1, [r3, #4]
 80084e2:	f002 f869 	bl	800a5b8 <_Balloc>
 80084e6:	9006      	str	r0, [sp, #24]
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f43f af10 	beq.w	800830e <_strtod_l+0x47e>
 80084ee:	9b08      	ldr	r3, [sp, #32]
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	3202      	adds	r2, #2
 80084f4:	f103 010c 	add.w	r1, r3, #12
 80084f8:	0092      	lsls	r2, r2, #2
 80084fa:	300c      	adds	r0, #12
 80084fc:	f7fe ff56 	bl	80073ac <memcpy>
 8008500:	ab1c      	add	r3, sp, #112	; 0x70
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	ab1b      	add	r3, sp, #108	; 0x6c
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	4650      	mov	r0, sl
 800850e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008512:	f002 fc37 	bl	800ad84 <__d2b>
 8008516:	901a      	str	r0, [sp, #104]	; 0x68
 8008518:	2800      	cmp	r0, #0
 800851a:	f43f aef8 	beq.w	800830e <_strtod_l+0x47e>
 800851e:	2101      	movs	r1, #1
 8008520:	4650      	mov	r0, sl
 8008522:	f002 f989 	bl	800a838 <__i2b>
 8008526:	9004      	str	r0, [sp, #16]
 8008528:	4603      	mov	r3, r0
 800852a:	2800      	cmp	r0, #0
 800852c:	f43f aeef 	beq.w	800830e <_strtod_l+0x47e>
 8008530:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008532:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008534:	2d00      	cmp	r5, #0
 8008536:	bfab      	itete	ge
 8008538:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800853a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800853c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800853e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008540:	bfac      	ite	ge
 8008542:	18ee      	addge	r6, r5, r3
 8008544:	1b5c      	sublt	r4, r3, r5
 8008546:	9b05      	ldr	r3, [sp, #20]
 8008548:	1aed      	subs	r5, r5, r3
 800854a:	4415      	add	r5, r2
 800854c:	4b6d      	ldr	r3, [pc, #436]	; (8008704 <_strtod_l+0x874>)
 800854e:	3d01      	subs	r5, #1
 8008550:	429d      	cmp	r5, r3
 8008552:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008556:	f280 80c4 	bge.w	80086e2 <_strtod_l+0x852>
 800855a:	1b5b      	subs	r3, r3, r5
 800855c:	2b1f      	cmp	r3, #31
 800855e:	eba2 0203 	sub.w	r2, r2, r3
 8008562:	f04f 0701 	mov.w	r7, #1
 8008566:	f300 80b1 	bgt.w	80086cc <_strtod_l+0x83c>
 800856a:	fa07 f303 	lsl.w	r3, r7, r3
 800856e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008570:	2500      	movs	r5, #0
 8008572:	18b7      	adds	r7, r6, r2
 8008574:	9b05      	ldr	r3, [sp, #20]
 8008576:	42be      	cmp	r6, r7
 8008578:	4414      	add	r4, r2
 800857a:	441c      	add	r4, r3
 800857c:	4633      	mov	r3, r6
 800857e:	bfa8      	it	ge
 8008580:	463b      	movge	r3, r7
 8008582:	42a3      	cmp	r3, r4
 8008584:	bfa8      	it	ge
 8008586:	4623      	movge	r3, r4
 8008588:	2b00      	cmp	r3, #0
 800858a:	bfc2      	ittt	gt
 800858c:	1aff      	subgt	r7, r7, r3
 800858e:	1ae4      	subgt	r4, r4, r3
 8008590:	1af6      	subgt	r6, r6, r3
 8008592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd17      	ble.n	80085c8 <_strtod_l+0x738>
 8008598:	9904      	ldr	r1, [sp, #16]
 800859a:	461a      	mov	r2, r3
 800859c:	4650      	mov	r0, sl
 800859e:	f002 fa09 	bl	800a9b4 <__pow5mult>
 80085a2:	9004      	str	r0, [sp, #16]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f aeb2 	beq.w	800830e <_strtod_l+0x47e>
 80085aa:	4601      	mov	r1, r0
 80085ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80085ae:	4650      	mov	r0, sl
 80085b0:	f002 f958 	bl	800a864 <__multiply>
 80085b4:	9009      	str	r0, [sp, #36]	; 0x24
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f43f aea9 	beq.w	800830e <_strtod_l+0x47e>
 80085bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80085be:	4650      	mov	r0, sl
 80085c0:	f002 f83a 	bl	800a638 <_Bfree>
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	931a      	str	r3, [sp, #104]	; 0x68
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	f300 808e 	bgt.w	80086ea <_strtod_l+0x85a>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dd08      	ble.n	80085e6 <_strtod_l+0x756>
 80085d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085d6:	9906      	ldr	r1, [sp, #24]
 80085d8:	4650      	mov	r0, sl
 80085da:	f002 f9eb 	bl	800a9b4 <__pow5mult>
 80085de:	9006      	str	r0, [sp, #24]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f43f ae94 	beq.w	800830e <_strtod_l+0x47e>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	dd08      	ble.n	80085fc <_strtod_l+0x76c>
 80085ea:	9906      	ldr	r1, [sp, #24]
 80085ec:	4622      	mov	r2, r4
 80085ee:	4650      	mov	r0, sl
 80085f0:	f002 fa3a 	bl	800aa68 <__lshift>
 80085f4:	9006      	str	r0, [sp, #24]
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f43f ae89 	beq.w	800830e <_strtod_l+0x47e>
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	dd08      	ble.n	8008612 <_strtod_l+0x782>
 8008600:	9904      	ldr	r1, [sp, #16]
 8008602:	4632      	mov	r2, r6
 8008604:	4650      	mov	r0, sl
 8008606:	f002 fa2f 	bl	800aa68 <__lshift>
 800860a:	9004      	str	r0, [sp, #16]
 800860c:	2800      	cmp	r0, #0
 800860e:	f43f ae7e 	beq.w	800830e <_strtod_l+0x47e>
 8008612:	9a06      	ldr	r2, [sp, #24]
 8008614:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008616:	4650      	mov	r0, sl
 8008618:	f002 fab2 	bl	800ab80 <__mdiff>
 800861c:	4683      	mov	fp, r0
 800861e:	2800      	cmp	r0, #0
 8008620:	f43f ae75 	beq.w	800830e <_strtod_l+0x47e>
 8008624:	2400      	movs	r4, #0
 8008626:	68c3      	ldr	r3, [r0, #12]
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	60c4      	str	r4, [r0, #12]
 800862c:	930b      	str	r3, [sp, #44]	; 0x2c
 800862e:	f002 fa8b 	bl	800ab48 <__mcmp>
 8008632:	42a0      	cmp	r0, r4
 8008634:	da6c      	bge.n	8008710 <_strtod_l+0x880>
 8008636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008638:	ea53 0308 	orrs.w	r3, r3, r8
 800863c:	f040 8092 	bne.w	8008764 <_strtod_l+0x8d4>
 8008640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 808d 	bne.w	8008764 <_strtod_l+0x8d4>
 800864a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800864e:	0d1b      	lsrs	r3, r3, #20
 8008650:	051b      	lsls	r3, r3, #20
 8008652:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008656:	f240 8085 	bls.w	8008764 <_strtod_l+0x8d4>
 800865a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800865e:	b91b      	cbnz	r3, 8008668 <_strtod_l+0x7d8>
 8008660:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008664:	2b01      	cmp	r3, #1
 8008666:	dd7d      	ble.n	8008764 <_strtod_l+0x8d4>
 8008668:	4659      	mov	r1, fp
 800866a:	2201      	movs	r2, #1
 800866c:	4650      	mov	r0, sl
 800866e:	f002 f9fb 	bl	800aa68 <__lshift>
 8008672:	9904      	ldr	r1, [sp, #16]
 8008674:	4683      	mov	fp, r0
 8008676:	f002 fa67 	bl	800ab48 <__mcmp>
 800867a:	2800      	cmp	r0, #0
 800867c:	dd72      	ble.n	8008764 <_strtod_l+0x8d4>
 800867e:	9905      	ldr	r1, [sp, #20]
 8008680:	4a21      	ldr	r2, [pc, #132]	; (8008708 <_strtod_l+0x878>)
 8008682:	464b      	mov	r3, r9
 8008684:	2900      	cmp	r1, #0
 8008686:	f000 808d 	beq.w	80087a4 <_strtod_l+0x914>
 800868a:	ea02 0109 	and.w	r1, r2, r9
 800868e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008692:	f300 8087 	bgt.w	80087a4 <_strtod_l+0x914>
 8008696:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800869a:	f77f aead 	ble.w	80083f8 <_strtod_l+0x568>
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <_strtod_l+0x87c>)
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	2200      	movs	r2, #0
 80086a6:	f7f7 ffc7 	bl	8000638 <__aeabi_dmul>
 80086aa:	460b      	mov	r3, r1
 80086ac:	4303      	orrs	r3, r0
 80086ae:	bf08      	it	eq
 80086b0:	2322      	moveq	r3, #34	; 0x22
 80086b2:	4680      	mov	r8, r0
 80086b4:	4689      	mov	r9, r1
 80086b6:	bf08      	it	eq
 80086b8:	f8ca 3000 	streq.w	r3, [sl]
 80086bc:	e632      	b.n	8008324 <_strtod_l+0x494>
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	ea03 0808 	and.w	r8, r3, r8
 80086ca:	e6e3      	b.n	8008494 <_strtod_l+0x604>
 80086cc:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80086d0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80086d4:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80086d8:	35e2      	adds	r5, #226	; 0xe2
 80086da:	fa07 f505 	lsl.w	r5, r7, r5
 80086de:	970f      	str	r7, [sp, #60]	; 0x3c
 80086e0:	e747      	b.n	8008572 <_strtod_l+0x6e2>
 80086e2:	2301      	movs	r3, #1
 80086e4:	2500      	movs	r5, #0
 80086e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e8:	e743      	b.n	8008572 <_strtod_l+0x6e2>
 80086ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086ec:	463a      	mov	r2, r7
 80086ee:	4650      	mov	r0, sl
 80086f0:	f002 f9ba 	bl	800aa68 <__lshift>
 80086f4:	901a      	str	r0, [sp, #104]	; 0x68
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f47f af69 	bne.w	80085ce <_strtod_l+0x73e>
 80086fc:	e607      	b.n	800830e <_strtod_l+0x47e>
 80086fe:	bf00      	nop
 8008700:	0800bbe8 	.word	0x0800bbe8
 8008704:	fffffc02 	.word	0xfffffc02
 8008708:	7ff00000 	.word	0x7ff00000
 800870c:	39500000 	.word	0x39500000
 8008710:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008714:	d165      	bne.n	80087e2 <_strtod_l+0x952>
 8008716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800871c:	b35a      	cbz	r2, 8008776 <_strtod_l+0x8e6>
 800871e:	4a9a      	ldr	r2, [pc, #616]	; (8008988 <_strtod_l+0xaf8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d12b      	bne.n	800877c <_strtod_l+0x8ec>
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	4641      	mov	r1, r8
 8008728:	b303      	cbz	r3, 800876c <_strtod_l+0x8dc>
 800872a:	4b98      	ldr	r3, [pc, #608]	; (800898c <_strtod_l+0xafc>)
 800872c:	464a      	mov	r2, r9
 800872e:	4013      	ands	r3, r2
 8008730:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008734:	f04f 32ff 	mov.w	r2, #4294967295
 8008738:	d81b      	bhi.n	8008772 <_strtod_l+0x8e2>
 800873a:	0d1b      	lsrs	r3, r3, #20
 800873c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	4299      	cmp	r1, r3
 8008746:	d119      	bne.n	800877c <_strtod_l+0x8ec>
 8008748:	4b91      	ldr	r3, [pc, #580]	; (8008990 <_strtod_l+0xb00>)
 800874a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874c:	429a      	cmp	r2, r3
 800874e:	d102      	bne.n	8008756 <_strtod_l+0x8c6>
 8008750:	3101      	adds	r1, #1
 8008752:	f43f addc 	beq.w	800830e <_strtod_l+0x47e>
 8008756:	4b8d      	ldr	r3, [pc, #564]	; (800898c <_strtod_l+0xafc>)
 8008758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875a:	401a      	ands	r2, r3
 800875c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008760:	f04f 0800 	mov.w	r8, #0
 8008764:	9b05      	ldr	r3, [sp, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d199      	bne.n	800869e <_strtod_l+0x80e>
 800876a:	e5db      	b.n	8008324 <_strtod_l+0x494>
 800876c:	f04f 33ff 	mov.w	r3, #4294967295
 8008770:	e7e8      	b.n	8008744 <_strtod_l+0x8b4>
 8008772:	4613      	mov	r3, r2
 8008774:	e7e6      	b.n	8008744 <_strtod_l+0x8b4>
 8008776:	ea53 0308 	orrs.w	r3, r3, r8
 800877a:	d080      	beq.n	800867e <_strtod_l+0x7ee>
 800877c:	b1e5      	cbz	r5, 80087b8 <_strtod_l+0x928>
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	421d      	tst	r5, r3
 8008782:	d0ef      	beq.n	8008764 <_strtod_l+0x8d4>
 8008784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008786:	9a05      	ldr	r2, [sp, #20]
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	b1c3      	cbz	r3, 80087c0 <_strtod_l+0x930>
 800878e:	f7ff fb5b 	bl	8007e48 <sulp>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800879a:	f7f7 fd97 	bl	80002cc <__adddf3>
 800879e:	4680      	mov	r8, r0
 80087a0:	4689      	mov	r9, r1
 80087a2:	e7df      	b.n	8008764 <_strtod_l+0x8d4>
 80087a4:	4013      	ands	r3, r2
 80087a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087b2:	f04f 38ff 	mov.w	r8, #4294967295
 80087b6:	e7d5      	b.n	8008764 <_strtod_l+0x8d4>
 80087b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ba:	ea13 0f08 	tst.w	r3, r8
 80087be:	e7e0      	b.n	8008782 <_strtod_l+0x8f2>
 80087c0:	f7ff fb42 	bl	8007e48 <sulp>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087cc:	f7f7 fd7c 	bl	80002c8 <__aeabi_dsub>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4680      	mov	r8, r0
 80087d6:	4689      	mov	r9, r1
 80087d8:	f7f8 f996 	bl	8000b08 <__aeabi_dcmpeq>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0c1      	beq.n	8008764 <_strtod_l+0x8d4>
 80087e0:	e60a      	b.n	80083f8 <_strtod_l+0x568>
 80087e2:	9904      	ldr	r1, [sp, #16]
 80087e4:	4658      	mov	r0, fp
 80087e6:	f002 fb29 	bl	800ae3c <__ratio>
 80087ea:	2200      	movs	r2, #0
 80087ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087f0:	4606      	mov	r6, r0
 80087f2:	460f      	mov	r7, r1
 80087f4:	f7f8 f99c 	bl	8000b30 <__aeabi_dcmple>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d070      	beq.n	80088de <_strtod_l+0xa4e>
 80087fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d042      	beq.n	8008888 <_strtod_l+0x9f8>
 8008802:	4f64      	ldr	r7, [pc, #400]	; (8008994 <_strtod_l+0xb04>)
 8008804:	2600      	movs	r6, #0
 8008806:	4d63      	ldr	r5, [pc, #396]	; (8008994 <_strtod_l+0xb04>)
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800880e:	0d1b      	lsrs	r3, r3, #20
 8008810:	051b      	lsls	r3, r3, #20
 8008812:	930f      	str	r3, [sp, #60]	; 0x3c
 8008814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008816:	4b60      	ldr	r3, [pc, #384]	; (8008998 <_strtod_l+0xb08>)
 8008818:	429a      	cmp	r2, r3
 800881a:	f040 80c5 	bne.w	80089a8 <_strtod_l+0xb18>
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	f002 fa32 	bl	800ac90 <__ulp>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 ff00 	bl	8000638 <__aeabi_dmul>
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	f7f7 fd46 	bl	80002cc <__adddf3>
 8008840:	460b      	mov	r3, r1
 8008842:	4952      	ldr	r1, [pc, #328]	; (800898c <_strtod_l+0xafc>)
 8008844:	4a55      	ldr	r2, [pc, #340]	; (800899c <_strtod_l+0xb0c>)
 8008846:	4019      	ands	r1, r3
 8008848:	4291      	cmp	r1, r2
 800884a:	4680      	mov	r8, r0
 800884c:	d95d      	bls.n	800890a <_strtod_l+0xa7a>
 800884e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008850:	4b4f      	ldr	r3, [pc, #316]	; (8008990 <_strtod_l+0xb00>)
 8008852:	429a      	cmp	r2, r3
 8008854:	d103      	bne.n	800885e <_strtod_l+0x9ce>
 8008856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008858:	3301      	adds	r3, #1
 800885a:	f43f ad58 	beq.w	800830e <_strtod_l+0x47e>
 800885e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8008990 <_strtod_l+0xb00>
 8008862:	f04f 38ff 	mov.w	r8, #4294967295
 8008866:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008868:	4650      	mov	r0, sl
 800886a:	f001 fee5 	bl	800a638 <_Bfree>
 800886e:	9906      	ldr	r1, [sp, #24]
 8008870:	4650      	mov	r0, sl
 8008872:	f001 fee1 	bl	800a638 <_Bfree>
 8008876:	9904      	ldr	r1, [sp, #16]
 8008878:	4650      	mov	r0, sl
 800887a:	f001 fedd 	bl	800a638 <_Bfree>
 800887e:	4659      	mov	r1, fp
 8008880:	4650      	mov	r0, sl
 8008882:	f001 fed9 	bl	800a638 <_Bfree>
 8008886:	e629      	b.n	80084dc <_strtod_l+0x64c>
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	d119      	bne.n	80088c2 <_strtod_l+0xa32>
 800888e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008894:	b9e3      	cbnz	r3, 80088d0 <_strtod_l+0xa40>
 8008896:	4b3f      	ldr	r3, [pc, #252]	; (8008994 <_strtod_l+0xb04>)
 8008898:	2200      	movs	r2, #0
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f93d 	bl	8000b1c <__aeabi_dcmplt>
 80088a2:	b9c8      	cbnz	r0, 80088d8 <_strtod_l+0xa48>
 80088a4:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <_strtod_l+0xb10>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f7 fec4 	bl	8000638 <__aeabi_dmul>
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80088b8:	9416      	str	r4, [sp, #88]	; 0x58
 80088ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80088bc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80088c0:	e7a2      	b.n	8008808 <_strtod_l+0x978>
 80088c2:	f1b8 0f01 	cmp.w	r8, #1
 80088c6:	d103      	bne.n	80088d0 <_strtod_l+0xa40>
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f43f ad94 	beq.w	80083f8 <_strtod_l+0x568>
 80088d0:	4f34      	ldr	r7, [pc, #208]	; (80089a4 <_strtod_l+0xb14>)
 80088d2:	2600      	movs	r6, #0
 80088d4:	2400      	movs	r4, #0
 80088d6:	e796      	b.n	8008806 <_strtod_l+0x976>
 80088d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80088da:	4d31      	ldr	r5, [pc, #196]	; (80089a0 <_strtod_l+0xb10>)
 80088dc:	e7ea      	b.n	80088b4 <_strtod_l+0xa24>
 80088de:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <_strtod_l+0xb10>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f7 fea7 	bl	8000638 <__aeabi_dmul>
 80088ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	b933      	cbnz	r3, 8008900 <_strtod_l+0xa70>
 80088f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088f6:	9010      	str	r0, [sp, #64]	; 0x40
 80088f8:	9311      	str	r3, [sp, #68]	; 0x44
 80088fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088fe:	e783      	b.n	8008808 <_strtod_l+0x978>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008908:	e7f7      	b.n	80088fa <_strtod_l+0xa6a>
 800890a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800890e:	9b05      	ldr	r3, [sp, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1a8      	bne.n	8008866 <_strtod_l+0x9d6>
 8008914:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800891a:	0d1b      	lsrs	r3, r3, #20
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	429a      	cmp	r2, r3
 8008920:	d1a1      	bne.n	8008866 <_strtod_l+0x9d6>
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f8 fba1 	bl	800106c <__aeabi_d2lz>
 800892a:	f7f7 fe57 	bl	80005dc <__aeabi_l2d>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4620      	mov	r0, r4
 8008934:	4629      	mov	r1, r5
 8008936:	f7f7 fcc7 	bl	80002c8 <__aeabi_dsub>
 800893a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800893c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008940:	ea43 0308 	orr.w	r3, r3, r8
 8008944:	4313      	orrs	r3, r2
 8008946:	4604      	mov	r4, r0
 8008948:	460d      	mov	r5, r1
 800894a:	d068      	beq.n	8008a1e <_strtod_l+0xb8e>
 800894c:	a30a      	add	r3, pc, #40	; (adr r3, 8008978 <_strtod_l+0xae8>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f8 f8e3 	bl	8000b1c <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f47f ace4 	bne.w	8008324 <_strtod_l+0x494>
 800895c:	a308      	add	r3, pc, #32	; (adr r3, 8008980 <_strtod_l+0xaf0>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f8 f8f7 	bl	8000b58 <__aeabi_dcmpgt>
 800896a:	2800      	cmp	r0, #0
 800896c:	f43f af7b 	beq.w	8008866 <_strtod_l+0x9d6>
 8008970:	e4d8      	b.n	8008324 <_strtod_l+0x494>
 8008972:	bf00      	nop
 8008974:	f3af 8000 	nop.w
 8008978:	94a03595 	.word	0x94a03595
 800897c:	3fdfffff 	.word	0x3fdfffff
 8008980:	35afe535 	.word	0x35afe535
 8008984:	3fe00000 	.word	0x3fe00000
 8008988:	000fffff 	.word	0x000fffff
 800898c:	7ff00000 	.word	0x7ff00000
 8008990:	7fefffff 	.word	0x7fefffff
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	7fe00000 	.word	0x7fe00000
 800899c:	7c9fffff 	.word	0x7c9fffff
 80089a0:	3fe00000 	.word	0x3fe00000
 80089a4:	bff00000 	.word	0xbff00000
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	b313      	cbz	r3, 80089f2 <_strtod_l+0xb62>
 80089ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089b2:	d81e      	bhi.n	80089f2 <_strtod_l+0xb62>
 80089b4:	a326      	add	r3, pc, #152	; (adr r3, 8008a50 <_strtod_l+0xbc0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f8 f8b7 	bl	8000b30 <__aeabi_dcmple>
 80089c2:	b190      	cbz	r0, 80089ea <_strtod_l+0xb5a>
 80089c4:	4629      	mov	r1, r5
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7f8 f90e 	bl	8000be8 <__aeabi_d2uiz>
 80089cc:	2801      	cmp	r0, #1
 80089ce:	bf38      	it	cc
 80089d0:	2001      	movcc	r0, #1
 80089d2:	f7f7 fdb7 	bl	8000544 <__aeabi_ui2d>
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	b9d3      	cbnz	r3, 8008a14 <_strtod_l+0xb84>
 80089de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089e2:	9012      	str	r0, [sp, #72]	; 0x48
 80089e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80089e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80089ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80089f0:	1a9f      	subs	r7, r3, r2
 80089f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089f6:	f002 f94b 	bl	800ac90 <__ulp>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f7 fe19 	bl	8000638 <__aeabi_dmul>
 8008a06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a0a:	f7f7 fc5f 	bl	80002cc <__adddf3>
 8008a0e:	4680      	mov	r8, r0
 8008a10:	4689      	mov	r9, r1
 8008a12:	e77c      	b.n	800890e <_strtod_l+0xa7e>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008a1c:	e7e3      	b.n	80089e6 <_strtod_l+0xb56>
 8008a1e:	a30e      	add	r3, pc, #56	; (adr r3, 8008a58 <_strtod_l+0xbc8>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f8 f87a 	bl	8000b1c <__aeabi_dcmplt>
 8008a28:	e79f      	b.n	800896a <_strtod_l+0xada>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	f7ff ba71 	b.w	8007f1a <_strtod_l+0x8a>
 8008a38:	2a65      	cmp	r2, #101	; 0x65
 8008a3a:	f43f ab63 	beq.w	8008104 <_strtod_l+0x274>
 8008a3e:	2a45      	cmp	r2, #69	; 0x45
 8008a40:	f43f ab60 	beq.w	8008104 <_strtod_l+0x274>
 8008a44:	2301      	movs	r3, #1
 8008a46:	f7ff bb95 	b.w	8008174 <_strtod_l+0x2e4>
 8008a4a:	bf00      	nop
 8008a4c:	f3af 8000 	nop.w
 8008a50:	ffc00000 	.word	0xffc00000
 8008a54:	41dfffff 	.word	0x41dfffff
 8008a58:	94a03595 	.word	0x94a03595
 8008a5c:	3fcfffff 	.word	0x3fcfffff

08008a60 <strtof>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	4f22      	ldr	r7, [pc, #136]	; (8008af0 <strtof+0x90>)
 8008a66:	4b23      	ldr	r3, [pc, #140]	; (8008af4 <strtof+0x94>)
 8008a68:	460a      	mov	r2, r1
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	6838      	ldr	r0, [r7, #0]
 8008a6e:	f7ff fa0f 	bl	8007e90 <_strtod_l>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4606      	mov	r6, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	f7f8 f877 	bl	8000b6c <__aeabi_dcmpun>
 8008a7e:	b168      	cbz	r0, 8008a9c <strtof+0x3c>
 8008a80:	2c00      	cmp	r4, #0
 8008a82:	481d      	ldr	r0, [pc, #116]	; (8008af8 <strtof+0x98>)
 8008a84:	da06      	bge.n	8008a94 <strtof+0x34>
 8008a86:	f002 fe07 	bl	800b698 <nanf>
 8008a8a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8008a8e:	4628      	mov	r0, r5
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	f002 bdfe 	b.w	800b698 <nanf>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f7f8 f8c2 	bl	8000c28 <__aeabi_d2f>
 8008aa4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	4914      	ldr	r1, [pc, #80]	; (8008afc <strtof+0x9c>)
 8008aac:	4640      	mov	r0, r8
 8008aae:	f7f8 fa8f 	bl	8000fd0 <__aeabi_fcmpun>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d1eb      	bne.n	8008a8e <strtof+0x2e>
 8008ab6:	4911      	ldr	r1, [pc, #68]	; (8008afc <strtof+0x9c>)
 8008ab8:	4640      	mov	r0, r8
 8008aba:	f7f8 fa6b 	bl	8000f94 <__aeabi_fcmple>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1e5      	bne.n	8008a8e <strtof+0x2e>
 8008ac2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <strtof+0xa0>)
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8008acc:	4630      	mov	r0, r6
 8008ace:	4621      	mov	r1, r4
 8008ad0:	f7f8 f84c 	bl	8000b6c <__aeabi_dcmpun>
 8008ad4:	b940      	cbnz	r0, 8008ae8 <strtof+0x88>
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <strtof+0xa0>)
 8008ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8008adc:	4630      	mov	r0, r6
 8008ade:	4621      	mov	r1, r4
 8008ae0:	f7f8 f826 	bl	8000b30 <__aeabi_dcmple>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d0d2      	beq.n	8008a8e <strtof+0x2e>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2222      	movs	r2, #34	; 0x22
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e7ce      	b.n	8008a8e <strtof+0x2e>
 8008af0:	2000000c 	.word	0x2000000c
 8008af4:	20000074 	.word	0x20000074
 8008af8:	0800c028 	.word	0x0800c028
 8008afc:	7f7fffff 	.word	0x7f7fffff
 8008b00:	7fefffff 	.word	0x7fefffff

08008b04 <_strtol_l.constprop.0>:
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	d001      	beq.n	8008b12 <_strtol_l.constprop.0+0xe>
 8008b0e:	2b24      	cmp	r3, #36	; 0x24
 8008b10:	d906      	bls.n	8008b20 <_strtol_l.constprop.0+0x1c>
 8008b12:	f7fe fc21 	bl	8007358 <__errno>
 8008b16:	2316      	movs	r3, #22
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b20:	4f35      	ldr	r7, [pc, #212]	; (8008bf8 <_strtol_l.constprop.0+0xf4>)
 8008b22:	460d      	mov	r5, r1
 8008b24:	4628      	mov	r0, r5
 8008b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b2a:	5de6      	ldrb	r6, [r4, r7]
 8008b2c:	f016 0608 	ands.w	r6, r6, #8
 8008b30:	d1f8      	bne.n	8008b24 <_strtol_l.constprop.0+0x20>
 8008b32:	2c2d      	cmp	r4, #45	; 0x2d
 8008b34:	d12f      	bne.n	8008b96 <_strtol_l.constprop.0+0x92>
 8008b36:	782c      	ldrb	r4, [r5, #0]
 8008b38:	2601      	movs	r6, #1
 8008b3a:	1c85      	adds	r5, r0, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d057      	beq.n	8008bf0 <_strtol_l.constprop.0+0xec>
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d109      	bne.n	8008b58 <_strtol_l.constprop.0+0x54>
 8008b44:	2c30      	cmp	r4, #48	; 0x30
 8008b46:	d107      	bne.n	8008b58 <_strtol_l.constprop.0+0x54>
 8008b48:	7828      	ldrb	r0, [r5, #0]
 8008b4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008b4e:	2858      	cmp	r0, #88	; 0x58
 8008b50:	d149      	bne.n	8008be6 <_strtol_l.constprop.0+0xe2>
 8008b52:	786c      	ldrb	r4, [r5, #1]
 8008b54:	2310      	movs	r3, #16
 8008b56:	3502      	adds	r5, #2
 8008b58:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008b5c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008b60:	2700      	movs	r7, #0
 8008b62:	fbbe f9f3 	udiv	r9, lr, r3
 8008b66:	4638      	mov	r0, r7
 8008b68:	fb03 ea19 	mls	sl, r3, r9, lr
 8008b6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008b70:	f1bc 0f09 	cmp.w	ip, #9
 8008b74:	d814      	bhi.n	8008ba0 <_strtol_l.constprop.0+0x9c>
 8008b76:	4664      	mov	r4, ip
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	dd22      	ble.n	8008bc2 <_strtol_l.constprop.0+0xbe>
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	db1d      	blt.n	8008bbc <_strtol_l.constprop.0+0xb8>
 8008b80:	4581      	cmp	r9, r0
 8008b82:	d31b      	bcc.n	8008bbc <_strtol_l.constprop.0+0xb8>
 8008b84:	d101      	bne.n	8008b8a <_strtol_l.constprop.0+0x86>
 8008b86:	45a2      	cmp	sl, r4
 8008b88:	db18      	blt.n	8008bbc <_strtol_l.constprop.0+0xb8>
 8008b8a:	fb00 4003 	mla	r0, r0, r3, r4
 8008b8e:	2701      	movs	r7, #1
 8008b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b94:	e7ea      	b.n	8008b6c <_strtol_l.constprop.0+0x68>
 8008b96:	2c2b      	cmp	r4, #43	; 0x2b
 8008b98:	bf04      	itt	eq
 8008b9a:	782c      	ldrbeq	r4, [r5, #0]
 8008b9c:	1c85      	addeq	r5, r0, #2
 8008b9e:	e7cd      	b.n	8008b3c <_strtol_l.constprop.0+0x38>
 8008ba0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ba4:	f1bc 0f19 	cmp.w	ip, #25
 8008ba8:	d801      	bhi.n	8008bae <_strtol_l.constprop.0+0xaa>
 8008baa:	3c37      	subs	r4, #55	; 0x37
 8008bac:	e7e4      	b.n	8008b78 <_strtol_l.constprop.0+0x74>
 8008bae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008bb2:	f1bc 0f19 	cmp.w	ip, #25
 8008bb6:	d804      	bhi.n	8008bc2 <_strtol_l.constprop.0+0xbe>
 8008bb8:	3c57      	subs	r4, #87	; 0x57
 8008bba:	e7dd      	b.n	8008b78 <_strtol_l.constprop.0+0x74>
 8008bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc0:	e7e6      	b.n	8008b90 <_strtol_l.constprop.0+0x8c>
 8008bc2:	2f00      	cmp	r7, #0
 8008bc4:	da07      	bge.n	8008bd6 <_strtol_l.constprop.0+0xd2>
 8008bc6:	2322      	movs	r3, #34	; 0x22
 8008bc8:	f8c8 3000 	str.w	r3, [r8]
 8008bcc:	4670      	mov	r0, lr
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d0a4      	beq.n	8008b1c <_strtol_l.constprop.0+0x18>
 8008bd2:	1e69      	subs	r1, r5, #1
 8008bd4:	e005      	b.n	8008be2 <_strtol_l.constprop.0+0xde>
 8008bd6:	b106      	cbz	r6, 8008bda <_strtol_l.constprop.0+0xd6>
 8008bd8:	4240      	negs	r0, r0
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d09e      	beq.n	8008b1c <_strtol_l.constprop.0+0x18>
 8008bde:	2f00      	cmp	r7, #0
 8008be0:	d1f7      	bne.n	8008bd2 <_strtol_l.constprop.0+0xce>
 8008be2:	6011      	str	r1, [r2, #0]
 8008be4:	e79a      	b.n	8008b1c <_strtol_l.constprop.0+0x18>
 8008be6:	2430      	movs	r4, #48	; 0x30
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1b5      	bne.n	8008b58 <_strtol_l.constprop.0+0x54>
 8008bec:	2308      	movs	r3, #8
 8008bee:	e7b3      	b.n	8008b58 <_strtol_l.constprop.0+0x54>
 8008bf0:	2c30      	cmp	r4, #48	; 0x30
 8008bf2:	d0a9      	beq.n	8008b48 <_strtol_l.constprop.0+0x44>
 8008bf4:	230a      	movs	r3, #10
 8008bf6:	e7af      	b.n	8008b58 <_strtol_l.constprop.0+0x54>
 8008bf8:	0800bc11 	.word	0x0800bc11

08008bfc <strtol>:
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	460a      	mov	r2, r1
 8008c00:	4601      	mov	r1, r0
 8008c02:	4802      	ldr	r0, [pc, #8]	; (8008c0c <strtol+0x10>)
 8008c04:	6800      	ldr	r0, [r0, #0]
 8008c06:	f7ff bf7d 	b.w	8008b04 <_strtol_l.constprop.0>
 8008c0a:	bf00      	nop
 8008c0c:	2000000c 	.word	0x2000000c

08008c10 <__swbuf_r>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	460e      	mov	r6, r1
 8008c14:	4614      	mov	r4, r2
 8008c16:	4605      	mov	r5, r0
 8008c18:	b118      	cbz	r0, 8008c22 <__swbuf_r+0x12>
 8008c1a:	6983      	ldr	r3, [r0, #24]
 8008c1c:	b90b      	cbnz	r3, 8008c22 <__swbuf_r+0x12>
 8008c1e:	f001 f843 	bl	8009ca8 <__sinit>
 8008c22:	4b21      	ldr	r3, [pc, #132]	; (8008ca8 <__swbuf_r+0x98>)
 8008c24:	429c      	cmp	r4, r3
 8008c26:	d12b      	bne.n	8008c80 <__swbuf_r+0x70>
 8008c28:	686c      	ldr	r4, [r5, #4]
 8008c2a:	69a3      	ldr	r3, [r4, #24]
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	071a      	lsls	r2, r3, #28
 8008c32:	d52f      	bpl.n	8008c94 <__swbuf_r+0x84>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	b36b      	cbz	r3, 8008c94 <__swbuf_r+0x84>
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	6820      	ldr	r0, [r4, #0]
 8008c3c:	1ac0      	subs	r0, r0, r3
 8008c3e:	6963      	ldr	r3, [r4, #20]
 8008c40:	b2f6      	uxtb	r6, r6
 8008c42:	4283      	cmp	r3, r0
 8008c44:	4637      	mov	r7, r6
 8008c46:	dc04      	bgt.n	8008c52 <__swbuf_r+0x42>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 ff98 	bl	8009b80 <_fflush_r>
 8008c50:	bb30      	cbnz	r0, 8008ca0 <__swbuf_r+0x90>
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	60a3      	str	r3, [r4, #8]
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	6022      	str	r2, [r4, #0]
 8008c5e:	701e      	strb	r6, [r3, #0]
 8008c60:	6963      	ldr	r3, [r4, #20]
 8008c62:	3001      	adds	r0, #1
 8008c64:	4283      	cmp	r3, r0
 8008c66:	d004      	beq.n	8008c72 <__swbuf_r+0x62>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	07db      	lsls	r3, r3, #31
 8008c6c:	d506      	bpl.n	8008c7c <__swbuf_r+0x6c>
 8008c6e:	2e0a      	cmp	r6, #10
 8008c70:	d104      	bne.n	8008c7c <__swbuf_r+0x6c>
 8008c72:	4621      	mov	r1, r4
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 ff83 	bl	8009b80 <_fflush_r>
 8008c7a:	b988      	cbnz	r0, 8008ca0 <__swbuf_r+0x90>
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <__swbuf_r+0x9c>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <__swbuf_r+0x7a>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7cf      	b.n	8008c2a <__swbuf_r+0x1a>
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <__swbuf_r+0xa0>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7ca      	b.n	8008c2a <__swbuf_r+0x1a>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 f80c 	bl	8008cb4 <__swsetup_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d0cb      	beq.n	8008c38 <__swbuf_r+0x28>
 8008ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ca4:	e7ea      	b.n	8008c7c <__swbuf_r+0x6c>
 8008ca6:	bf00      	nop
 8008ca8:	0800bdc4 	.word	0x0800bdc4
 8008cac:	0800bde4 	.word	0x0800bde4
 8008cb0:	0800bda4 	.word	0x0800bda4

08008cb4 <__swsetup_r>:
 8008cb4:	4b32      	ldr	r3, [pc, #200]	; (8008d80 <__swsetup_r+0xcc>)
 8008cb6:	b570      	push	{r4, r5, r6, lr}
 8008cb8:	681d      	ldr	r5, [r3, #0]
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	b125      	cbz	r5, 8008cca <__swsetup_r+0x16>
 8008cc0:	69ab      	ldr	r3, [r5, #24]
 8008cc2:	b913      	cbnz	r3, 8008cca <__swsetup_r+0x16>
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 ffef 	bl	8009ca8 <__sinit>
 8008cca:	4b2e      	ldr	r3, [pc, #184]	; (8008d84 <__swsetup_r+0xd0>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d10f      	bne.n	8008cf0 <__swsetup_r+0x3c>
 8008cd0:	686c      	ldr	r4, [r5, #4]
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cd8:	0719      	lsls	r1, r3, #28
 8008cda:	d42c      	bmi.n	8008d36 <__swsetup_r+0x82>
 8008cdc:	06dd      	lsls	r5, r3, #27
 8008cde:	d411      	bmi.n	8008d04 <__swsetup_r+0x50>
 8008ce0:	2309      	movs	r3, #9
 8008ce2:	6033      	str	r3, [r6, #0]
 8008ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	e03e      	b.n	8008d6e <__swsetup_r+0xba>
 8008cf0:	4b25      	ldr	r3, [pc, #148]	; (8008d88 <__swsetup_r+0xd4>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d101      	bne.n	8008cfa <__swsetup_r+0x46>
 8008cf6:	68ac      	ldr	r4, [r5, #8]
 8008cf8:	e7eb      	b.n	8008cd2 <__swsetup_r+0x1e>
 8008cfa:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <__swsetup_r+0xd8>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	bf08      	it	eq
 8008d00:	68ec      	ldreq	r4, [r5, #12]
 8008d02:	e7e6      	b.n	8008cd2 <__swsetup_r+0x1e>
 8008d04:	0758      	lsls	r0, r3, #29
 8008d06:	d512      	bpl.n	8008d2e <__swsetup_r+0x7a>
 8008d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0a:	b141      	cbz	r1, 8008d1e <__swsetup_r+0x6a>
 8008d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d10:	4299      	cmp	r1, r3
 8008d12:	d002      	beq.n	8008d1a <__swsetup_r+0x66>
 8008d14:	4630      	mov	r0, r6
 8008d16:	f002 f917 	bl	800af48 <_free_r>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	2300      	movs	r3, #0
 8008d28:	6063      	str	r3, [r4, #4]
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f043 0308 	orr.w	r3, r3, #8
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	b94b      	cbnz	r3, 8008d4e <__swsetup_r+0x9a>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d44:	d003      	beq.n	8008d4e <__swsetup_r+0x9a>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f001 fbdb 	bl	800a504 <__smakebuf_r>
 8008d4e:	89a0      	ldrh	r0, [r4, #12]
 8008d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d54:	f010 0301 	ands.w	r3, r0, #1
 8008d58:	d00a      	beq.n	8008d70 <__swsetup_r+0xbc>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60a3      	str	r3, [r4, #8]
 8008d5e:	6963      	ldr	r3, [r4, #20]
 8008d60:	425b      	negs	r3, r3
 8008d62:	61a3      	str	r3, [r4, #24]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	b943      	cbnz	r3, 8008d7a <__swsetup_r+0xc6>
 8008d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d6c:	d1ba      	bne.n	8008ce4 <__swsetup_r+0x30>
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	0781      	lsls	r1, r0, #30
 8008d72:	bf58      	it	pl
 8008d74:	6963      	ldrpl	r3, [r4, #20]
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	e7f4      	b.n	8008d64 <__swsetup_r+0xb0>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e7f7      	b.n	8008d6e <__swsetup_r+0xba>
 8008d7e:	bf00      	nop
 8008d80:	2000000c 	.word	0x2000000c
 8008d84:	0800bdc4 	.word	0x0800bdc4
 8008d88:	0800bde4 	.word	0x0800bde4
 8008d8c:	0800bda4 	.word	0x0800bda4

08008d90 <quorem>:
 8008d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	6903      	ldr	r3, [r0, #16]
 8008d96:	690c      	ldr	r4, [r1, #16]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	db7d      	blt.n	8008e9a <quorem+0x10a>
 8008d9e:	3c01      	subs	r4, #1
 8008da0:	f101 0814 	add.w	r8, r1, #20
 8008da4:	f100 0514 	add.w	r5, r0, #20
 8008da8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008db6:	3301      	adds	r3, #1
 8008db8:	429a      	cmp	r2, r3
 8008dba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008dbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dc6:	d32e      	bcc.n	8008e26 <quorem+0x96>
 8008dc8:	f04f 0e00 	mov.w	lr, #0
 8008dcc:	4640      	mov	r0, r8
 8008dce:	46ac      	mov	ip, r5
 8008dd0:	46f2      	mov	sl, lr
 8008dd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dd6:	b293      	uxth	r3, r2
 8008dd8:	fb06 e303 	mla	r3, r6, r3, lr
 8008ddc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008de0:	0c12      	lsrs	r2, r2, #16
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	fb06 e202 	mla	r2, r6, r2, lr
 8008de8:	ebaa 0303 	sub.w	r3, sl, r3
 8008dec:	f8dc a000 	ldr.w	sl, [ip]
 8008df0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008df4:	b292      	uxth	r2, r2
 8008df6:	fa13 f38a 	uxtah	r3, r3, sl
 8008dfa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008dfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e08:	4581      	cmp	r9, r0
 8008e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e12:	d2de      	bcs.n	8008dd2 <quorem+0x42>
 8008e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e18:	b92b      	cbnz	r3, 8008e26 <quorem+0x96>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	d32e      	bcc.n	8008e82 <quorem+0xf2>
 8008e24:	613c      	str	r4, [r7, #16]
 8008e26:	4638      	mov	r0, r7
 8008e28:	f001 fe8e 	bl	800ab48 <__mcmp>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	db24      	blt.n	8008e7a <quorem+0xea>
 8008e30:	3601      	adds	r6, #1
 8008e32:	4628      	mov	r0, r5
 8008e34:	f04f 0c00 	mov.w	ip, #0
 8008e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8008e40:	b293      	uxth	r3, r2
 8008e42:	ebac 0303 	sub.w	r3, ip, r3
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	fa13 f38e 	uxtah	r3, r3, lr
 8008e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	45c1      	cmp	r9, r8
 8008e5c:	f840 3b04 	str.w	r3, [r0], #4
 8008e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e64:	d2e8      	bcs.n	8008e38 <quorem+0xa8>
 8008e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6e:	b922      	cbnz	r2, 8008e7a <quorem+0xea>
 8008e70:	3b04      	subs	r3, #4
 8008e72:	429d      	cmp	r5, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	d30a      	bcc.n	8008e8e <quorem+0xfe>
 8008e78:	613c      	str	r4, [r7, #16]
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d1cc      	bne.n	8008e24 <quorem+0x94>
 8008e8a:	3c01      	subs	r4, #1
 8008e8c:	e7c7      	b.n	8008e1e <quorem+0x8e>
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d1f0      	bne.n	8008e78 <quorem+0xe8>
 8008e96:	3c01      	subs	r4, #1
 8008e98:	e7eb      	b.n	8008e72 <quorem+0xe2>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e7ee      	b.n	8008e7c <quorem+0xec>
	...

08008ea0 <_dtoa_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ea6:	b099      	sub	sp, #100	; 0x64
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	461f      	mov	r7, r3
 8008eac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008eb0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	b974      	cbnz	r4, 8008ed6 <_dtoa_r+0x36>
 8008eb8:	2010      	movs	r0, #16
 8008eba:	f001 fb63 	bl	800a584 <malloc>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6268      	str	r0, [r5, #36]	; 0x24
 8008ec2:	b920      	cbnz	r0, 8008ece <_dtoa_r+0x2e>
 8008ec4:	4ba8      	ldr	r3, [pc, #672]	; (8009168 <_dtoa_r+0x2c8>)
 8008ec6:	21ea      	movs	r1, #234	; 0xea
 8008ec8:	48a8      	ldr	r0, [pc, #672]	; (800916c <_dtoa_r+0x2cc>)
 8008eca:	f002 fc5f 	bl	800b78c <__assert_func>
 8008ece:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ed2:	6004      	str	r4, [r0, #0]
 8008ed4:	60c4      	str	r4, [r0, #12]
 8008ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ed8:	6819      	ldr	r1, [r3, #0]
 8008eda:	b151      	cbz	r1, 8008ef2 <_dtoa_r+0x52>
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	604a      	str	r2, [r1, #4]
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	4093      	lsls	r3, r2
 8008ee4:	608b      	str	r3, [r1, #8]
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f001 fba6 	bl	800a638 <_Bfree>
 8008eec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	1e3b      	subs	r3, r7, #0
 8008ef4:	bfb9      	ittee	lt
 8008ef6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008efa:	9305      	strlt	r3, [sp, #20]
 8008efc:	2300      	movge	r3, #0
 8008efe:	f8c8 3000 	strge.w	r3, [r8]
 8008f02:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008f06:	4b9a      	ldr	r3, [pc, #616]	; (8009170 <_dtoa_r+0x2d0>)
 8008f08:	bfbc      	itt	lt
 8008f0a:	2201      	movlt	r2, #1
 8008f0c:	f8c8 2000 	strlt.w	r2, [r8]
 8008f10:	ea33 0309 	bics.w	r3, r3, r9
 8008f14:	d119      	bne.n	8008f4a <_dtoa_r+0xaa>
 8008f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f18:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f22:	4333      	orrs	r3, r6
 8008f24:	f000 8580 	beq.w	8009a28 <_dtoa_r+0xb88>
 8008f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f2a:	b953      	cbnz	r3, 8008f42 <_dtoa_r+0xa2>
 8008f2c:	4b91      	ldr	r3, [pc, #580]	; (8009174 <_dtoa_r+0x2d4>)
 8008f2e:	e022      	b.n	8008f76 <_dtoa_r+0xd6>
 8008f30:	4b91      	ldr	r3, [pc, #580]	; (8009178 <_dtoa_r+0x2d8>)
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	3308      	adds	r3, #8
 8008f36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	9803      	ldr	r0, [sp, #12]
 8008f3c:	b019      	add	sp, #100	; 0x64
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	4b8c      	ldr	r3, [pc, #560]	; (8009174 <_dtoa_r+0x2d4>)
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	3303      	adds	r3, #3
 8008f48:	e7f5      	b.n	8008f36 <_dtoa_r+0x96>
 8008f4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f4e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f56:	2200      	movs	r2, #0
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f7f7 fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 8008f5e:	4680      	mov	r8, r0
 8008f60:	b158      	cbz	r0, 8008f7a <_dtoa_r+0xda>
 8008f62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f64:	2301      	movs	r3, #1
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8559 	beq.w	8009a22 <_dtoa_r+0xb82>
 8008f70:	4882      	ldr	r0, [pc, #520]	; (800917c <_dtoa_r+0x2dc>)
 8008f72:	6018      	str	r0, [r3, #0]
 8008f74:	1e43      	subs	r3, r0, #1
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	e7df      	b.n	8008f3a <_dtoa_r+0x9a>
 8008f7a:	ab16      	add	r3, sp, #88	; 0x58
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	ab17      	add	r3, sp, #92	; 0x5c
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	4628      	mov	r0, r5
 8008f84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f88:	f001 fefc 	bl	800ad84 <__d2b>
 8008f8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008f90:	4683      	mov	fp, r0
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	d07e      	beq.n	8009094 <_dtoa_r+0x1f4>
 8008f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f98:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008fa8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008fac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008fb0:	4b73      	ldr	r3, [pc, #460]	; (8009180 <_dtoa_r+0x2e0>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7f7 f988 	bl	80002c8 <__aeabi_dsub>
 8008fb8:	a365      	add	r3, pc, #404	; (adr r3, 8009150 <_dtoa_r+0x2b0>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 fb3b 	bl	8000638 <__aeabi_dmul>
 8008fc2:	a365      	add	r3, pc, #404	; (adr r3, 8009158 <_dtoa_r+0x2b8>)
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f7f7 f980 	bl	80002cc <__adddf3>
 8008fcc:	4606      	mov	r6, r0
 8008fce:	4620      	mov	r0, r4
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	f7f7 fac7 	bl	8000564 <__aeabi_i2d>
 8008fd6:	a362      	add	r3, pc, #392	; (adr r3, 8009160 <_dtoa_r+0x2c0>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fb2c 	bl	8000638 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	f7f7 f970 	bl	80002cc <__adddf3>
 8008fec:	4606      	mov	r6, r0
 8008fee:	460f      	mov	r7, r1
 8008ff0:	f7f7 fdd2 	bl	8000b98 <__aeabi_d2iz>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	f7f7 fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8009002:	b148      	cbz	r0, 8009018 <_dtoa_r+0x178>
 8009004:	4650      	mov	r0, sl
 8009006:	f7f7 faad 	bl	8000564 <__aeabi_i2d>
 800900a:	4632      	mov	r2, r6
 800900c:	463b      	mov	r3, r7
 800900e:	f7f7 fd7b 	bl	8000b08 <__aeabi_dcmpeq>
 8009012:	b908      	cbnz	r0, 8009018 <_dtoa_r+0x178>
 8009014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009018:	f1ba 0f16 	cmp.w	sl, #22
 800901c:	d857      	bhi.n	80090ce <_dtoa_r+0x22e>
 800901e:	4b59      	ldr	r3, [pc, #356]	; (8009184 <_dtoa_r+0x2e4>)
 8009020:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800902c:	f7f7 fd76 	bl	8000b1c <__aeabi_dcmplt>
 8009030:	2800      	cmp	r0, #0
 8009032:	d04e      	beq.n	80090d2 <_dtoa_r+0x232>
 8009034:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009038:	2300      	movs	r3, #0
 800903a:	930f      	str	r3, [sp, #60]	; 0x3c
 800903c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800903e:	1b1c      	subs	r4, r3, r4
 8009040:	1e63      	subs	r3, r4, #1
 8009042:	9309      	str	r3, [sp, #36]	; 0x24
 8009044:	bf45      	ittet	mi
 8009046:	f1c4 0301 	rsbmi	r3, r4, #1
 800904a:	9306      	strmi	r3, [sp, #24]
 800904c:	2300      	movpl	r3, #0
 800904e:	2300      	movmi	r3, #0
 8009050:	bf4c      	ite	mi
 8009052:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009054:	9306      	strpl	r3, [sp, #24]
 8009056:	f1ba 0f00 	cmp.w	sl, #0
 800905a:	db3c      	blt.n	80090d6 <_dtoa_r+0x236>
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009062:	4453      	add	r3, sl
 8009064:	9309      	str	r3, [sp, #36]	; 0x24
 8009066:	2300      	movs	r3, #0
 8009068:	930a      	str	r3, [sp, #40]	; 0x28
 800906a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800906c:	2b09      	cmp	r3, #9
 800906e:	f200 808d 	bhi.w	800918c <_dtoa_r+0x2ec>
 8009072:	2b05      	cmp	r3, #5
 8009074:	bfc4      	itt	gt
 8009076:	3b04      	subgt	r3, #4
 8009078:	9322      	strgt	r3, [sp, #136]	; 0x88
 800907a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800907c:	f1a3 0302 	sub.w	r3, r3, #2
 8009080:	bfcc      	ite	gt
 8009082:	2400      	movgt	r4, #0
 8009084:	2401      	movle	r4, #1
 8009086:	2b03      	cmp	r3, #3
 8009088:	f200 808c 	bhi.w	80091a4 <_dtoa_r+0x304>
 800908c:	e8df f003 	tbb	[pc, r3]
 8009090:	5b4d4f2d 	.word	0x5b4d4f2d
 8009094:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009098:	441c      	add	r4, r3
 800909a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800909e:	2b20      	cmp	r3, #32
 80090a0:	bfc3      	ittte	gt
 80090a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090a6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80090aa:	fa09 f303 	lslgt.w	r3, r9, r3
 80090ae:	f1c3 0320 	rsble	r3, r3, #32
 80090b2:	bfc6      	itte	gt
 80090b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090b8:	4318      	orrgt	r0, r3
 80090ba:	fa06 f003 	lslle.w	r0, r6, r3
 80090be:	f7f7 fa41 	bl	8000544 <__aeabi_ui2d>
 80090c2:	2301      	movs	r3, #1
 80090c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80090c8:	3c01      	subs	r4, #1
 80090ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80090cc:	e770      	b.n	8008fb0 <_dtoa_r+0x110>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e7b3      	b.n	800903a <_dtoa_r+0x19a>
 80090d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80090d4:	e7b2      	b.n	800903c <_dtoa_r+0x19c>
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	eba3 030a 	sub.w	r3, r3, sl
 80090dc:	9306      	str	r3, [sp, #24]
 80090de:	f1ca 0300 	rsb	r3, sl, #0
 80090e2:	930a      	str	r3, [sp, #40]	; 0x28
 80090e4:	2300      	movs	r3, #0
 80090e6:	930e      	str	r3, [sp, #56]	; 0x38
 80090e8:	e7bf      	b.n	800906a <_dtoa_r+0x1ca>
 80090ea:	2300      	movs	r3, #0
 80090ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc5a      	bgt.n	80091aa <_dtoa_r+0x30a>
 80090f4:	f04f 0901 	mov.w	r9, #1
 80090f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80090fc:	464b      	mov	r3, r9
 80090fe:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009102:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009104:	2200      	movs	r2, #0
 8009106:	6042      	str	r2, [r0, #4]
 8009108:	2204      	movs	r2, #4
 800910a:	f102 0614 	add.w	r6, r2, #20
 800910e:	429e      	cmp	r6, r3
 8009110:	6841      	ldr	r1, [r0, #4]
 8009112:	d950      	bls.n	80091b6 <_dtoa_r+0x316>
 8009114:	4628      	mov	r0, r5
 8009116:	f001 fa4f 	bl	800a5b8 <_Balloc>
 800911a:	9003      	str	r0, [sp, #12]
 800911c:	2800      	cmp	r0, #0
 800911e:	d14e      	bne.n	80091be <_dtoa_r+0x31e>
 8009120:	4b19      	ldr	r3, [pc, #100]	; (8009188 <_dtoa_r+0x2e8>)
 8009122:	4602      	mov	r2, r0
 8009124:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009128:	e6ce      	b.n	8008ec8 <_dtoa_r+0x28>
 800912a:	2301      	movs	r3, #1
 800912c:	e7de      	b.n	80090ec <_dtoa_r+0x24c>
 800912e:	2300      	movs	r3, #0
 8009130:	930b      	str	r3, [sp, #44]	; 0x2c
 8009132:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009134:	eb0a 0903 	add.w	r9, sl, r3
 8009138:	f109 0301 	add.w	r3, r9, #1
 800913c:	2b01      	cmp	r3, #1
 800913e:	9308      	str	r3, [sp, #32]
 8009140:	bfb8      	it	lt
 8009142:	2301      	movlt	r3, #1
 8009144:	e7dd      	b.n	8009102 <_dtoa_r+0x262>
 8009146:	2301      	movs	r3, #1
 8009148:	e7f2      	b.n	8009130 <_dtoa_r+0x290>
 800914a:	bf00      	nop
 800914c:	f3af 8000 	nop.w
 8009150:	636f4361 	.word	0x636f4361
 8009154:	3fd287a7 	.word	0x3fd287a7
 8009158:	8b60c8b3 	.word	0x8b60c8b3
 800915c:	3fc68a28 	.word	0x3fc68a28
 8009160:	509f79fb 	.word	0x509f79fb
 8009164:	3fd34413 	.word	0x3fd34413
 8009168:	0800bd1e 	.word	0x0800bd1e
 800916c:	0800bd35 	.word	0x0800bd35
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	0800bd1a 	.word	0x0800bd1a
 8009178:	0800bd11 	.word	0x0800bd11
 800917c:	0800bb9d 	.word	0x0800bb9d
 8009180:	3ff80000 	.word	0x3ff80000
 8009184:	0800bf08 	.word	0x0800bf08
 8009188:	0800bd90 	.word	0x0800bd90
 800918c:	2401      	movs	r4, #1
 800918e:	2300      	movs	r3, #0
 8009190:	9322      	str	r3, [sp, #136]	; 0x88
 8009192:	940b      	str	r4, [sp, #44]	; 0x2c
 8009194:	f04f 39ff 	mov.w	r9, #4294967295
 8009198:	2200      	movs	r2, #0
 800919a:	f8cd 9020 	str.w	r9, [sp, #32]
 800919e:	2312      	movs	r3, #18
 80091a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80091a2:	e7ae      	b.n	8009102 <_dtoa_r+0x262>
 80091a4:	2301      	movs	r3, #1
 80091a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a8:	e7f4      	b.n	8009194 <_dtoa_r+0x2f4>
 80091aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80091ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80091b2:	464b      	mov	r3, r9
 80091b4:	e7a5      	b.n	8009102 <_dtoa_r+0x262>
 80091b6:	3101      	adds	r1, #1
 80091b8:	6041      	str	r1, [r0, #4]
 80091ba:	0052      	lsls	r2, r2, #1
 80091bc:	e7a5      	b.n	800910a <_dtoa_r+0x26a>
 80091be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091c0:	9a03      	ldr	r2, [sp, #12]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	9b08      	ldr	r3, [sp, #32]
 80091c6:	2b0e      	cmp	r3, #14
 80091c8:	f200 80a8 	bhi.w	800931c <_dtoa_r+0x47c>
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	f000 80a5 	beq.w	800931c <_dtoa_r+0x47c>
 80091d2:	f1ba 0f00 	cmp.w	sl, #0
 80091d6:	dd34      	ble.n	8009242 <_dtoa_r+0x3a2>
 80091d8:	4a9a      	ldr	r2, [pc, #616]	; (8009444 <_dtoa_r+0x5a4>)
 80091da:	f00a 030f 	and.w	r3, sl, #15
 80091de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091e6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80091ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80091ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80091f2:	d016      	beq.n	8009222 <_dtoa_r+0x382>
 80091f4:	4b94      	ldr	r3, [pc, #592]	; (8009448 <_dtoa_r+0x5a8>)
 80091f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091fe:	f7f7 fb45 	bl	800088c <__aeabi_ddiv>
 8009202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009206:	f004 040f 	and.w	r4, r4, #15
 800920a:	2703      	movs	r7, #3
 800920c:	4e8e      	ldr	r6, [pc, #568]	; (8009448 <_dtoa_r+0x5a8>)
 800920e:	b954      	cbnz	r4, 8009226 <_dtoa_r+0x386>
 8009210:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009218:	f7f7 fb38 	bl	800088c <__aeabi_ddiv>
 800921c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009220:	e029      	b.n	8009276 <_dtoa_r+0x3d6>
 8009222:	2702      	movs	r7, #2
 8009224:	e7f2      	b.n	800920c <_dtoa_r+0x36c>
 8009226:	07e1      	lsls	r1, r4, #31
 8009228:	d508      	bpl.n	800923c <_dtoa_r+0x39c>
 800922a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800922e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009232:	f7f7 fa01 	bl	8000638 <__aeabi_dmul>
 8009236:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800923a:	3701      	adds	r7, #1
 800923c:	1064      	asrs	r4, r4, #1
 800923e:	3608      	adds	r6, #8
 8009240:	e7e5      	b.n	800920e <_dtoa_r+0x36e>
 8009242:	f000 80a5 	beq.w	8009390 <_dtoa_r+0x4f0>
 8009246:	f1ca 0400 	rsb	r4, sl, #0
 800924a:	4b7e      	ldr	r3, [pc, #504]	; (8009444 <_dtoa_r+0x5a4>)
 800924c:	4e7e      	ldr	r6, [pc, #504]	; (8009448 <_dtoa_r+0x5a8>)
 800924e:	f004 020f 	and.w	r2, r4, #15
 8009252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800925e:	f7f7 f9eb 	bl	8000638 <__aeabi_dmul>
 8009262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009266:	1124      	asrs	r4, r4, #4
 8009268:	2300      	movs	r3, #0
 800926a:	2702      	movs	r7, #2
 800926c:	2c00      	cmp	r4, #0
 800926e:	f040 8084 	bne.w	800937a <_dtoa_r+0x4da>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1d2      	bne.n	800921c <_dtoa_r+0x37c>
 8009276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 808b 	beq.w	8009394 <_dtoa_r+0x4f4>
 800927e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009282:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009286:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800928a:	4b70      	ldr	r3, [pc, #448]	; (800944c <_dtoa_r+0x5ac>)
 800928c:	2200      	movs	r2, #0
 800928e:	f7f7 fc45 	bl	8000b1c <__aeabi_dcmplt>
 8009292:	2800      	cmp	r0, #0
 8009294:	d07e      	beq.n	8009394 <_dtoa_r+0x4f4>
 8009296:	9b08      	ldr	r3, [sp, #32]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d07b      	beq.n	8009394 <_dtoa_r+0x4f4>
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	dd38      	ble.n	8009314 <_dtoa_r+0x474>
 80092a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092a6:	4b6a      	ldr	r3, [pc, #424]	; (8009450 <_dtoa_r+0x5b0>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f9c5 	bl	8000638 <__aeabi_dmul>
 80092ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b2:	f10a 38ff 	add.w	r8, sl, #4294967295
 80092b6:	3701      	adds	r7, #1
 80092b8:	464c      	mov	r4, r9
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7f7 f952 	bl	8000564 <__aeabi_i2d>
 80092c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c4:	f7f7 f9b8 	bl	8000638 <__aeabi_dmul>
 80092c8:	4b62      	ldr	r3, [pc, #392]	; (8009454 <_dtoa_r+0x5b4>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	f7f6 fffe 	bl	80002cc <__adddf3>
 80092d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092d8:	9611      	str	r6, [sp, #68]	; 0x44
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d15d      	bne.n	800939a <_dtoa_r+0x4fa>
 80092de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e2:	4b5d      	ldr	r3, [pc, #372]	; (8009458 <_dtoa_r+0x5b8>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	f7f6 ffef 	bl	80002c8 <__aeabi_dsub>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092f4:	4633      	mov	r3, r6
 80092f6:	f7f7 fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f040 829c 	bne.w	8009838 <_dtoa_r+0x998>
 8009300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009306:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800930a:	f7f7 fc07 	bl	8000b1c <__aeabi_dcmplt>
 800930e:	2800      	cmp	r0, #0
 8009310:	f040 8290 	bne.w	8009834 <_dtoa_r+0x994>
 8009314:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009318:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800931c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931e:	2b00      	cmp	r3, #0
 8009320:	f2c0 8152 	blt.w	80095c8 <_dtoa_r+0x728>
 8009324:	f1ba 0f0e 	cmp.w	sl, #14
 8009328:	f300 814e 	bgt.w	80095c8 <_dtoa_r+0x728>
 800932c:	4b45      	ldr	r3, [pc, #276]	; (8009444 <_dtoa_r+0x5a4>)
 800932e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009336:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800933a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800933c:	2b00      	cmp	r3, #0
 800933e:	f280 80db 	bge.w	80094f8 <_dtoa_r+0x658>
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f300 80d7 	bgt.w	80094f8 <_dtoa_r+0x658>
 800934a:	f040 8272 	bne.w	8009832 <_dtoa_r+0x992>
 800934e:	4b42      	ldr	r3, [pc, #264]	; (8009458 <_dtoa_r+0x5b8>)
 8009350:	2200      	movs	r2, #0
 8009352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009356:	f7f7 f96f 	bl	8000638 <__aeabi_dmul>
 800935a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935e:	f7f7 fbf1 	bl	8000b44 <__aeabi_dcmpge>
 8009362:	9c08      	ldr	r4, [sp, #32]
 8009364:	4626      	mov	r6, r4
 8009366:	2800      	cmp	r0, #0
 8009368:	f040 8248 	bne.w	80097fc <_dtoa_r+0x95c>
 800936c:	9f03      	ldr	r7, [sp, #12]
 800936e:	2331      	movs	r3, #49	; 0x31
 8009370:	f807 3b01 	strb.w	r3, [r7], #1
 8009374:	f10a 0a01 	add.w	sl, sl, #1
 8009378:	e244      	b.n	8009804 <_dtoa_r+0x964>
 800937a:	07e2      	lsls	r2, r4, #31
 800937c:	d505      	bpl.n	800938a <_dtoa_r+0x4ea>
 800937e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009382:	f7f7 f959 	bl	8000638 <__aeabi_dmul>
 8009386:	3701      	adds	r7, #1
 8009388:	2301      	movs	r3, #1
 800938a:	1064      	asrs	r4, r4, #1
 800938c:	3608      	adds	r6, #8
 800938e:	e76d      	b.n	800926c <_dtoa_r+0x3cc>
 8009390:	2702      	movs	r7, #2
 8009392:	e770      	b.n	8009276 <_dtoa_r+0x3d6>
 8009394:	9c08      	ldr	r4, [sp, #32]
 8009396:	46d0      	mov	r8, sl
 8009398:	e78f      	b.n	80092ba <_dtoa_r+0x41a>
 800939a:	9903      	ldr	r1, [sp, #12]
 800939c:	4b29      	ldr	r3, [pc, #164]	; (8009444 <_dtoa_r+0x5a4>)
 800939e:	4421      	add	r1, r4
 80093a0:	9112      	str	r1, [sp, #72]	; 0x48
 80093a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80093ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	d055      	beq.n	8009460 <_dtoa_r+0x5c0>
 80093b4:	4929      	ldr	r1, [pc, #164]	; (800945c <_dtoa_r+0x5bc>)
 80093b6:	2000      	movs	r0, #0
 80093b8:	f7f7 fa68 	bl	800088c <__aeabi_ddiv>
 80093bc:	463b      	mov	r3, r7
 80093be:	4632      	mov	r2, r6
 80093c0:	f7f6 ff82 	bl	80002c8 <__aeabi_dsub>
 80093c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093c8:	9f03      	ldr	r7, [sp, #12]
 80093ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093ce:	f7f7 fbe3 	bl	8000b98 <__aeabi_d2iz>
 80093d2:	4604      	mov	r4, r0
 80093d4:	f7f7 f8c6 	bl	8000564 <__aeabi_i2d>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e0:	f7f6 ff72 	bl	80002c8 <__aeabi_dsub>
 80093e4:	3430      	adds	r4, #48	; 0x30
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093ee:	f807 4b01 	strb.w	r4, [r7], #1
 80093f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093f6:	f7f7 fb91 	bl	8000b1c <__aeabi_dcmplt>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d174      	bne.n	80094e8 <_dtoa_r+0x648>
 80093fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009402:	4912      	ldr	r1, [pc, #72]	; (800944c <_dtoa_r+0x5ac>)
 8009404:	2000      	movs	r0, #0
 8009406:	f7f6 ff5f 	bl	80002c8 <__aeabi_dsub>
 800940a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800940e:	f7f7 fb85 	bl	8000b1c <__aeabi_dcmplt>
 8009412:	2800      	cmp	r0, #0
 8009414:	f040 80b7 	bne.w	8009586 <_dtoa_r+0x6e6>
 8009418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800941a:	429f      	cmp	r7, r3
 800941c:	f43f af7a 	beq.w	8009314 <_dtoa_r+0x474>
 8009420:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009424:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <_dtoa_r+0x5b0>)
 8009426:	2200      	movs	r2, #0
 8009428:	f7f7 f906 	bl	8000638 <__aeabi_dmul>
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <_dtoa_r+0x5b0>)
 800942e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009432:	2200      	movs	r2, #0
 8009434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009438:	f7f7 f8fe 	bl	8000638 <__aeabi_dmul>
 800943c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009440:	e7c3      	b.n	80093ca <_dtoa_r+0x52a>
 8009442:	bf00      	nop
 8009444:	0800bf08 	.word	0x0800bf08
 8009448:	0800bee0 	.word	0x0800bee0
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	40240000 	.word	0x40240000
 8009454:	401c0000 	.word	0x401c0000
 8009458:	40140000 	.word	0x40140000
 800945c:	3fe00000 	.word	0x3fe00000
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 f8e8 	bl	8000638 <__aeabi_dmul>
 8009468:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800946c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946e:	9c03      	ldr	r4, [sp, #12]
 8009470:	9314      	str	r3, [sp, #80]	; 0x50
 8009472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009476:	f7f7 fb8f 	bl	8000b98 <__aeabi_d2iz>
 800947a:	9015      	str	r0, [sp, #84]	; 0x54
 800947c:	f7f7 f872 	bl	8000564 <__aeabi_i2d>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009488:	f7f6 ff1e 	bl	80002c8 <__aeabi_dsub>
 800948c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800948e:	3330      	adds	r3, #48	; 0x30
 8009490:	f804 3b01 	strb.w	r3, [r4], #1
 8009494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009496:	429c      	cmp	r4, r3
 8009498:	4606      	mov	r6, r0
 800949a:	460f      	mov	r7, r1
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	d124      	bne.n	80094ec <_dtoa_r+0x64c>
 80094a2:	4ba4      	ldr	r3, [pc, #656]	; (8009734 <_dtoa_r+0x894>)
 80094a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094a8:	f7f6 ff10 	bl	80002cc <__adddf3>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 fb50 	bl	8000b58 <__aeabi_dcmpgt>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d163      	bne.n	8009584 <_dtoa_r+0x6e4>
 80094bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094c0:	499c      	ldr	r1, [pc, #624]	; (8009734 <_dtoa_r+0x894>)
 80094c2:	2000      	movs	r0, #0
 80094c4:	f7f6 ff00 	bl	80002c8 <__aeabi_dsub>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4630      	mov	r0, r6
 80094ce:	4639      	mov	r1, r7
 80094d0:	f7f7 fb24 	bl	8000b1c <__aeabi_dcmplt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f af1d 	beq.w	8009314 <_dtoa_r+0x474>
 80094da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80094dc:	1e7b      	subs	r3, r7, #1
 80094de:	9314      	str	r3, [sp, #80]	; 0x50
 80094e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80094e4:	2b30      	cmp	r3, #48	; 0x30
 80094e6:	d0f8      	beq.n	80094da <_dtoa_r+0x63a>
 80094e8:	46c2      	mov	sl, r8
 80094ea:	e03b      	b.n	8009564 <_dtoa_r+0x6c4>
 80094ec:	4b92      	ldr	r3, [pc, #584]	; (8009738 <_dtoa_r+0x898>)
 80094ee:	f7f7 f8a3 	bl	8000638 <__aeabi_dmul>
 80094f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094f6:	e7bc      	b.n	8009472 <_dtoa_r+0x5d2>
 80094f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80094fc:	9f03      	ldr	r7, [sp, #12]
 80094fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 f9c1 	bl	800088c <__aeabi_ddiv>
 800950a:	f7f7 fb45 	bl	8000b98 <__aeabi_d2iz>
 800950e:	4604      	mov	r4, r0
 8009510:	f7f7 f828 	bl	8000564 <__aeabi_i2d>
 8009514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009518:	f7f7 f88e 	bl	8000638 <__aeabi_dmul>
 800951c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4640      	mov	r0, r8
 8009526:	4649      	mov	r1, r9
 8009528:	f7f6 fece 	bl	80002c8 <__aeabi_dsub>
 800952c:	f807 6b01 	strb.w	r6, [r7], #1
 8009530:	9e03      	ldr	r6, [sp, #12]
 8009532:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009536:	1bbe      	subs	r6, r7, r6
 8009538:	45b4      	cmp	ip, r6
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	d136      	bne.n	80095ae <_dtoa_r+0x70e>
 8009540:	f7f6 fec4 	bl	80002cc <__adddf3>
 8009544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009548:	4680      	mov	r8, r0
 800954a:	4689      	mov	r9, r1
 800954c:	f7f7 fb04 	bl	8000b58 <__aeabi_dcmpgt>
 8009550:	bb58      	cbnz	r0, 80095aa <_dtoa_r+0x70a>
 8009552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009556:	4640      	mov	r0, r8
 8009558:	4649      	mov	r1, r9
 800955a:	f7f7 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800955e:	b108      	cbz	r0, 8009564 <_dtoa_r+0x6c4>
 8009560:	07e1      	lsls	r1, r4, #31
 8009562:	d422      	bmi.n	80095aa <_dtoa_r+0x70a>
 8009564:	4628      	mov	r0, r5
 8009566:	4659      	mov	r1, fp
 8009568:	f001 f866 	bl	800a638 <_Bfree>
 800956c:	2300      	movs	r3, #0
 800956e:	703b      	strb	r3, [r7, #0]
 8009570:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009572:	f10a 0001 	add.w	r0, sl, #1
 8009576:	6018      	str	r0, [r3, #0]
 8009578:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800957a:	2b00      	cmp	r3, #0
 800957c:	f43f acdd 	beq.w	8008f3a <_dtoa_r+0x9a>
 8009580:	601f      	str	r7, [r3, #0]
 8009582:	e4da      	b.n	8008f3a <_dtoa_r+0x9a>
 8009584:	4627      	mov	r7, r4
 8009586:	463b      	mov	r3, r7
 8009588:	461f      	mov	r7, r3
 800958a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800958e:	2a39      	cmp	r2, #57	; 0x39
 8009590:	d107      	bne.n	80095a2 <_dtoa_r+0x702>
 8009592:	9a03      	ldr	r2, [sp, #12]
 8009594:	429a      	cmp	r2, r3
 8009596:	d1f7      	bne.n	8009588 <_dtoa_r+0x6e8>
 8009598:	9903      	ldr	r1, [sp, #12]
 800959a:	2230      	movs	r2, #48	; 0x30
 800959c:	f108 0801 	add.w	r8, r8, #1
 80095a0:	700a      	strb	r2, [r1, #0]
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	3201      	adds	r2, #1
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e79e      	b.n	80094e8 <_dtoa_r+0x648>
 80095aa:	46d0      	mov	r8, sl
 80095ac:	e7eb      	b.n	8009586 <_dtoa_r+0x6e6>
 80095ae:	4b62      	ldr	r3, [pc, #392]	; (8009738 <_dtoa_r+0x898>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	f7f7 f841 	bl	8000638 <__aeabi_dmul>
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4680      	mov	r8, r0
 80095bc:	4689      	mov	r9, r1
 80095be:	f7f7 faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d09b      	beq.n	80094fe <_dtoa_r+0x65e>
 80095c6:	e7cd      	b.n	8009564 <_dtoa_r+0x6c4>
 80095c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	f000 80d0 	beq.w	8009770 <_dtoa_r+0x8d0>
 80095d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095d2:	2a01      	cmp	r2, #1
 80095d4:	f300 80b2 	bgt.w	800973c <_dtoa_r+0x89c>
 80095d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095da:	2a00      	cmp	r2, #0
 80095dc:	f000 80a6 	beq.w	800972c <_dtoa_r+0x88c>
 80095e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095e6:	9f06      	ldr	r7, [sp, #24]
 80095e8:	9a06      	ldr	r2, [sp, #24]
 80095ea:	441a      	add	r2, r3
 80095ec:	9206      	str	r2, [sp, #24]
 80095ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f0:	2101      	movs	r1, #1
 80095f2:	441a      	add	r2, r3
 80095f4:	4628      	mov	r0, r5
 80095f6:	9209      	str	r2, [sp, #36]	; 0x24
 80095f8:	f001 f91e 	bl	800a838 <__i2b>
 80095fc:	4606      	mov	r6, r0
 80095fe:	2f00      	cmp	r7, #0
 8009600:	dd0c      	ble.n	800961c <_dtoa_r+0x77c>
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd09      	ble.n	800961c <_dtoa_r+0x77c>
 8009608:	42bb      	cmp	r3, r7
 800960a:	9a06      	ldr	r2, [sp, #24]
 800960c:	bfa8      	it	ge
 800960e:	463b      	movge	r3, r7
 8009610:	1ad2      	subs	r2, r2, r3
 8009612:	9206      	str	r2, [sp, #24]
 8009614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009616:	1aff      	subs	r7, r7, r3
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	9309      	str	r3, [sp, #36]	; 0x24
 800961c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961e:	b1f3      	cbz	r3, 800965e <_dtoa_r+0x7be>
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 80a8 	beq.w	8009778 <_dtoa_r+0x8d8>
 8009628:	2c00      	cmp	r4, #0
 800962a:	dd10      	ble.n	800964e <_dtoa_r+0x7ae>
 800962c:	4631      	mov	r1, r6
 800962e:	4622      	mov	r2, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f001 f9bf 	bl	800a9b4 <__pow5mult>
 8009636:	465a      	mov	r2, fp
 8009638:	4601      	mov	r1, r0
 800963a:	4606      	mov	r6, r0
 800963c:	4628      	mov	r0, r5
 800963e:	f001 f911 	bl	800a864 <__multiply>
 8009642:	4659      	mov	r1, fp
 8009644:	4680      	mov	r8, r0
 8009646:	4628      	mov	r0, r5
 8009648:	f000 fff6 	bl	800a638 <_Bfree>
 800964c:	46c3      	mov	fp, r8
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	1b1a      	subs	r2, r3, r4
 8009652:	d004      	beq.n	800965e <_dtoa_r+0x7be>
 8009654:	4659      	mov	r1, fp
 8009656:	4628      	mov	r0, r5
 8009658:	f001 f9ac 	bl	800a9b4 <__pow5mult>
 800965c:	4683      	mov	fp, r0
 800965e:	2101      	movs	r1, #1
 8009660:	4628      	mov	r0, r5
 8009662:	f001 f8e9 	bl	800a838 <__i2b>
 8009666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	f340 8086 	ble.w	800977c <_dtoa_r+0x8dc>
 8009670:	461a      	mov	r2, r3
 8009672:	4601      	mov	r1, r0
 8009674:	4628      	mov	r0, r5
 8009676:	f001 f99d 	bl	800a9b4 <__pow5mult>
 800967a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800967c:	2b01      	cmp	r3, #1
 800967e:	4604      	mov	r4, r0
 8009680:	dd7f      	ble.n	8009782 <_dtoa_r+0x8e2>
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800968c:	6918      	ldr	r0, [r3, #16]
 800968e:	f001 f885 	bl	800a79c <__hi0bits>
 8009692:	f1c0 0020 	rsb	r0, r0, #32
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	4418      	add	r0, r3
 800969a:	f010 001f 	ands.w	r0, r0, #31
 800969e:	f000 8092 	beq.w	80097c6 <_dtoa_r+0x926>
 80096a2:	f1c0 0320 	rsb	r3, r0, #32
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	f340 808a 	ble.w	80097c0 <_dtoa_r+0x920>
 80096ac:	f1c0 001c 	rsb	r0, r0, #28
 80096b0:	9b06      	ldr	r3, [sp, #24]
 80096b2:	4403      	add	r3, r0
 80096b4:	9306      	str	r3, [sp, #24]
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	4403      	add	r3, r0
 80096ba:	4407      	add	r7, r0
 80096bc:	9309      	str	r3, [sp, #36]	; 0x24
 80096be:	9b06      	ldr	r3, [sp, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd05      	ble.n	80096d0 <_dtoa_r+0x830>
 80096c4:	4659      	mov	r1, fp
 80096c6:	461a      	mov	r2, r3
 80096c8:	4628      	mov	r0, r5
 80096ca:	f001 f9cd 	bl	800aa68 <__lshift>
 80096ce:	4683      	mov	fp, r0
 80096d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dd05      	ble.n	80096e2 <_dtoa_r+0x842>
 80096d6:	4621      	mov	r1, r4
 80096d8:	461a      	mov	r2, r3
 80096da:	4628      	mov	r0, r5
 80096dc:	f001 f9c4 	bl	800aa68 <__lshift>
 80096e0:	4604      	mov	r4, r0
 80096e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d070      	beq.n	80097ca <_dtoa_r+0x92a>
 80096e8:	4621      	mov	r1, r4
 80096ea:	4658      	mov	r0, fp
 80096ec:	f001 fa2c 	bl	800ab48 <__mcmp>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	da6a      	bge.n	80097ca <_dtoa_r+0x92a>
 80096f4:	2300      	movs	r3, #0
 80096f6:	4659      	mov	r1, fp
 80096f8:	220a      	movs	r2, #10
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 ffbe 	bl	800a67c <__multadd>
 8009700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009706:	4683      	mov	fp, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8194 	beq.w	8009a36 <_dtoa_r+0xb96>
 800970e:	4631      	mov	r1, r6
 8009710:	2300      	movs	r3, #0
 8009712:	220a      	movs	r2, #10
 8009714:	4628      	mov	r0, r5
 8009716:	f000 ffb1 	bl	800a67c <__multadd>
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	4606      	mov	r6, r0
 8009720:	f300 8093 	bgt.w	800984a <_dtoa_r+0x9aa>
 8009724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009726:	2b02      	cmp	r3, #2
 8009728:	dc57      	bgt.n	80097da <_dtoa_r+0x93a>
 800972a:	e08e      	b.n	800984a <_dtoa_r+0x9aa>
 800972c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800972e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009732:	e757      	b.n	80095e4 <_dtoa_r+0x744>
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	40240000 	.word	0x40240000
 800973c:	9b08      	ldr	r3, [sp, #32]
 800973e:	1e5c      	subs	r4, r3, #1
 8009740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009742:	42a3      	cmp	r3, r4
 8009744:	bfbf      	itttt	lt
 8009746:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009748:	940a      	strlt	r4, [sp, #40]	; 0x28
 800974a:	1ae2      	sublt	r2, r4, r3
 800974c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800974e:	bfb6      	itet	lt
 8009750:	189b      	addlt	r3, r3, r2
 8009752:	1b1c      	subge	r4, r3, r4
 8009754:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	bfb8      	it	lt
 800975a:	2400      	movlt	r4, #0
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfb9      	ittee	lt
 8009760:	9b06      	ldrlt	r3, [sp, #24]
 8009762:	9a08      	ldrlt	r2, [sp, #32]
 8009764:	9f06      	ldrge	r7, [sp, #24]
 8009766:	9b08      	ldrge	r3, [sp, #32]
 8009768:	bfbc      	itt	lt
 800976a:	1a9f      	sublt	r7, r3, r2
 800976c:	2300      	movlt	r3, #0
 800976e:	e73b      	b.n	80095e8 <_dtoa_r+0x748>
 8009770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009772:	9f06      	ldr	r7, [sp, #24]
 8009774:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009776:	e742      	b.n	80095fe <_dtoa_r+0x75e>
 8009778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800977a:	e76b      	b.n	8009654 <_dtoa_r+0x7b4>
 800977c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800977e:	2b01      	cmp	r3, #1
 8009780:	dc19      	bgt.n	80097b6 <_dtoa_r+0x916>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	b9bb      	cbnz	r3, 80097b6 <_dtoa_r+0x916>
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800978c:	b99b      	cbnz	r3, 80097b6 <_dtoa_r+0x916>
 800978e:	9b05      	ldr	r3, [sp, #20]
 8009790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009794:	0d1b      	lsrs	r3, r3, #20
 8009796:	051b      	lsls	r3, r3, #20
 8009798:	b183      	cbz	r3, 80097bc <_dtoa_r+0x91c>
 800979a:	9b06      	ldr	r3, [sp, #24]
 800979c:	3301      	adds	r3, #1
 800979e:	9306      	str	r3, [sp, #24]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	3301      	adds	r3, #1
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	f04f 0801 	mov.w	r8, #1
 80097aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f47f af6a 	bne.w	8009686 <_dtoa_r+0x7e6>
 80097b2:	2001      	movs	r0, #1
 80097b4:	e76f      	b.n	8009696 <_dtoa_r+0x7f6>
 80097b6:	f04f 0800 	mov.w	r8, #0
 80097ba:	e7f6      	b.n	80097aa <_dtoa_r+0x90a>
 80097bc:	4698      	mov	r8, r3
 80097be:	e7f4      	b.n	80097aa <_dtoa_r+0x90a>
 80097c0:	f43f af7d 	beq.w	80096be <_dtoa_r+0x81e>
 80097c4:	4618      	mov	r0, r3
 80097c6:	301c      	adds	r0, #28
 80097c8:	e772      	b.n	80096b0 <_dtoa_r+0x810>
 80097ca:	9b08      	ldr	r3, [sp, #32]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dc36      	bgt.n	800983e <_dtoa_r+0x99e>
 80097d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	dd33      	ble.n	800983e <_dtoa_r+0x99e>
 80097d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	d10d      	bne.n	80097fc <_dtoa_r+0x95c>
 80097e0:	4621      	mov	r1, r4
 80097e2:	464b      	mov	r3, r9
 80097e4:	2205      	movs	r2, #5
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 ff48 	bl	800a67c <__multadd>
 80097ec:	4601      	mov	r1, r0
 80097ee:	4604      	mov	r4, r0
 80097f0:	4658      	mov	r0, fp
 80097f2:	f001 f9a9 	bl	800ab48 <__mcmp>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f73f adb8 	bgt.w	800936c <_dtoa_r+0x4cc>
 80097fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097fe:	9f03      	ldr	r7, [sp, #12]
 8009800:	ea6f 0a03 	mvn.w	sl, r3
 8009804:	f04f 0800 	mov.w	r8, #0
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 ff14 	bl	800a638 <_Bfree>
 8009810:	2e00      	cmp	r6, #0
 8009812:	f43f aea7 	beq.w	8009564 <_dtoa_r+0x6c4>
 8009816:	f1b8 0f00 	cmp.w	r8, #0
 800981a:	d005      	beq.n	8009828 <_dtoa_r+0x988>
 800981c:	45b0      	cmp	r8, r6
 800981e:	d003      	beq.n	8009828 <_dtoa_r+0x988>
 8009820:	4641      	mov	r1, r8
 8009822:	4628      	mov	r0, r5
 8009824:	f000 ff08 	bl	800a638 <_Bfree>
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	f000 ff04 	bl	800a638 <_Bfree>
 8009830:	e698      	b.n	8009564 <_dtoa_r+0x6c4>
 8009832:	2400      	movs	r4, #0
 8009834:	4626      	mov	r6, r4
 8009836:	e7e1      	b.n	80097fc <_dtoa_r+0x95c>
 8009838:	46c2      	mov	sl, r8
 800983a:	4626      	mov	r6, r4
 800983c:	e596      	b.n	800936c <_dtoa_r+0x4cc>
 800983e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80fd 	beq.w	8009a44 <_dtoa_r+0xba4>
 800984a:	2f00      	cmp	r7, #0
 800984c:	dd05      	ble.n	800985a <_dtoa_r+0x9ba>
 800984e:	4631      	mov	r1, r6
 8009850:	463a      	mov	r2, r7
 8009852:	4628      	mov	r0, r5
 8009854:	f001 f908 	bl	800aa68 <__lshift>
 8009858:	4606      	mov	r6, r0
 800985a:	f1b8 0f00 	cmp.w	r8, #0
 800985e:	d05c      	beq.n	800991a <_dtoa_r+0xa7a>
 8009860:	6871      	ldr	r1, [r6, #4]
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fea8 	bl	800a5b8 <_Balloc>
 8009868:	4607      	mov	r7, r0
 800986a:	b928      	cbnz	r0, 8009878 <_dtoa_r+0x9d8>
 800986c:	4b80      	ldr	r3, [pc, #512]	; (8009a70 <_dtoa_r+0xbd0>)
 800986e:	4602      	mov	r2, r0
 8009870:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009874:	f7ff bb28 	b.w	8008ec8 <_dtoa_r+0x28>
 8009878:	6932      	ldr	r2, [r6, #16]
 800987a:	3202      	adds	r2, #2
 800987c:	0092      	lsls	r2, r2, #2
 800987e:	f106 010c 	add.w	r1, r6, #12
 8009882:	300c      	adds	r0, #12
 8009884:	f7fd fd92 	bl	80073ac <memcpy>
 8009888:	2201      	movs	r2, #1
 800988a:	4639      	mov	r1, r7
 800988c:	4628      	mov	r0, r5
 800988e:	f001 f8eb 	bl	800aa68 <__lshift>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	9308      	str	r3, [sp, #32]
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	444b      	add	r3, r9
 800989c:	930a      	str	r3, [sp, #40]	; 0x28
 800989e:	9b04      	ldr	r3, [sp, #16]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	46b0      	mov	r8, r6
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	4606      	mov	r6, r0
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	4621      	mov	r1, r4
 80098ae:	3b01      	subs	r3, #1
 80098b0:	4658      	mov	r0, fp
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	f7ff fa6c 	bl	8008d90 <quorem>
 80098b8:	4603      	mov	r3, r0
 80098ba:	3330      	adds	r3, #48	; 0x30
 80098bc:	9006      	str	r0, [sp, #24]
 80098be:	4641      	mov	r1, r8
 80098c0:	4658      	mov	r0, fp
 80098c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c4:	f001 f940 	bl	800ab48 <__mcmp>
 80098c8:	4632      	mov	r2, r6
 80098ca:	4681      	mov	r9, r0
 80098cc:	4621      	mov	r1, r4
 80098ce:	4628      	mov	r0, r5
 80098d0:	f001 f956 	bl	800ab80 <__mdiff>
 80098d4:	68c2      	ldr	r2, [r0, #12]
 80098d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d8:	4607      	mov	r7, r0
 80098da:	bb02      	cbnz	r2, 800991e <_dtoa_r+0xa7e>
 80098dc:	4601      	mov	r1, r0
 80098de:	4658      	mov	r0, fp
 80098e0:	f001 f932 	bl	800ab48 <__mcmp>
 80098e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e6:	4602      	mov	r2, r0
 80098e8:	4639      	mov	r1, r7
 80098ea:	4628      	mov	r0, r5
 80098ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80098f0:	f000 fea2 	bl	800a638 <_Bfree>
 80098f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098f8:	9f08      	ldr	r7, [sp, #32]
 80098fa:	ea43 0102 	orr.w	r1, r3, r2
 80098fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009900:	430b      	orrs	r3, r1
 8009902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009904:	d10d      	bne.n	8009922 <_dtoa_r+0xa82>
 8009906:	2b39      	cmp	r3, #57	; 0x39
 8009908:	d029      	beq.n	800995e <_dtoa_r+0xabe>
 800990a:	f1b9 0f00 	cmp.w	r9, #0
 800990e:	dd01      	ble.n	8009914 <_dtoa_r+0xa74>
 8009910:	9b06      	ldr	r3, [sp, #24]
 8009912:	3331      	adds	r3, #49	; 0x31
 8009914:	9a04      	ldr	r2, [sp, #16]
 8009916:	7013      	strb	r3, [r2, #0]
 8009918:	e776      	b.n	8009808 <_dtoa_r+0x968>
 800991a:	4630      	mov	r0, r6
 800991c:	e7b9      	b.n	8009892 <_dtoa_r+0x9f2>
 800991e:	2201      	movs	r2, #1
 8009920:	e7e2      	b.n	80098e8 <_dtoa_r+0xa48>
 8009922:	f1b9 0f00 	cmp.w	r9, #0
 8009926:	db06      	blt.n	8009936 <_dtoa_r+0xa96>
 8009928:	9922      	ldr	r1, [sp, #136]	; 0x88
 800992a:	ea41 0909 	orr.w	r9, r1, r9
 800992e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009930:	ea59 0101 	orrs.w	r1, r9, r1
 8009934:	d120      	bne.n	8009978 <_dtoa_r+0xad8>
 8009936:	2a00      	cmp	r2, #0
 8009938:	ddec      	ble.n	8009914 <_dtoa_r+0xa74>
 800993a:	4659      	mov	r1, fp
 800993c:	2201      	movs	r2, #1
 800993e:	4628      	mov	r0, r5
 8009940:	9308      	str	r3, [sp, #32]
 8009942:	f001 f891 	bl	800aa68 <__lshift>
 8009946:	4621      	mov	r1, r4
 8009948:	4683      	mov	fp, r0
 800994a:	f001 f8fd 	bl	800ab48 <__mcmp>
 800994e:	2800      	cmp	r0, #0
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	dc02      	bgt.n	800995a <_dtoa_r+0xaba>
 8009954:	d1de      	bne.n	8009914 <_dtoa_r+0xa74>
 8009956:	07da      	lsls	r2, r3, #31
 8009958:	d5dc      	bpl.n	8009914 <_dtoa_r+0xa74>
 800995a:	2b39      	cmp	r3, #57	; 0x39
 800995c:	d1d8      	bne.n	8009910 <_dtoa_r+0xa70>
 800995e:	9a04      	ldr	r2, [sp, #16]
 8009960:	2339      	movs	r3, #57	; 0x39
 8009962:	7013      	strb	r3, [r2, #0]
 8009964:	463b      	mov	r3, r7
 8009966:	461f      	mov	r7, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800996e:	2a39      	cmp	r2, #57	; 0x39
 8009970:	d050      	beq.n	8009a14 <_dtoa_r+0xb74>
 8009972:	3201      	adds	r2, #1
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e747      	b.n	8009808 <_dtoa_r+0x968>
 8009978:	2a00      	cmp	r2, #0
 800997a:	dd03      	ble.n	8009984 <_dtoa_r+0xae4>
 800997c:	2b39      	cmp	r3, #57	; 0x39
 800997e:	d0ee      	beq.n	800995e <_dtoa_r+0xabe>
 8009980:	3301      	adds	r3, #1
 8009982:	e7c7      	b.n	8009914 <_dtoa_r+0xa74>
 8009984:	9a08      	ldr	r2, [sp, #32]
 8009986:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009988:	f802 3c01 	strb.w	r3, [r2, #-1]
 800998c:	428a      	cmp	r2, r1
 800998e:	d02a      	beq.n	80099e6 <_dtoa_r+0xb46>
 8009990:	4659      	mov	r1, fp
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	4628      	mov	r0, r5
 8009998:	f000 fe70 	bl	800a67c <__multadd>
 800999c:	45b0      	cmp	r8, r6
 800999e:	4683      	mov	fp, r0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	f04f 020a 	mov.w	r2, #10
 80099a8:	4641      	mov	r1, r8
 80099aa:	4628      	mov	r0, r5
 80099ac:	d107      	bne.n	80099be <_dtoa_r+0xb1e>
 80099ae:	f000 fe65 	bl	800a67c <__multadd>
 80099b2:	4680      	mov	r8, r0
 80099b4:	4606      	mov	r6, r0
 80099b6:	9b08      	ldr	r3, [sp, #32]
 80099b8:	3301      	adds	r3, #1
 80099ba:	9308      	str	r3, [sp, #32]
 80099bc:	e775      	b.n	80098aa <_dtoa_r+0xa0a>
 80099be:	f000 fe5d 	bl	800a67c <__multadd>
 80099c2:	4631      	mov	r1, r6
 80099c4:	4680      	mov	r8, r0
 80099c6:	2300      	movs	r3, #0
 80099c8:	220a      	movs	r2, #10
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 fe56 	bl	800a67c <__multadd>
 80099d0:	4606      	mov	r6, r0
 80099d2:	e7f0      	b.n	80099b6 <_dtoa_r+0xb16>
 80099d4:	f1b9 0f00 	cmp.w	r9, #0
 80099d8:	9a03      	ldr	r2, [sp, #12]
 80099da:	bfcc      	ite	gt
 80099dc:	464f      	movgt	r7, r9
 80099de:	2701      	movle	r7, #1
 80099e0:	4417      	add	r7, r2
 80099e2:	f04f 0800 	mov.w	r8, #0
 80099e6:	4659      	mov	r1, fp
 80099e8:	2201      	movs	r2, #1
 80099ea:	4628      	mov	r0, r5
 80099ec:	9308      	str	r3, [sp, #32]
 80099ee:	f001 f83b 	bl	800aa68 <__lshift>
 80099f2:	4621      	mov	r1, r4
 80099f4:	4683      	mov	fp, r0
 80099f6:	f001 f8a7 	bl	800ab48 <__mcmp>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	dcb2      	bgt.n	8009964 <_dtoa_r+0xac4>
 80099fe:	d102      	bne.n	8009a06 <_dtoa_r+0xb66>
 8009a00:	9b08      	ldr	r3, [sp, #32]
 8009a02:	07db      	lsls	r3, r3, #31
 8009a04:	d4ae      	bmi.n	8009964 <_dtoa_r+0xac4>
 8009a06:	463b      	mov	r3, r7
 8009a08:	461f      	mov	r7, r3
 8009a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0e:	2a30      	cmp	r2, #48	; 0x30
 8009a10:	d0fa      	beq.n	8009a08 <_dtoa_r+0xb68>
 8009a12:	e6f9      	b.n	8009808 <_dtoa_r+0x968>
 8009a14:	9a03      	ldr	r2, [sp, #12]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d1a5      	bne.n	8009966 <_dtoa_r+0xac6>
 8009a1a:	f10a 0a01 	add.w	sl, sl, #1
 8009a1e:	2331      	movs	r3, #49	; 0x31
 8009a20:	e779      	b.n	8009916 <_dtoa_r+0xa76>
 8009a22:	4b14      	ldr	r3, [pc, #80]	; (8009a74 <_dtoa_r+0xbd4>)
 8009a24:	f7ff baa7 	b.w	8008f76 <_dtoa_r+0xd6>
 8009a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f47f aa80 	bne.w	8008f30 <_dtoa_r+0x90>
 8009a30:	4b11      	ldr	r3, [pc, #68]	; (8009a78 <_dtoa_r+0xbd8>)
 8009a32:	f7ff baa0 	b.w	8008f76 <_dtoa_r+0xd6>
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	dc03      	bgt.n	8009a44 <_dtoa_r+0xba4>
 8009a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	f73f aecb 	bgt.w	80097da <_dtoa_r+0x93a>
 8009a44:	9f03      	ldr	r7, [sp, #12]
 8009a46:	4621      	mov	r1, r4
 8009a48:	4658      	mov	r0, fp
 8009a4a:	f7ff f9a1 	bl	8008d90 <quorem>
 8009a4e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a52:	f807 3b01 	strb.w	r3, [r7], #1
 8009a56:	9a03      	ldr	r2, [sp, #12]
 8009a58:	1aba      	subs	r2, r7, r2
 8009a5a:	4591      	cmp	r9, r2
 8009a5c:	ddba      	ble.n	80099d4 <_dtoa_r+0xb34>
 8009a5e:	4659      	mov	r1, fp
 8009a60:	2300      	movs	r3, #0
 8009a62:	220a      	movs	r2, #10
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fe09 	bl	800a67c <__multadd>
 8009a6a:	4683      	mov	fp, r0
 8009a6c:	e7eb      	b.n	8009a46 <_dtoa_r+0xba6>
 8009a6e:	bf00      	nop
 8009a70:	0800bd90 	.word	0x0800bd90
 8009a74:	0800bb9c 	.word	0x0800bb9c
 8009a78:	0800bd11 	.word	0x0800bd11

08009a7c <__sflush_r>:
 8009a7c:	898a      	ldrh	r2, [r1, #12]
 8009a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a80:	4605      	mov	r5, r0
 8009a82:	0710      	lsls	r0, r2, #28
 8009a84:	460c      	mov	r4, r1
 8009a86:	d457      	bmi.n	8009b38 <__sflush_r+0xbc>
 8009a88:	684b      	ldr	r3, [r1, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dc04      	bgt.n	8009a98 <__sflush_r+0x1c>
 8009a8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc01      	bgt.n	8009a98 <__sflush_r+0x1c>
 8009a94:	2000      	movs	r0, #0
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	d0fa      	beq.n	8009a94 <__sflush_r+0x18>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009aa4:	682f      	ldr	r7, [r5, #0]
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	d032      	beq.n	8009b10 <__sflush_r+0x94>
 8009aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	075a      	lsls	r2, r3, #29
 8009ab0:	d505      	bpl.n	8009abe <__sflush_r+0x42>
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	1ac0      	subs	r0, r0, r3
 8009ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ab8:	b10b      	cbz	r3, 8009abe <__sflush_r+0x42>
 8009aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009abc:	1ac0      	subs	r0, r0, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac4:	6a21      	ldr	r1, [r4, #32]
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b0      	blx	r6
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	d106      	bne.n	8009ade <__sflush_r+0x62>
 8009ad0:	6829      	ldr	r1, [r5, #0]
 8009ad2:	291d      	cmp	r1, #29
 8009ad4:	d82c      	bhi.n	8009b30 <__sflush_r+0xb4>
 8009ad6:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <__sflush_r+0x100>)
 8009ad8:	40ca      	lsrs	r2, r1
 8009ada:	07d6      	lsls	r6, r2, #31
 8009adc:	d528      	bpl.n	8009b30 <__sflush_r+0xb4>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	6062      	str	r2, [r4, #4]
 8009ae2:	04d9      	lsls	r1, r3, #19
 8009ae4:	6922      	ldr	r2, [r4, #16]
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	d504      	bpl.n	8009af4 <__sflush_r+0x78>
 8009aea:	1c42      	adds	r2, r0, #1
 8009aec:	d101      	bne.n	8009af2 <__sflush_r+0x76>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	b903      	cbnz	r3, 8009af4 <__sflush_r+0x78>
 8009af2:	6560      	str	r0, [r4, #84]	; 0x54
 8009af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af6:	602f      	str	r7, [r5, #0]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	d0cb      	beq.n	8009a94 <__sflush_r+0x18>
 8009afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b00:	4299      	cmp	r1, r3
 8009b02:	d002      	beq.n	8009b0a <__sflush_r+0x8e>
 8009b04:	4628      	mov	r0, r5
 8009b06:	f001 fa1f 	bl	800af48 <_free_r>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b0e:	e7c2      	b.n	8009a96 <__sflush_r+0x1a>
 8009b10:	6a21      	ldr	r1, [r4, #32]
 8009b12:	2301      	movs	r3, #1
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b0      	blx	r6
 8009b18:	1c41      	adds	r1, r0, #1
 8009b1a:	d1c7      	bne.n	8009aac <__sflush_r+0x30>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c4      	beq.n	8009aac <__sflush_r+0x30>
 8009b22:	2b1d      	cmp	r3, #29
 8009b24:	d001      	beq.n	8009b2a <__sflush_r+0xae>
 8009b26:	2b16      	cmp	r3, #22
 8009b28:	d101      	bne.n	8009b2e <__sflush_r+0xb2>
 8009b2a:	602f      	str	r7, [r5, #0]
 8009b2c:	e7b2      	b.n	8009a94 <__sflush_r+0x18>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b34:	81a3      	strh	r3, [r4, #12]
 8009b36:	e7ae      	b.n	8009a96 <__sflush_r+0x1a>
 8009b38:	690f      	ldr	r7, [r1, #16]
 8009b3a:	2f00      	cmp	r7, #0
 8009b3c:	d0aa      	beq.n	8009a94 <__sflush_r+0x18>
 8009b3e:	0793      	lsls	r3, r2, #30
 8009b40:	680e      	ldr	r6, [r1, #0]
 8009b42:	bf08      	it	eq
 8009b44:	694b      	ldreq	r3, [r1, #20]
 8009b46:	600f      	str	r7, [r1, #0]
 8009b48:	bf18      	it	ne
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	1bf6      	subs	r6, r6, r7
 8009b4e:	608b      	str	r3, [r1, #8]
 8009b50:	2e00      	cmp	r6, #0
 8009b52:	dd9f      	ble.n	8009a94 <__sflush_r+0x18>
 8009b54:	6a21      	ldr	r1, [r4, #32]
 8009b56:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009b5a:	4633      	mov	r3, r6
 8009b5c:	463a      	mov	r2, r7
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47e0      	blx	ip
 8009b62:	2800      	cmp	r0, #0
 8009b64:	dc06      	bgt.n	8009b74 <__sflush_r+0xf8>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b72:	e790      	b.n	8009a96 <__sflush_r+0x1a>
 8009b74:	4407      	add	r7, r0
 8009b76:	1a36      	subs	r6, r6, r0
 8009b78:	e7ea      	b.n	8009b50 <__sflush_r+0xd4>
 8009b7a:	bf00      	nop
 8009b7c:	20400001 	.word	0x20400001

08009b80 <_fflush_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	690b      	ldr	r3, [r1, #16]
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	b913      	cbnz	r3, 8009b90 <_fflush_r+0x10>
 8009b8a:	2500      	movs	r5, #0
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	b118      	cbz	r0, 8009b9a <_fflush_r+0x1a>
 8009b92:	6983      	ldr	r3, [r0, #24]
 8009b94:	b90b      	cbnz	r3, 8009b9a <_fflush_r+0x1a>
 8009b96:	f000 f887 	bl	8009ca8 <__sinit>
 8009b9a:	4b14      	ldr	r3, [pc, #80]	; (8009bec <_fflush_r+0x6c>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d11b      	bne.n	8009bd8 <_fflush_r+0x58>
 8009ba0:	686c      	ldr	r4, [r5, #4]
 8009ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0ef      	beq.n	8009b8a <_fflush_r+0xa>
 8009baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bac:	07d0      	lsls	r0, r2, #31
 8009bae:	d404      	bmi.n	8009bba <_fflush_r+0x3a>
 8009bb0:	0599      	lsls	r1, r3, #22
 8009bb2:	d402      	bmi.n	8009bba <_fflush_r+0x3a>
 8009bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb6:	f000 fc7e 	bl	800a4b6 <__retarget_lock_acquire_recursive>
 8009bba:	4628      	mov	r0, r5
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	f7ff ff5d 	bl	8009a7c <__sflush_r>
 8009bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bc4:	07da      	lsls	r2, r3, #31
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	d4e0      	bmi.n	8009b8c <_fflush_r+0xc>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	059b      	lsls	r3, r3, #22
 8009bce:	d4dd      	bmi.n	8009b8c <_fflush_r+0xc>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd2:	f000 fc71 	bl	800a4b8 <__retarget_lock_release_recursive>
 8009bd6:	e7d9      	b.n	8009b8c <_fflush_r+0xc>
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <_fflush_r+0x70>)
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d101      	bne.n	8009be2 <_fflush_r+0x62>
 8009bde:	68ac      	ldr	r4, [r5, #8]
 8009be0:	e7df      	b.n	8009ba2 <_fflush_r+0x22>
 8009be2:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <_fflush_r+0x74>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	bf08      	it	eq
 8009be8:	68ec      	ldreq	r4, [r5, #12]
 8009bea:	e7da      	b.n	8009ba2 <_fflush_r+0x22>
 8009bec:	0800bdc4 	.word	0x0800bdc4
 8009bf0:	0800bde4 	.word	0x0800bde4
 8009bf4:	0800bda4 	.word	0x0800bda4

08009bf8 <std>:
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8009c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c06:	6083      	str	r3, [r0, #8]
 8009c08:	8181      	strh	r1, [r0, #12]
 8009c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c0c:	81c2      	strh	r2, [r0, #14]
 8009c0e:	6183      	str	r3, [r0, #24]
 8009c10:	4619      	mov	r1, r3
 8009c12:	2208      	movs	r2, #8
 8009c14:	305c      	adds	r0, #92	; 0x5c
 8009c16:	f7fd fbd7 	bl	80073c8 <memset>
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <std+0x38>)
 8009c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c1e:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <std+0x3c>)
 8009c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <std+0x40>)
 8009c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <std+0x44>)
 8009c28:	6224      	str	r4, [r4, #32]
 8009c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800b6a1 	.word	0x0800b6a1
 8009c34:	0800b6c3 	.word	0x0800b6c3
 8009c38:	0800b6fb 	.word	0x0800b6fb
 8009c3c:	0800b71f 	.word	0x0800b71f

08009c40 <_cleanup_r>:
 8009c40:	4901      	ldr	r1, [pc, #4]	; (8009c48 <_cleanup_r+0x8>)
 8009c42:	f000 b8af 	b.w	8009da4 <_fwalk_reent>
 8009c46:	bf00      	nop
 8009c48:	08009b81 	.word	0x08009b81

08009c4c <__sfmoreglue>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	2268      	movs	r2, #104	; 0x68
 8009c50:	1e4d      	subs	r5, r1, #1
 8009c52:	4355      	muls	r5, r2
 8009c54:	460e      	mov	r6, r1
 8009c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c5a:	f001 f9df 	bl	800b01c <_malloc_r>
 8009c5e:	4604      	mov	r4, r0
 8009c60:	b140      	cbz	r0, 8009c74 <__sfmoreglue+0x28>
 8009c62:	2100      	movs	r1, #0
 8009c64:	e9c0 1600 	strd	r1, r6, [r0]
 8009c68:	300c      	adds	r0, #12
 8009c6a:	60a0      	str	r0, [r4, #8]
 8009c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c70:	f7fd fbaa 	bl	80073c8 <memset>
 8009c74:	4620      	mov	r0, r4
 8009c76:	bd70      	pop	{r4, r5, r6, pc}

08009c78 <__sfp_lock_acquire>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__sfp_lock_acquire+0x8>)
 8009c7a:	f000 bc1c 	b.w	800a4b6 <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	20001521 	.word	0x20001521

08009c84 <__sfp_lock_release>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__sfp_lock_release+0x8>)
 8009c86:	f000 bc17 	b.w	800a4b8 <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	20001521 	.word	0x20001521

08009c90 <__sinit_lock_acquire>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__sinit_lock_acquire+0x8>)
 8009c92:	f000 bc10 	b.w	800a4b6 <__retarget_lock_acquire_recursive>
 8009c96:	bf00      	nop
 8009c98:	20001522 	.word	0x20001522

08009c9c <__sinit_lock_release>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	; (8009ca4 <__sinit_lock_release+0x8>)
 8009c9e:	f000 bc0b 	b.w	800a4b8 <__retarget_lock_release_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	20001522 	.word	0x20001522

08009ca8 <__sinit>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	4604      	mov	r4, r0
 8009cac:	f7ff fff0 	bl	8009c90 <__sinit_lock_acquire>
 8009cb0:	69a3      	ldr	r3, [r4, #24]
 8009cb2:	b11b      	cbz	r3, 8009cbc <__sinit+0x14>
 8009cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb8:	f7ff bff0 	b.w	8009c9c <__sinit_lock_release>
 8009cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8009cc2:	4b13      	ldr	r3, [pc, #76]	; (8009d10 <__sinit+0x68>)
 8009cc4:	4a13      	ldr	r2, [pc, #76]	; (8009d14 <__sinit+0x6c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cca:	42a3      	cmp	r3, r4
 8009ccc:	bf04      	itt	eq
 8009cce:	2301      	moveq	r3, #1
 8009cd0:	61a3      	streq	r3, [r4, #24]
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 f820 	bl	8009d18 <__sfp>
 8009cd8:	6060      	str	r0, [r4, #4]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f81c 	bl	8009d18 <__sfp>
 8009ce0:	60a0      	str	r0, [r4, #8]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f818 	bl	8009d18 <__sfp>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	60e0      	str	r0, [r4, #12]
 8009cec:	2104      	movs	r1, #4
 8009cee:	6860      	ldr	r0, [r4, #4]
 8009cf0:	f7ff ff82 	bl	8009bf8 <std>
 8009cf4:	68a0      	ldr	r0, [r4, #8]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	2109      	movs	r1, #9
 8009cfa:	f7ff ff7d 	bl	8009bf8 <std>
 8009cfe:	68e0      	ldr	r0, [r4, #12]
 8009d00:	2202      	movs	r2, #2
 8009d02:	2112      	movs	r1, #18
 8009d04:	f7ff ff78 	bl	8009bf8 <std>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	61a3      	str	r3, [r4, #24]
 8009d0c:	e7d2      	b.n	8009cb4 <__sinit+0xc>
 8009d0e:	bf00      	nop
 8009d10:	0800bb88 	.word	0x0800bb88
 8009d14:	08009c41 	.word	0x08009c41

08009d18 <__sfp>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	f7ff ffac 	bl	8009c78 <__sfp_lock_acquire>
 8009d20:	4b1e      	ldr	r3, [pc, #120]	; (8009d9c <__sfp+0x84>)
 8009d22:	681e      	ldr	r6, [r3, #0]
 8009d24:	69b3      	ldr	r3, [r6, #24]
 8009d26:	b913      	cbnz	r3, 8009d2e <__sfp+0x16>
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7ff ffbd 	bl	8009ca8 <__sinit>
 8009d2e:	3648      	adds	r6, #72	; 0x48
 8009d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	d503      	bpl.n	8009d40 <__sfp+0x28>
 8009d38:	6833      	ldr	r3, [r6, #0]
 8009d3a:	b30b      	cbz	r3, 8009d80 <__sfp+0x68>
 8009d3c:	6836      	ldr	r6, [r6, #0]
 8009d3e:	e7f7      	b.n	8009d30 <__sfp+0x18>
 8009d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d44:	b9d5      	cbnz	r5, 8009d7c <__sfp+0x64>
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <__sfp+0x88>)
 8009d48:	60e3      	str	r3, [r4, #12]
 8009d4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8009d50:	f000 fbb0 	bl	800a4b4 <__retarget_lock_init_recursive>
 8009d54:	f7ff ff96 	bl	8009c84 <__sfp_lock_release>
 8009d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d60:	6025      	str	r5, [r4, #0]
 8009d62:	61a5      	str	r5, [r4, #24]
 8009d64:	2208      	movs	r2, #8
 8009d66:	4629      	mov	r1, r5
 8009d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d6c:	f7fd fb2c 	bl	80073c8 <memset>
 8009d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d78:	4620      	mov	r0, r4
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7c:	3468      	adds	r4, #104	; 0x68
 8009d7e:	e7d9      	b.n	8009d34 <__sfp+0x1c>
 8009d80:	2104      	movs	r1, #4
 8009d82:	4638      	mov	r0, r7
 8009d84:	f7ff ff62 	bl	8009c4c <__sfmoreglue>
 8009d88:	4604      	mov	r4, r0
 8009d8a:	6030      	str	r0, [r6, #0]
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d1d5      	bne.n	8009d3c <__sfp+0x24>
 8009d90:	f7ff ff78 	bl	8009c84 <__sfp_lock_release>
 8009d94:	230c      	movs	r3, #12
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	e7ee      	b.n	8009d78 <__sfp+0x60>
 8009d9a:	bf00      	nop
 8009d9c:	0800bb88 	.word	0x0800bb88
 8009da0:	ffff0001 	.word	0xffff0001

08009da4 <_fwalk_reent>:
 8009da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da8:	4606      	mov	r6, r0
 8009daa:	4688      	mov	r8, r1
 8009dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009db0:	2700      	movs	r7, #0
 8009db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009db6:	f1b9 0901 	subs.w	r9, r9, #1
 8009dba:	d505      	bpl.n	8009dc8 <_fwalk_reent+0x24>
 8009dbc:	6824      	ldr	r4, [r4, #0]
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	d1f7      	bne.n	8009db2 <_fwalk_reent+0xe>
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc8:	89ab      	ldrh	r3, [r5, #12]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d907      	bls.n	8009dde <_fwalk_reent+0x3a>
 8009dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	d003      	beq.n	8009dde <_fwalk_reent+0x3a>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4630      	mov	r0, r6
 8009dda:	47c0      	blx	r8
 8009ddc:	4307      	orrs	r7, r0
 8009dde:	3568      	adds	r5, #104	; 0x68
 8009de0:	e7e9      	b.n	8009db6 <_fwalk_reent+0x12>

08009de2 <rshift>:
 8009de2:	6903      	ldr	r3, [r0, #16]
 8009de4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dec:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009df0:	f100 0414 	add.w	r4, r0, #20
 8009df4:	dd45      	ble.n	8009e82 <rshift+0xa0>
 8009df6:	f011 011f 	ands.w	r1, r1, #31
 8009dfa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dfe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e02:	d10c      	bne.n	8009e1e <rshift+0x3c>
 8009e04:	f100 0710 	add.w	r7, r0, #16
 8009e08:	4629      	mov	r1, r5
 8009e0a:	42b1      	cmp	r1, r6
 8009e0c:	d334      	bcc.n	8009e78 <rshift+0x96>
 8009e0e:	1a9b      	subs	r3, r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	1eea      	subs	r2, r5, #3
 8009e14:	4296      	cmp	r6, r2
 8009e16:	bf38      	it	cc
 8009e18:	2300      	movcc	r3, #0
 8009e1a:	4423      	add	r3, r4
 8009e1c:	e015      	b.n	8009e4a <rshift+0x68>
 8009e1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e22:	f1c1 0820 	rsb	r8, r1, #32
 8009e26:	40cf      	lsrs	r7, r1
 8009e28:	f105 0e04 	add.w	lr, r5, #4
 8009e2c:	46a1      	mov	r9, r4
 8009e2e:	4576      	cmp	r6, lr
 8009e30:	46f4      	mov	ip, lr
 8009e32:	d815      	bhi.n	8009e60 <rshift+0x7e>
 8009e34:	1a9a      	subs	r2, r3, r2
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	3a04      	subs	r2, #4
 8009e3a:	3501      	adds	r5, #1
 8009e3c:	42ae      	cmp	r6, r5
 8009e3e:	bf38      	it	cc
 8009e40:	2200      	movcc	r2, #0
 8009e42:	18a3      	adds	r3, r4, r2
 8009e44:	50a7      	str	r7, [r4, r2]
 8009e46:	b107      	cbz	r7, 8009e4a <rshift+0x68>
 8009e48:	3304      	adds	r3, #4
 8009e4a:	1b1a      	subs	r2, r3, r4
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e52:	bf08      	it	eq
 8009e54:	2300      	moveq	r3, #0
 8009e56:	6102      	str	r2, [r0, #16]
 8009e58:	bf08      	it	eq
 8009e5a:	6143      	streq	r3, [r0, #20]
 8009e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e60:	f8dc c000 	ldr.w	ip, [ip]
 8009e64:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e68:	ea4c 0707 	orr.w	r7, ip, r7
 8009e6c:	f849 7b04 	str.w	r7, [r9], #4
 8009e70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e74:	40cf      	lsrs	r7, r1
 8009e76:	e7da      	b.n	8009e2e <rshift+0x4c>
 8009e78:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e80:	e7c3      	b.n	8009e0a <rshift+0x28>
 8009e82:	4623      	mov	r3, r4
 8009e84:	e7e1      	b.n	8009e4a <rshift+0x68>

08009e86 <__hexdig_fun>:
 8009e86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d802      	bhi.n	8009e94 <__hexdig_fun+0xe>
 8009e8e:	3820      	subs	r0, #32
 8009e90:	b2c0      	uxtb	r0, r0
 8009e92:	4770      	bx	lr
 8009e94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d801      	bhi.n	8009ea0 <__hexdig_fun+0x1a>
 8009e9c:	3847      	subs	r0, #71	; 0x47
 8009e9e:	e7f7      	b.n	8009e90 <__hexdig_fun+0xa>
 8009ea0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	d801      	bhi.n	8009eac <__hexdig_fun+0x26>
 8009ea8:	3827      	subs	r0, #39	; 0x27
 8009eaa:	e7f1      	b.n	8009e90 <__hexdig_fun+0xa>
 8009eac:	2000      	movs	r0, #0
 8009eae:	4770      	bx	lr

08009eb0 <__gethex>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	b08b      	sub	sp, #44	; 0x2c
 8009eb6:	468b      	mov	fp, r1
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	4bb2      	ldr	r3, [pc, #712]	; (800a184 <__gethex+0x2d4>)
 8009ebc:	9002      	str	r0, [sp, #8]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	4690      	mov	r8, r2
 8009ec6:	f7f6 f9a3 	bl	8000210 <strlen>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	f8db 2000 	ldr.w	r2, [fp]
 8009ed0:	4403      	add	r3, r0
 8009ed2:	4682      	mov	sl, r0
 8009ed4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ed8:	9306      	str	r3, [sp, #24]
 8009eda:	1c93      	adds	r3, r2, #2
 8009edc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ee0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ee4:	32fe      	adds	r2, #254	; 0xfe
 8009ee6:	18d1      	adds	r1, r2, r3
 8009ee8:	461f      	mov	r7, r3
 8009eea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eee:	9101      	str	r1, [sp, #4]
 8009ef0:	2830      	cmp	r0, #48	; 0x30
 8009ef2:	d0f8      	beq.n	8009ee6 <__gethex+0x36>
 8009ef4:	f7ff ffc7 	bl	8009e86 <__hexdig_fun>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d13a      	bne.n	8009f74 <__gethex+0xc4>
 8009efe:	9903      	ldr	r1, [sp, #12]
 8009f00:	4652      	mov	r2, sl
 8009f02:	4638      	mov	r0, r7
 8009f04:	f001 fc0f 	bl	800b726 <strncmp>
 8009f08:	4605      	mov	r5, r0
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d166      	bne.n	8009fdc <__gethex+0x12c>
 8009f0e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f12:	eb07 060a 	add.w	r6, r7, sl
 8009f16:	f7ff ffb6 	bl	8009e86 <__hexdig_fun>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d060      	beq.n	8009fe0 <__gethex+0x130>
 8009f1e:	4633      	mov	r3, r6
 8009f20:	7818      	ldrb	r0, [r3, #0]
 8009f22:	2830      	cmp	r0, #48	; 0x30
 8009f24:	461f      	mov	r7, r3
 8009f26:	f103 0301 	add.w	r3, r3, #1
 8009f2a:	d0f9      	beq.n	8009f20 <__gethex+0x70>
 8009f2c:	f7ff ffab 	bl	8009e86 <__hexdig_fun>
 8009f30:	2301      	movs	r3, #1
 8009f32:	fab0 f480 	clz	r4, r0
 8009f36:	0964      	lsrs	r4, r4, #5
 8009f38:	4635      	mov	r5, r6
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	463a      	mov	r2, r7
 8009f3e:	4616      	mov	r6, r2
 8009f40:	3201      	adds	r2, #1
 8009f42:	7830      	ldrb	r0, [r6, #0]
 8009f44:	f7ff ff9f 	bl	8009e86 <__hexdig_fun>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d1f8      	bne.n	8009f3e <__gethex+0x8e>
 8009f4c:	9903      	ldr	r1, [sp, #12]
 8009f4e:	4652      	mov	r2, sl
 8009f50:	4630      	mov	r0, r6
 8009f52:	f001 fbe8 	bl	800b726 <strncmp>
 8009f56:	b980      	cbnz	r0, 8009f7a <__gethex+0xca>
 8009f58:	b94d      	cbnz	r5, 8009f6e <__gethex+0xbe>
 8009f5a:	eb06 050a 	add.w	r5, r6, sl
 8009f5e:	462a      	mov	r2, r5
 8009f60:	4616      	mov	r6, r2
 8009f62:	3201      	adds	r2, #1
 8009f64:	7830      	ldrb	r0, [r6, #0]
 8009f66:	f7ff ff8e 	bl	8009e86 <__hexdig_fun>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d1f8      	bne.n	8009f60 <__gethex+0xb0>
 8009f6e:	1bad      	subs	r5, r5, r6
 8009f70:	00ad      	lsls	r5, r5, #2
 8009f72:	e004      	b.n	8009f7e <__gethex+0xce>
 8009f74:	2400      	movs	r4, #0
 8009f76:	4625      	mov	r5, r4
 8009f78:	e7e0      	b.n	8009f3c <__gethex+0x8c>
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	d1f7      	bne.n	8009f6e <__gethex+0xbe>
 8009f7e:	7833      	ldrb	r3, [r6, #0]
 8009f80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f84:	2b50      	cmp	r3, #80	; 0x50
 8009f86:	d139      	bne.n	8009ffc <__gethex+0x14c>
 8009f88:	7873      	ldrb	r3, [r6, #1]
 8009f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8009f8c:	d02a      	beq.n	8009fe4 <__gethex+0x134>
 8009f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8009f90:	d02c      	beq.n	8009fec <__gethex+0x13c>
 8009f92:	1c71      	adds	r1, r6, #1
 8009f94:	f04f 0900 	mov.w	r9, #0
 8009f98:	7808      	ldrb	r0, [r1, #0]
 8009f9a:	f7ff ff74 	bl	8009e86 <__hexdig_fun>
 8009f9e:	1e43      	subs	r3, r0, #1
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b18      	cmp	r3, #24
 8009fa4:	d82a      	bhi.n	8009ffc <__gethex+0x14c>
 8009fa6:	f1a0 0210 	sub.w	r2, r0, #16
 8009faa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fae:	f7ff ff6a 	bl	8009e86 <__hexdig_fun>
 8009fb2:	1e43      	subs	r3, r0, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b18      	cmp	r3, #24
 8009fb8:	d91b      	bls.n	8009ff2 <__gethex+0x142>
 8009fba:	f1b9 0f00 	cmp.w	r9, #0
 8009fbe:	d000      	beq.n	8009fc2 <__gethex+0x112>
 8009fc0:	4252      	negs	r2, r2
 8009fc2:	4415      	add	r5, r2
 8009fc4:	f8cb 1000 	str.w	r1, [fp]
 8009fc8:	b1d4      	cbz	r4, 800a000 <__gethex+0x150>
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bf14      	ite	ne
 8009fd0:	2700      	movne	r7, #0
 8009fd2:	2706      	moveq	r7, #6
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	b00b      	add	sp, #44	; 0x2c
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	463e      	mov	r6, r7
 8009fde:	4625      	mov	r5, r4
 8009fe0:	2401      	movs	r4, #1
 8009fe2:	e7cc      	b.n	8009f7e <__gethex+0xce>
 8009fe4:	f04f 0900 	mov.w	r9, #0
 8009fe8:	1cb1      	adds	r1, r6, #2
 8009fea:	e7d5      	b.n	8009f98 <__gethex+0xe8>
 8009fec:	f04f 0901 	mov.w	r9, #1
 8009ff0:	e7fa      	b.n	8009fe8 <__gethex+0x138>
 8009ff2:	230a      	movs	r3, #10
 8009ff4:	fb03 0202 	mla	r2, r3, r2, r0
 8009ff8:	3a10      	subs	r2, #16
 8009ffa:	e7d6      	b.n	8009faa <__gethex+0xfa>
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	e7e1      	b.n	8009fc4 <__gethex+0x114>
 800a000:	1bf3      	subs	r3, r6, r7
 800a002:	3b01      	subs	r3, #1
 800a004:	4621      	mov	r1, r4
 800a006:	2b07      	cmp	r3, #7
 800a008:	dc0a      	bgt.n	800a020 <__gethex+0x170>
 800a00a:	9802      	ldr	r0, [sp, #8]
 800a00c:	f000 fad4 	bl	800a5b8 <_Balloc>
 800a010:	4604      	mov	r4, r0
 800a012:	b940      	cbnz	r0, 800a026 <__gethex+0x176>
 800a014:	4b5c      	ldr	r3, [pc, #368]	; (800a188 <__gethex+0x2d8>)
 800a016:	4602      	mov	r2, r0
 800a018:	21de      	movs	r1, #222	; 0xde
 800a01a:	485c      	ldr	r0, [pc, #368]	; (800a18c <__gethex+0x2dc>)
 800a01c:	f001 fbb6 	bl	800b78c <__assert_func>
 800a020:	3101      	adds	r1, #1
 800a022:	105b      	asrs	r3, r3, #1
 800a024:	e7ef      	b.n	800a006 <__gethex+0x156>
 800a026:	f100 0914 	add.w	r9, r0, #20
 800a02a:	f04f 0b00 	mov.w	fp, #0
 800a02e:	f1ca 0301 	rsb	r3, sl, #1
 800a032:	f8cd 9010 	str.w	r9, [sp, #16]
 800a036:	f8cd b004 	str.w	fp, [sp, #4]
 800a03a:	9308      	str	r3, [sp, #32]
 800a03c:	42b7      	cmp	r7, r6
 800a03e:	d33f      	bcc.n	800a0c0 <__gethex+0x210>
 800a040:	9f04      	ldr	r7, [sp, #16]
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	f847 3b04 	str.w	r3, [r7], #4
 800a048:	eba7 0709 	sub.w	r7, r7, r9
 800a04c:	10bf      	asrs	r7, r7, #2
 800a04e:	6127      	str	r7, [r4, #16]
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fba3 	bl	800a79c <__hi0bits>
 800a056:	017f      	lsls	r7, r7, #5
 800a058:	f8d8 6000 	ldr.w	r6, [r8]
 800a05c:	1a3f      	subs	r7, r7, r0
 800a05e:	42b7      	cmp	r7, r6
 800a060:	dd62      	ble.n	800a128 <__gethex+0x278>
 800a062:	1bbf      	subs	r7, r7, r6
 800a064:	4639      	mov	r1, r7
 800a066:	4620      	mov	r0, r4
 800a068:	f000 ff39 	bl	800aede <__any_on>
 800a06c:	4682      	mov	sl, r0
 800a06e:	b1a8      	cbz	r0, 800a09c <__gethex+0x1ec>
 800a070:	1e7b      	subs	r3, r7, #1
 800a072:	1159      	asrs	r1, r3, #5
 800a074:	f003 021f 	and.w	r2, r3, #31
 800a078:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a07c:	f04f 0a01 	mov.w	sl, #1
 800a080:	fa0a f202 	lsl.w	r2, sl, r2
 800a084:	420a      	tst	r2, r1
 800a086:	d009      	beq.n	800a09c <__gethex+0x1ec>
 800a088:	4553      	cmp	r3, sl
 800a08a:	dd05      	ble.n	800a098 <__gethex+0x1e8>
 800a08c:	1eb9      	subs	r1, r7, #2
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 ff25 	bl	800aede <__any_on>
 800a094:	2800      	cmp	r0, #0
 800a096:	d144      	bne.n	800a122 <__gethex+0x272>
 800a098:	f04f 0a02 	mov.w	sl, #2
 800a09c:	4639      	mov	r1, r7
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f7ff fe9f 	bl	8009de2 <rshift>
 800a0a4:	443d      	add	r5, r7
 800a0a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0aa:	42ab      	cmp	r3, r5
 800a0ac:	da4a      	bge.n	800a144 <__gethex+0x294>
 800a0ae:	9802      	ldr	r0, [sp, #8]
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f000 fac1 	bl	800a638 <_Bfree>
 800a0b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	27a3      	movs	r7, #163	; 0xa3
 800a0be:	e789      	b.n	8009fd4 <__gethex+0x124>
 800a0c0:	1e73      	subs	r3, r6, #1
 800a0c2:	9a06      	ldr	r2, [sp, #24]
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d019      	beq.n	800a102 <__gethex+0x252>
 800a0ce:	f1bb 0f20 	cmp.w	fp, #32
 800a0d2:	d107      	bne.n	800a0e4 <__gethex+0x234>
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	9a01      	ldr	r2, [sp, #4]
 800a0d8:	f843 2b04 	str.w	r2, [r3], #4
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	469b      	mov	fp, r3
 800a0e4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a0e8:	f7ff fecd 	bl	8009e86 <__hexdig_fun>
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	f000 000f 	and.w	r0, r0, #15
 800a0f2:	fa00 f00b 	lsl.w	r0, r0, fp
 800a0f6:	4303      	orrs	r3, r0
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f10b 0b04 	add.w	fp, fp, #4
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	e00d      	b.n	800a11e <__gethex+0x26e>
 800a102:	9a08      	ldr	r2, [sp, #32]
 800a104:	1e73      	subs	r3, r6, #1
 800a106:	4413      	add	r3, r2
 800a108:	42bb      	cmp	r3, r7
 800a10a:	d3e0      	bcc.n	800a0ce <__gethex+0x21e>
 800a10c:	4618      	mov	r0, r3
 800a10e:	9903      	ldr	r1, [sp, #12]
 800a110:	9309      	str	r3, [sp, #36]	; 0x24
 800a112:	4652      	mov	r2, sl
 800a114:	f001 fb07 	bl	800b726 <strncmp>
 800a118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d1d7      	bne.n	800a0ce <__gethex+0x21e>
 800a11e:	461e      	mov	r6, r3
 800a120:	e78c      	b.n	800a03c <__gethex+0x18c>
 800a122:	f04f 0a03 	mov.w	sl, #3
 800a126:	e7b9      	b.n	800a09c <__gethex+0x1ec>
 800a128:	da09      	bge.n	800a13e <__gethex+0x28e>
 800a12a:	1bf7      	subs	r7, r6, r7
 800a12c:	4621      	mov	r1, r4
 800a12e:	9802      	ldr	r0, [sp, #8]
 800a130:	463a      	mov	r2, r7
 800a132:	f000 fc99 	bl	800aa68 <__lshift>
 800a136:	1bed      	subs	r5, r5, r7
 800a138:	4604      	mov	r4, r0
 800a13a:	f100 0914 	add.w	r9, r0, #20
 800a13e:	f04f 0a00 	mov.w	sl, #0
 800a142:	e7b0      	b.n	800a0a6 <__gethex+0x1f6>
 800a144:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a148:	42a8      	cmp	r0, r5
 800a14a:	dd71      	ble.n	800a230 <__gethex+0x380>
 800a14c:	1b45      	subs	r5, r0, r5
 800a14e:	42ae      	cmp	r6, r5
 800a150:	dc35      	bgt.n	800a1be <__gethex+0x30e>
 800a152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d029      	beq.n	800a1ae <__gethex+0x2fe>
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d02b      	beq.n	800a1b6 <__gethex+0x306>
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d11c      	bne.n	800a19c <__gethex+0x2ec>
 800a162:	42ae      	cmp	r6, r5
 800a164:	d11a      	bne.n	800a19c <__gethex+0x2ec>
 800a166:	2e01      	cmp	r6, #1
 800a168:	d112      	bne.n	800a190 <__gethex+0x2e0>
 800a16a:	9a05      	ldr	r2, [sp, #20]
 800a16c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	2301      	movs	r3, #1
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	f8c9 3000 	str.w	r3, [r9]
 800a17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a17c:	2762      	movs	r7, #98	; 0x62
 800a17e:	601c      	str	r4, [r3, #0]
 800a180:	e728      	b.n	8009fd4 <__gethex+0x124>
 800a182:	bf00      	nop
 800a184:	0800be6c 	.word	0x0800be6c
 800a188:	0800bd90 	.word	0x0800bd90
 800a18c:	0800be04 	.word	0x0800be04
 800a190:	1e71      	subs	r1, r6, #1
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fea3 	bl	800aede <__any_on>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d1e6      	bne.n	800a16a <__gethex+0x2ba>
 800a19c:	9802      	ldr	r0, [sp, #8]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	f000 fa4a 	bl	800a638 <_Bfree>
 800a1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	2750      	movs	r7, #80	; 0x50
 800a1ac:	e712      	b.n	8009fd4 <__gethex+0x124>
 800a1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f3      	bne.n	800a19c <__gethex+0x2ec>
 800a1b4:	e7d9      	b.n	800a16a <__gethex+0x2ba>
 800a1b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1d6      	bne.n	800a16a <__gethex+0x2ba>
 800a1bc:	e7ee      	b.n	800a19c <__gethex+0x2ec>
 800a1be:	1e6f      	subs	r7, r5, #1
 800a1c0:	f1ba 0f00 	cmp.w	sl, #0
 800a1c4:	d131      	bne.n	800a22a <__gethex+0x37a>
 800a1c6:	b127      	cbz	r7, 800a1d2 <__gethex+0x322>
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fe87 	bl	800aede <__any_on>
 800a1d0:	4682      	mov	sl, r0
 800a1d2:	117b      	asrs	r3, r7, #5
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a1da:	f007 071f 	and.w	r7, r7, #31
 800a1de:	fa01 f707 	lsl.w	r7, r1, r7
 800a1e2:	421f      	tst	r7, r3
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	bf18      	it	ne
 800a1ea:	f04a 0a02 	orrne.w	sl, sl, #2
 800a1ee:	1b76      	subs	r6, r6, r5
 800a1f0:	f7ff fdf7 	bl	8009de2 <rshift>
 800a1f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1f8:	2702      	movs	r7, #2
 800a1fa:	f1ba 0f00 	cmp.w	sl, #0
 800a1fe:	d048      	beq.n	800a292 <__gethex+0x3e2>
 800a200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d015      	beq.n	800a234 <__gethex+0x384>
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d017      	beq.n	800a23c <__gethex+0x38c>
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d109      	bne.n	800a224 <__gethex+0x374>
 800a210:	f01a 0f02 	tst.w	sl, #2
 800a214:	d006      	beq.n	800a224 <__gethex+0x374>
 800a216:	f8d9 0000 	ldr.w	r0, [r9]
 800a21a:	ea4a 0a00 	orr.w	sl, sl, r0
 800a21e:	f01a 0f01 	tst.w	sl, #1
 800a222:	d10e      	bne.n	800a242 <__gethex+0x392>
 800a224:	f047 0710 	orr.w	r7, r7, #16
 800a228:	e033      	b.n	800a292 <__gethex+0x3e2>
 800a22a:	f04f 0a01 	mov.w	sl, #1
 800a22e:	e7d0      	b.n	800a1d2 <__gethex+0x322>
 800a230:	2701      	movs	r7, #1
 800a232:	e7e2      	b.n	800a1fa <__gethex+0x34a>
 800a234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a236:	f1c3 0301 	rsb	r3, r3, #1
 800a23a:	9315      	str	r3, [sp, #84]	; 0x54
 800a23c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f0      	beq.n	800a224 <__gethex+0x374>
 800a242:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a246:	f104 0314 	add.w	r3, r4, #20
 800a24a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a24e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a252:	f04f 0c00 	mov.w	ip, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a260:	d01c      	beq.n	800a29c <__gethex+0x3ec>
 800a262:	3201      	adds	r2, #1
 800a264:	6002      	str	r2, [r0, #0]
 800a266:	2f02      	cmp	r7, #2
 800a268:	f104 0314 	add.w	r3, r4, #20
 800a26c:	d13d      	bne.n	800a2ea <__gethex+0x43a>
 800a26e:	f8d8 2000 	ldr.w	r2, [r8]
 800a272:	3a01      	subs	r2, #1
 800a274:	42b2      	cmp	r2, r6
 800a276:	d10a      	bne.n	800a28e <__gethex+0x3de>
 800a278:	1171      	asrs	r1, r6, #5
 800a27a:	2201      	movs	r2, #1
 800a27c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a280:	f006 061f 	and.w	r6, r6, #31
 800a284:	fa02 f606 	lsl.w	r6, r2, r6
 800a288:	421e      	tst	r6, r3
 800a28a:	bf18      	it	ne
 800a28c:	4617      	movne	r7, r2
 800a28e:	f047 0720 	orr.w	r7, r7, #32
 800a292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a294:	601c      	str	r4, [r3, #0]
 800a296:	9b05      	ldr	r3, [sp, #20]
 800a298:	601d      	str	r5, [r3, #0]
 800a29a:	e69b      	b.n	8009fd4 <__gethex+0x124>
 800a29c:	4299      	cmp	r1, r3
 800a29e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2a2:	d8d8      	bhi.n	800a256 <__gethex+0x3a6>
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	459b      	cmp	fp, r3
 800a2a8:	db17      	blt.n	800a2da <__gethex+0x42a>
 800a2aa:	6861      	ldr	r1, [r4, #4]
 800a2ac:	9802      	ldr	r0, [sp, #8]
 800a2ae:	3101      	adds	r1, #1
 800a2b0:	f000 f982 	bl	800a5b8 <_Balloc>
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	b918      	cbnz	r0, 800a2c0 <__gethex+0x410>
 800a2b8:	4b1a      	ldr	r3, [pc, #104]	; (800a324 <__gethex+0x474>)
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	2184      	movs	r1, #132	; 0x84
 800a2be:	e6ac      	b.n	800a01a <__gethex+0x16a>
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	3202      	adds	r2, #2
 800a2c4:	f104 010c 	add.w	r1, r4, #12
 800a2c8:	0092      	lsls	r2, r2, #2
 800a2ca:	300c      	adds	r0, #12
 800a2cc:	f7fd f86e 	bl	80073ac <memcpy>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	9802      	ldr	r0, [sp, #8]
 800a2d4:	f000 f9b0 	bl	800a638 <_Bfree>
 800a2d8:	464c      	mov	r4, r9
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2e2:	6122      	str	r2, [r4, #16]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	615a      	str	r2, [r3, #20]
 800a2e8:	e7bd      	b.n	800a266 <__gethex+0x3b6>
 800a2ea:	6922      	ldr	r2, [r4, #16]
 800a2ec:	455a      	cmp	r2, fp
 800a2ee:	dd0b      	ble.n	800a308 <__gethex+0x458>
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f7ff fd75 	bl	8009de2 <rshift>
 800a2f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	42ab      	cmp	r3, r5
 800a300:	f6ff aed5 	blt.w	800a0ae <__gethex+0x1fe>
 800a304:	2701      	movs	r7, #1
 800a306:	e7c2      	b.n	800a28e <__gethex+0x3de>
 800a308:	f016 061f 	ands.w	r6, r6, #31
 800a30c:	d0fa      	beq.n	800a304 <__gethex+0x454>
 800a30e:	4453      	add	r3, sl
 800a310:	f1c6 0620 	rsb	r6, r6, #32
 800a314:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a318:	f000 fa40 	bl	800a79c <__hi0bits>
 800a31c:	42b0      	cmp	r0, r6
 800a31e:	dbe7      	blt.n	800a2f0 <__gethex+0x440>
 800a320:	e7f0      	b.n	800a304 <__gethex+0x454>
 800a322:	bf00      	nop
 800a324:	0800bd90 	.word	0x0800bd90

0800a328 <L_shift>:
 800a328:	f1c2 0208 	rsb	r2, r2, #8
 800a32c:	0092      	lsls	r2, r2, #2
 800a32e:	b570      	push	{r4, r5, r6, lr}
 800a330:	f1c2 0620 	rsb	r6, r2, #32
 800a334:	6843      	ldr	r3, [r0, #4]
 800a336:	6804      	ldr	r4, [r0, #0]
 800a338:	fa03 f506 	lsl.w	r5, r3, r6
 800a33c:	432c      	orrs	r4, r5
 800a33e:	40d3      	lsrs	r3, r2
 800a340:	6004      	str	r4, [r0, #0]
 800a342:	f840 3f04 	str.w	r3, [r0, #4]!
 800a346:	4288      	cmp	r0, r1
 800a348:	d3f4      	bcc.n	800a334 <L_shift+0xc>
 800a34a:	bd70      	pop	{r4, r5, r6, pc}

0800a34c <__match>:
 800a34c:	b530      	push	{r4, r5, lr}
 800a34e:	6803      	ldr	r3, [r0, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a356:	b914      	cbnz	r4, 800a35e <__match+0x12>
 800a358:	6003      	str	r3, [r0, #0]
 800a35a:	2001      	movs	r0, #1
 800a35c:	bd30      	pop	{r4, r5, pc}
 800a35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a362:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a366:	2d19      	cmp	r5, #25
 800a368:	bf98      	it	ls
 800a36a:	3220      	addls	r2, #32
 800a36c:	42a2      	cmp	r2, r4
 800a36e:	d0f0      	beq.n	800a352 <__match+0x6>
 800a370:	2000      	movs	r0, #0
 800a372:	e7f3      	b.n	800a35c <__match+0x10>

0800a374 <__hexnan>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	680b      	ldr	r3, [r1, #0]
 800a37a:	115e      	asrs	r6, r3, #5
 800a37c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a380:	f013 031f 	ands.w	r3, r3, #31
 800a384:	b087      	sub	sp, #28
 800a386:	bf18      	it	ne
 800a388:	3604      	addne	r6, #4
 800a38a:	2500      	movs	r5, #0
 800a38c:	1f37      	subs	r7, r6, #4
 800a38e:	4690      	mov	r8, r2
 800a390:	6802      	ldr	r2, [r0, #0]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	4682      	mov	sl, r0
 800a396:	f846 5c04 	str.w	r5, [r6, #-4]
 800a39a:	46b9      	mov	r9, r7
 800a39c:	463c      	mov	r4, r7
 800a39e:	9502      	str	r5, [sp, #8]
 800a3a0:	46ab      	mov	fp, r5
 800a3a2:	7851      	ldrb	r1, [r2, #1]
 800a3a4:	1c53      	adds	r3, r2, #1
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	b341      	cbz	r1, 800a3fc <__hexnan+0x88>
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	9205      	str	r2, [sp, #20]
 800a3ae:	9104      	str	r1, [sp, #16]
 800a3b0:	f7ff fd69 	bl	8009e86 <__hexdig_fun>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d14f      	bne.n	800a458 <__hexnan+0xe4>
 800a3b8:	9904      	ldr	r1, [sp, #16]
 800a3ba:	9a05      	ldr	r2, [sp, #20]
 800a3bc:	2920      	cmp	r1, #32
 800a3be:	d818      	bhi.n	800a3f2 <__hexnan+0x7e>
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	459b      	cmp	fp, r3
 800a3c4:	dd13      	ble.n	800a3ee <__hexnan+0x7a>
 800a3c6:	454c      	cmp	r4, r9
 800a3c8:	d206      	bcs.n	800a3d8 <__hexnan+0x64>
 800a3ca:	2d07      	cmp	r5, #7
 800a3cc:	dc04      	bgt.n	800a3d8 <__hexnan+0x64>
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f7ff ffa8 	bl	800a328 <L_shift>
 800a3d8:	4544      	cmp	r4, r8
 800a3da:	d950      	bls.n	800a47e <__hexnan+0x10a>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f1a4 0904 	sub.w	r9, r4, #4
 800a3e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a3ea:	464c      	mov	r4, r9
 800a3ec:	461d      	mov	r5, r3
 800a3ee:	9a03      	ldr	r2, [sp, #12]
 800a3f0:	e7d7      	b.n	800a3a2 <__hexnan+0x2e>
 800a3f2:	2929      	cmp	r1, #41	; 0x29
 800a3f4:	d156      	bne.n	800a4a4 <__hexnan+0x130>
 800a3f6:	3202      	adds	r2, #2
 800a3f8:	f8ca 2000 	str.w	r2, [sl]
 800a3fc:	f1bb 0f00 	cmp.w	fp, #0
 800a400:	d050      	beq.n	800a4a4 <__hexnan+0x130>
 800a402:	454c      	cmp	r4, r9
 800a404:	d206      	bcs.n	800a414 <__hexnan+0xa0>
 800a406:	2d07      	cmp	r5, #7
 800a408:	dc04      	bgt.n	800a414 <__hexnan+0xa0>
 800a40a:	462a      	mov	r2, r5
 800a40c:	4649      	mov	r1, r9
 800a40e:	4620      	mov	r0, r4
 800a410:	f7ff ff8a 	bl	800a328 <L_shift>
 800a414:	4544      	cmp	r4, r8
 800a416:	d934      	bls.n	800a482 <__hexnan+0x10e>
 800a418:	f1a8 0204 	sub.w	r2, r8, #4
 800a41c:	4623      	mov	r3, r4
 800a41e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a422:	f842 1f04 	str.w	r1, [r2, #4]!
 800a426:	429f      	cmp	r7, r3
 800a428:	d2f9      	bcs.n	800a41e <__hexnan+0xaa>
 800a42a:	1b3b      	subs	r3, r7, r4
 800a42c:	f023 0303 	bic.w	r3, r3, #3
 800a430:	3304      	adds	r3, #4
 800a432:	3401      	adds	r4, #1
 800a434:	3e03      	subs	r6, #3
 800a436:	42b4      	cmp	r4, r6
 800a438:	bf88      	it	hi
 800a43a:	2304      	movhi	r3, #4
 800a43c:	4443      	add	r3, r8
 800a43e:	2200      	movs	r2, #0
 800a440:	f843 2b04 	str.w	r2, [r3], #4
 800a444:	429f      	cmp	r7, r3
 800a446:	d2fb      	bcs.n	800a440 <__hexnan+0xcc>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	b91b      	cbnz	r3, 800a454 <__hexnan+0xe0>
 800a44c:	4547      	cmp	r7, r8
 800a44e:	d127      	bne.n	800a4a0 <__hexnan+0x12c>
 800a450:	2301      	movs	r3, #1
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	2005      	movs	r0, #5
 800a456:	e026      	b.n	800a4a6 <__hexnan+0x132>
 800a458:	3501      	adds	r5, #1
 800a45a:	2d08      	cmp	r5, #8
 800a45c:	f10b 0b01 	add.w	fp, fp, #1
 800a460:	dd06      	ble.n	800a470 <__hexnan+0xfc>
 800a462:	4544      	cmp	r4, r8
 800a464:	d9c3      	bls.n	800a3ee <__hexnan+0x7a>
 800a466:	2300      	movs	r3, #0
 800a468:	f844 3c04 	str.w	r3, [r4, #-4]
 800a46c:	2501      	movs	r5, #1
 800a46e:	3c04      	subs	r4, #4
 800a470:	6822      	ldr	r2, [r4, #0]
 800a472:	f000 000f 	and.w	r0, r0, #15
 800a476:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	e7b7      	b.n	800a3ee <__hexnan+0x7a>
 800a47e:	2508      	movs	r5, #8
 800a480:	e7b5      	b.n	800a3ee <__hexnan+0x7a>
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0df      	beq.n	800a448 <__hexnan+0xd4>
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	f1c3 0320 	rsb	r3, r3, #32
 800a490:	fa22 f303 	lsr.w	r3, r2, r3
 800a494:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a498:	401a      	ands	r2, r3
 800a49a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a49e:	e7d3      	b.n	800a448 <__hexnan+0xd4>
 800a4a0:	3f04      	subs	r7, #4
 800a4a2:	e7d1      	b.n	800a448 <__hexnan+0xd4>
 800a4a4:	2004      	movs	r0, #4
 800a4a6:	b007      	add	sp, #28
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4ac <_localeconv_r>:
 800a4ac:	4800      	ldr	r0, [pc, #0]	; (800a4b0 <_localeconv_r+0x4>)
 800a4ae:	4770      	bx	lr
 800a4b0:	20000164 	.word	0x20000164

0800a4b4 <__retarget_lock_init_recursive>:
 800a4b4:	4770      	bx	lr

0800a4b6 <__retarget_lock_acquire_recursive>:
 800a4b6:	4770      	bx	lr

0800a4b8 <__retarget_lock_release_recursive>:
 800a4b8:	4770      	bx	lr

0800a4ba <__swhatbuf_r>:
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	460e      	mov	r6, r1
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	b096      	sub	sp, #88	; 0x58
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	461d      	mov	r5, r3
 800a4ca:	da08      	bge.n	800a4de <__swhatbuf_r+0x24>
 800a4cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	602a      	str	r2, [r5, #0]
 800a4d4:	061a      	lsls	r2, r3, #24
 800a4d6:	d410      	bmi.n	800a4fa <__swhatbuf_r+0x40>
 800a4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4dc:	e00e      	b.n	800a4fc <__swhatbuf_r+0x42>
 800a4de:	466a      	mov	r2, sp
 800a4e0:	f001 f994 	bl	800b80c <_fstat_r>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	dbf1      	blt.n	800a4cc <__swhatbuf_r+0x12>
 800a4e8:	9a01      	ldr	r2, [sp, #4]
 800a4ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4f2:	425a      	negs	r2, r3
 800a4f4:	415a      	adcs	r2, r3
 800a4f6:	602a      	str	r2, [r5, #0]
 800a4f8:	e7ee      	b.n	800a4d8 <__swhatbuf_r+0x1e>
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	b016      	add	sp, #88	; 0x58
 800a502:	bd70      	pop	{r4, r5, r6, pc}

0800a504 <__smakebuf_r>:
 800a504:	898b      	ldrh	r3, [r1, #12]
 800a506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a508:	079d      	lsls	r5, r3, #30
 800a50a:	4606      	mov	r6, r0
 800a50c:	460c      	mov	r4, r1
 800a50e:	d507      	bpl.n	800a520 <__smakebuf_r+0x1c>
 800a510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	2301      	movs	r3, #1
 800a51a:	6163      	str	r3, [r4, #20]
 800a51c:	b002      	add	sp, #8
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	ab01      	add	r3, sp, #4
 800a522:	466a      	mov	r2, sp
 800a524:	f7ff ffc9 	bl	800a4ba <__swhatbuf_r>
 800a528:	9900      	ldr	r1, [sp, #0]
 800a52a:	4605      	mov	r5, r0
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 fd75 	bl	800b01c <_malloc_r>
 800a532:	b948      	cbnz	r0, 800a548 <__smakebuf_r+0x44>
 800a534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d4ef      	bmi.n	800a51c <__smakebuf_r+0x18>
 800a53c:	f023 0303 	bic.w	r3, r3, #3
 800a540:	f043 0302 	orr.w	r3, r3, #2
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	e7e3      	b.n	800a510 <__smakebuf_r+0xc>
 800a548:	4b0d      	ldr	r3, [pc, #52]	; (800a580 <__smakebuf_r+0x7c>)
 800a54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	6020      	str	r0, [r4, #0]
 800a550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	9b00      	ldr	r3, [sp, #0]
 800a558:	6163      	str	r3, [r4, #20]
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	6120      	str	r0, [r4, #16]
 800a55e:	b15b      	cbz	r3, 800a578 <__smakebuf_r+0x74>
 800a560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a564:	4630      	mov	r0, r6
 800a566:	f001 f963 	bl	800b830 <_isatty_r>
 800a56a:	b128      	cbz	r0, 800a578 <__smakebuf_r+0x74>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f023 0303 	bic.w	r3, r3, #3
 800a572:	f043 0301 	orr.w	r3, r3, #1
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	89a0      	ldrh	r0, [r4, #12]
 800a57a:	4305      	orrs	r5, r0
 800a57c:	81a5      	strh	r5, [r4, #12]
 800a57e:	e7cd      	b.n	800a51c <__smakebuf_r+0x18>
 800a580:	08009c41 	.word	0x08009c41

0800a584 <malloc>:
 800a584:	4b02      	ldr	r3, [pc, #8]	; (800a590 <malloc+0xc>)
 800a586:	4601      	mov	r1, r0
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	f000 bd47 	b.w	800b01c <_malloc_r>
 800a58e:	bf00      	nop
 800a590:	2000000c 	.word	0x2000000c

0800a594 <__ascii_mbtowc>:
 800a594:	b082      	sub	sp, #8
 800a596:	b901      	cbnz	r1, 800a59a <__ascii_mbtowc+0x6>
 800a598:	a901      	add	r1, sp, #4
 800a59a:	b142      	cbz	r2, 800a5ae <__ascii_mbtowc+0x1a>
 800a59c:	b14b      	cbz	r3, 800a5b2 <__ascii_mbtowc+0x1e>
 800a59e:	7813      	ldrb	r3, [r2, #0]
 800a5a0:	600b      	str	r3, [r1, #0]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	1e10      	subs	r0, r2, #0
 800a5a6:	bf18      	it	ne
 800a5a8:	2001      	movne	r0, #1
 800a5aa:	b002      	add	sp, #8
 800a5ac:	4770      	bx	lr
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	e7fb      	b.n	800a5aa <__ascii_mbtowc+0x16>
 800a5b2:	f06f 0001 	mvn.w	r0, #1
 800a5b6:	e7f8      	b.n	800a5aa <__ascii_mbtowc+0x16>

0800a5b8 <_Balloc>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460d      	mov	r5, r1
 800a5c0:	b976      	cbnz	r6, 800a5e0 <_Balloc+0x28>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	f7ff ffde 	bl	800a584 <malloc>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a5cc:	b920      	cbnz	r0, 800a5d8 <_Balloc+0x20>
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <_Balloc+0x78>)
 800a5d0:	4818      	ldr	r0, [pc, #96]	; (800a634 <_Balloc+0x7c>)
 800a5d2:	2166      	movs	r1, #102	; 0x66
 800a5d4:	f001 f8da 	bl	800b78c <__assert_func>
 800a5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5dc:	6006      	str	r6, [r0, #0]
 800a5de:	60c6      	str	r6, [r0, #12]
 800a5e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5e2:	68f3      	ldr	r3, [r6, #12]
 800a5e4:	b183      	cbz	r3, 800a608 <_Balloc+0x50>
 800a5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5ee:	b9b8      	cbnz	r0, 800a620 <_Balloc+0x68>
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a5f6:	1d72      	adds	r2, r6, #5
 800a5f8:	0092      	lsls	r2, r2, #2
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fc90 	bl	800af20 <_calloc_r>
 800a600:	b160      	cbz	r0, 800a61c <_Balloc+0x64>
 800a602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a606:	e00e      	b.n	800a626 <_Balloc+0x6e>
 800a608:	2221      	movs	r2, #33	; 0x21
 800a60a:	2104      	movs	r1, #4
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fc87 	bl	800af20 <_calloc_r>
 800a612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a614:	60f0      	str	r0, [r6, #12]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e4      	bne.n	800a5e6 <_Balloc+0x2e>
 800a61c:	2000      	movs	r0, #0
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	6802      	ldr	r2, [r0, #0]
 800a622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a626:	2300      	movs	r3, #0
 800a628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a62c:	e7f7      	b.n	800a61e <_Balloc+0x66>
 800a62e:	bf00      	nop
 800a630:	0800bd1e 	.word	0x0800bd1e
 800a634:	0800be80 	.word	0x0800be80

0800a638 <_Bfree>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a63c:	4605      	mov	r5, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	b976      	cbnz	r6, 800a660 <_Bfree+0x28>
 800a642:	2010      	movs	r0, #16
 800a644:	f7ff ff9e 	bl	800a584 <malloc>
 800a648:	4602      	mov	r2, r0
 800a64a:	6268      	str	r0, [r5, #36]	; 0x24
 800a64c:	b920      	cbnz	r0, 800a658 <_Bfree+0x20>
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <_Bfree+0x3c>)
 800a650:	4809      	ldr	r0, [pc, #36]	; (800a678 <_Bfree+0x40>)
 800a652:	218a      	movs	r1, #138	; 0x8a
 800a654:	f001 f89a 	bl	800b78c <__assert_func>
 800a658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a65c:	6006      	str	r6, [r0, #0]
 800a65e:	60c6      	str	r6, [r0, #12]
 800a660:	b13c      	cbz	r4, 800a672 <_Bfree+0x3a>
 800a662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a664:	6862      	ldr	r2, [r4, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a66c:	6021      	str	r1, [r4, #0]
 800a66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	0800bd1e 	.word	0x0800bd1e
 800a678:	0800be80 	.word	0x0800be80

0800a67c <__multadd>:
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	690d      	ldr	r5, [r1, #16]
 800a682:	4607      	mov	r7, r0
 800a684:	460c      	mov	r4, r1
 800a686:	461e      	mov	r6, r3
 800a688:	f101 0c14 	add.w	ip, r1, #20
 800a68c:	2000      	movs	r0, #0
 800a68e:	f8dc 3000 	ldr.w	r3, [ip]
 800a692:	b299      	uxth	r1, r3
 800a694:	fb02 6101 	mla	r1, r2, r1, r6
 800a698:	0c1e      	lsrs	r6, r3, #16
 800a69a:	0c0b      	lsrs	r3, r1, #16
 800a69c:	fb02 3306 	mla	r3, r2, r6, r3
 800a6a0:	b289      	uxth	r1, r1
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6a8:	4285      	cmp	r5, r0
 800a6aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6b2:	dcec      	bgt.n	800a68e <__multadd+0x12>
 800a6b4:	b30e      	cbz	r6, 800a6fa <__multadd+0x7e>
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	dc19      	bgt.n	800a6f0 <__multadd+0x74>
 800a6bc:	6861      	ldr	r1, [r4, #4]
 800a6be:	4638      	mov	r0, r7
 800a6c0:	3101      	adds	r1, #1
 800a6c2:	f7ff ff79 	bl	800a5b8 <_Balloc>
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	b928      	cbnz	r0, 800a6d6 <__multadd+0x5a>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <__multadd+0x84>)
 800a6ce:	480d      	ldr	r0, [pc, #52]	; (800a704 <__multadd+0x88>)
 800a6d0:	21b5      	movs	r1, #181	; 0xb5
 800a6d2:	f001 f85b 	bl	800b78c <__assert_func>
 800a6d6:	6922      	ldr	r2, [r4, #16]
 800a6d8:	3202      	adds	r2, #2
 800a6da:	f104 010c 	add.w	r1, r4, #12
 800a6de:	0092      	lsls	r2, r2, #2
 800a6e0:	300c      	adds	r0, #12
 800a6e2:	f7fc fe63 	bl	80073ac <memcpy>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff ffa5 	bl	800a638 <_Bfree>
 800a6ee:	4644      	mov	r4, r8
 800a6f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	615e      	str	r6, [r3, #20]
 800a6f8:	6125      	str	r5, [r4, #16]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a700:	0800bd90 	.word	0x0800bd90
 800a704:	0800be80 	.word	0x0800be80

0800a708 <__s2b>:
 800a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	460c      	mov	r4, r1
 800a70e:	4615      	mov	r5, r2
 800a710:	461f      	mov	r7, r3
 800a712:	2209      	movs	r2, #9
 800a714:	3308      	adds	r3, #8
 800a716:	4606      	mov	r6, r0
 800a718:	fb93 f3f2 	sdiv	r3, r3, r2
 800a71c:	2100      	movs	r1, #0
 800a71e:	2201      	movs	r2, #1
 800a720:	429a      	cmp	r2, r3
 800a722:	db09      	blt.n	800a738 <__s2b+0x30>
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff ff47 	bl	800a5b8 <_Balloc>
 800a72a:	b940      	cbnz	r0, 800a73e <__s2b+0x36>
 800a72c:	4602      	mov	r2, r0
 800a72e:	4b19      	ldr	r3, [pc, #100]	; (800a794 <__s2b+0x8c>)
 800a730:	4819      	ldr	r0, [pc, #100]	; (800a798 <__s2b+0x90>)
 800a732:	21ce      	movs	r1, #206	; 0xce
 800a734:	f001 f82a 	bl	800b78c <__assert_func>
 800a738:	0052      	lsls	r2, r2, #1
 800a73a:	3101      	adds	r1, #1
 800a73c:	e7f0      	b.n	800a720 <__s2b+0x18>
 800a73e:	9b08      	ldr	r3, [sp, #32]
 800a740:	6143      	str	r3, [r0, #20]
 800a742:	2d09      	cmp	r5, #9
 800a744:	f04f 0301 	mov.w	r3, #1
 800a748:	6103      	str	r3, [r0, #16]
 800a74a:	dd16      	ble.n	800a77a <__s2b+0x72>
 800a74c:	f104 0909 	add.w	r9, r4, #9
 800a750:	46c8      	mov	r8, r9
 800a752:	442c      	add	r4, r5
 800a754:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a758:	4601      	mov	r1, r0
 800a75a:	3b30      	subs	r3, #48	; 0x30
 800a75c:	220a      	movs	r2, #10
 800a75e:	4630      	mov	r0, r6
 800a760:	f7ff ff8c 	bl	800a67c <__multadd>
 800a764:	45a0      	cmp	r8, r4
 800a766:	d1f5      	bne.n	800a754 <__s2b+0x4c>
 800a768:	f1a5 0408 	sub.w	r4, r5, #8
 800a76c:	444c      	add	r4, r9
 800a76e:	1b2d      	subs	r5, r5, r4
 800a770:	1963      	adds	r3, r4, r5
 800a772:	42bb      	cmp	r3, r7
 800a774:	db04      	blt.n	800a780 <__s2b+0x78>
 800a776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77a:	340a      	adds	r4, #10
 800a77c:	2509      	movs	r5, #9
 800a77e:	e7f6      	b.n	800a76e <__s2b+0x66>
 800a780:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a784:	4601      	mov	r1, r0
 800a786:	3b30      	subs	r3, #48	; 0x30
 800a788:	220a      	movs	r2, #10
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ff76 	bl	800a67c <__multadd>
 800a790:	e7ee      	b.n	800a770 <__s2b+0x68>
 800a792:	bf00      	nop
 800a794:	0800bd90 	.word	0x0800bd90
 800a798:	0800be80 	.word	0x0800be80

0800a79c <__hi0bits>:
 800a79c:	0c02      	lsrs	r2, r0, #16
 800a79e:	0412      	lsls	r2, r2, #16
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	b9ca      	cbnz	r2, 800a7d8 <__hi0bits+0x3c>
 800a7a4:	0403      	lsls	r3, r0, #16
 800a7a6:	2010      	movs	r0, #16
 800a7a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a7ac:	bf04      	itt	eq
 800a7ae:	021b      	lsleq	r3, r3, #8
 800a7b0:	3008      	addeq	r0, #8
 800a7b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a7b6:	bf04      	itt	eq
 800a7b8:	011b      	lsleq	r3, r3, #4
 800a7ba:	3004      	addeq	r0, #4
 800a7bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a7c0:	bf04      	itt	eq
 800a7c2:	009b      	lsleq	r3, r3, #2
 800a7c4:	3002      	addeq	r0, #2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	db05      	blt.n	800a7d6 <__hi0bits+0x3a>
 800a7ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a7ce:	f100 0001 	add.w	r0, r0, #1
 800a7d2:	bf08      	it	eq
 800a7d4:	2020      	moveq	r0, #32
 800a7d6:	4770      	bx	lr
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e7e5      	b.n	800a7a8 <__hi0bits+0xc>

0800a7dc <__lo0bits>:
 800a7dc:	6803      	ldr	r3, [r0, #0]
 800a7de:	4602      	mov	r2, r0
 800a7e0:	f013 0007 	ands.w	r0, r3, #7
 800a7e4:	d00b      	beq.n	800a7fe <__lo0bits+0x22>
 800a7e6:	07d9      	lsls	r1, r3, #31
 800a7e8:	d421      	bmi.n	800a82e <__lo0bits+0x52>
 800a7ea:	0798      	lsls	r0, r3, #30
 800a7ec:	bf49      	itett	mi
 800a7ee:	085b      	lsrmi	r3, r3, #1
 800a7f0:	089b      	lsrpl	r3, r3, #2
 800a7f2:	2001      	movmi	r0, #1
 800a7f4:	6013      	strmi	r3, [r2, #0]
 800a7f6:	bf5c      	itt	pl
 800a7f8:	6013      	strpl	r3, [r2, #0]
 800a7fa:	2002      	movpl	r0, #2
 800a7fc:	4770      	bx	lr
 800a7fe:	b299      	uxth	r1, r3
 800a800:	b909      	cbnz	r1, 800a806 <__lo0bits+0x2a>
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	2010      	movs	r0, #16
 800a806:	b2d9      	uxtb	r1, r3
 800a808:	b909      	cbnz	r1, 800a80e <__lo0bits+0x32>
 800a80a:	3008      	adds	r0, #8
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	0719      	lsls	r1, r3, #28
 800a810:	bf04      	itt	eq
 800a812:	091b      	lsreq	r3, r3, #4
 800a814:	3004      	addeq	r0, #4
 800a816:	0799      	lsls	r1, r3, #30
 800a818:	bf04      	itt	eq
 800a81a:	089b      	lsreq	r3, r3, #2
 800a81c:	3002      	addeq	r0, #2
 800a81e:	07d9      	lsls	r1, r3, #31
 800a820:	d403      	bmi.n	800a82a <__lo0bits+0x4e>
 800a822:	085b      	lsrs	r3, r3, #1
 800a824:	f100 0001 	add.w	r0, r0, #1
 800a828:	d003      	beq.n	800a832 <__lo0bits+0x56>
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	4770      	bx	lr
 800a82e:	2000      	movs	r0, #0
 800a830:	4770      	bx	lr
 800a832:	2020      	movs	r0, #32
 800a834:	4770      	bx	lr
	...

0800a838 <__i2b>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	2101      	movs	r1, #1
 800a83e:	f7ff febb 	bl	800a5b8 <_Balloc>
 800a842:	4602      	mov	r2, r0
 800a844:	b928      	cbnz	r0, 800a852 <__i2b+0x1a>
 800a846:	4b05      	ldr	r3, [pc, #20]	; (800a85c <__i2b+0x24>)
 800a848:	4805      	ldr	r0, [pc, #20]	; (800a860 <__i2b+0x28>)
 800a84a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a84e:	f000 ff9d 	bl	800b78c <__assert_func>
 800a852:	2301      	movs	r3, #1
 800a854:	6144      	str	r4, [r0, #20]
 800a856:	6103      	str	r3, [r0, #16]
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	bf00      	nop
 800a85c:	0800bd90 	.word	0x0800bd90
 800a860:	0800be80 	.word	0x0800be80

0800a864 <__multiply>:
 800a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a868:	4691      	mov	r9, r2
 800a86a:	690a      	ldr	r2, [r1, #16]
 800a86c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a870:	429a      	cmp	r2, r3
 800a872:	bfb8      	it	lt
 800a874:	460b      	movlt	r3, r1
 800a876:	460c      	mov	r4, r1
 800a878:	bfbc      	itt	lt
 800a87a:	464c      	movlt	r4, r9
 800a87c:	4699      	movlt	r9, r3
 800a87e:	6927      	ldr	r7, [r4, #16]
 800a880:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a884:	68a3      	ldr	r3, [r4, #8]
 800a886:	6861      	ldr	r1, [r4, #4]
 800a888:	eb07 060a 	add.w	r6, r7, sl
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	b085      	sub	sp, #20
 800a890:	bfb8      	it	lt
 800a892:	3101      	addlt	r1, #1
 800a894:	f7ff fe90 	bl	800a5b8 <_Balloc>
 800a898:	b930      	cbnz	r0, 800a8a8 <__multiply+0x44>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b43      	ldr	r3, [pc, #268]	; (800a9ac <__multiply+0x148>)
 800a89e:	4844      	ldr	r0, [pc, #272]	; (800a9b0 <__multiply+0x14c>)
 800a8a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a8a4:	f000 ff72 	bl	800b78c <__assert_func>
 800a8a8:	f100 0514 	add.w	r5, r0, #20
 800a8ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8b0:	462b      	mov	r3, r5
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4543      	cmp	r3, r8
 800a8b6:	d321      	bcc.n	800a8fc <__multiply+0x98>
 800a8b8:	f104 0314 	add.w	r3, r4, #20
 800a8bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8c0:	f109 0314 	add.w	r3, r9, #20
 800a8c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8c8:	9202      	str	r2, [sp, #8]
 800a8ca:	1b3a      	subs	r2, r7, r4
 800a8cc:	3a15      	subs	r2, #21
 800a8ce:	f022 0203 	bic.w	r2, r2, #3
 800a8d2:	3204      	adds	r2, #4
 800a8d4:	f104 0115 	add.w	r1, r4, #21
 800a8d8:	428f      	cmp	r7, r1
 800a8da:	bf38      	it	cc
 800a8dc:	2204      	movcc	r2, #4
 800a8de:	9201      	str	r2, [sp, #4]
 800a8e0:	9a02      	ldr	r2, [sp, #8]
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d80c      	bhi.n	800a902 <__multiply+0x9e>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	dd03      	ble.n	800a8f4 <__multiply+0x90>
 800a8ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d059      	beq.n	800a9a8 <__multiply+0x144>
 800a8f4:	6106      	str	r6, [r0, #16]
 800a8f6:	b005      	add	sp, #20
 800a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fc:	f843 2b04 	str.w	r2, [r3], #4
 800a900:	e7d8      	b.n	800a8b4 <__multiply+0x50>
 800a902:	f8b3 a000 	ldrh.w	sl, [r3]
 800a906:	f1ba 0f00 	cmp.w	sl, #0
 800a90a:	d023      	beq.n	800a954 <__multiply+0xf0>
 800a90c:	f104 0e14 	add.w	lr, r4, #20
 800a910:	46a9      	mov	r9, r5
 800a912:	f04f 0c00 	mov.w	ip, #0
 800a916:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a91a:	f8d9 1000 	ldr.w	r1, [r9]
 800a91e:	fa1f fb82 	uxth.w	fp, r2
 800a922:	b289      	uxth	r1, r1
 800a924:	fb0a 110b 	mla	r1, sl, fp, r1
 800a928:	4461      	add	r1, ip
 800a92a:	f8d9 c000 	ldr.w	ip, [r9]
 800a92e:	0c12      	lsrs	r2, r2, #16
 800a930:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a934:	fb0a c202 	mla	r2, sl, r2, ip
 800a938:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a93c:	b289      	uxth	r1, r1
 800a93e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a942:	4577      	cmp	r7, lr
 800a944:	f849 1b04 	str.w	r1, [r9], #4
 800a948:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a94c:	d8e3      	bhi.n	800a916 <__multiply+0xb2>
 800a94e:	9a01      	ldr	r2, [sp, #4]
 800a950:	f845 c002 	str.w	ip, [r5, r2]
 800a954:	9a03      	ldr	r2, [sp, #12]
 800a956:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a95a:	3304      	adds	r3, #4
 800a95c:	f1b9 0f00 	cmp.w	r9, #0
 800a960:	d020      	beq.n	800a9a4 <__multiply+0x140>
 800a962:	6829      	ldr	r1, [r5, #0]
 800a964:	f104 0c14 	add.w	ip, r4, #20
 800a968:	46ae      	mov	lr, r5
 800a96a:	f04f 0a00 	mov.w	sl, #0
 800a96e:	f8bc b000 	ldrh.w	fp, [ip]
 800a972:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a976:	fb09 220b 	mla	r2, r9, fp, r2
 800a97a:	4492      	add	sl, r2
 800a97c:	b289      	uxth	r1, r1
 800a97e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a982:	f84e 1b04 	str.w	r1, [lr], #4
 800a986:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a98a:	f8be 1000 	ldrh.w	r1, [lr]
 800a98e:	0c12      	lsrs	r2, r2, #16
 800a990:	fb09 1102 	mla	r1, r9, r2, r1
 800a994:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a998:	4567      	cmp	r7, ip
 800a99a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a99e:	d8e6      	bhi.n	800a96e <__multiply+0x10a>
 800a9a0:	9a01      	ldr	r2, [sp, #4]
 800a9a2:	50a9      	str	r1, [r5, r2]
 800a9a4:	3504      	adds	r5, #4
 800a9a6:	e79b      	b.n	800a8e0 <__multiply+0x7c>
 800a9a8:	3e01      	subs	r6, #1
 800a9aa:	e79d      	b.n	800a8e8 <__multiply+0x84>
 800a9ac:	0800bd90 	.word	0x0800bd90
 800a9b0:	0800be80 	.word	0x0800be80

0800a9b4 <__pow5mult>:
 800a9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	4615      	mov	r5, r2
 800a9ba:	f012 0203 	ands.w	r2, r2, #3
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	d007      	beq.n	800a9d4 <__pow5mult+0x20>
 800a9c4:	4c25      	ldr	r4, [pc, #148]	; (800aa5c <__pow5mult+0xa8>)
 800a9c6:	3a01      	subs	r2, #1
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9ce:	f7ff fe55 	bl	800a67c <__multadd>
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	10ad      	asrs	r5, r5, #2
 800a9d6:	d03d      	beq.n	800aa54 <__pow5mult+0xa0>
 800a9d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9da:	b97c      	cbnz	r4, 800a9fc <__pow5mult+0x48>
 800a9dc:	2010      	movs	r0, #16
 800a9de:	f7ff fdd1 	bl	800a584 <malloc>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6270      	str	r0, [r6, #36]	; 0x24
 800a9e6:	b928      	cbnz	r0, 800a9f4 <__pow5mult+0x40>
 800a9e8:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <__pow5mult+0xac>)
 800a9ea:	481e      	ldr	r0, [pc, #120]	; (800aa64 <__pow5mult+0xb0>)
 800a9ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9f0:	f000 fecc 	bl	800b78c <__assert_func>
 800a9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9f8:	6004      	str	r4, [r0, #0]
 800a9fa:	60c4      	str	r4, [r0, #12]
 800a9fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa04:	b94c      	cbnz	r4, 800aa1a <__pow5mult+0x66>
 800aa06:	f240 2171 	movw	r1, #625	; 0x271
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff ff14 	bl	800a838 <__i2b>
 800aa10:	2300      	movs	r3, #0
 800aa12:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa16:	4604      	mov	r4, r0
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	f04f 0900 	mov.w	r9, #0
 800aa1e:	07eb      	lsls	r3, r5, #31
 800aa20:	d50a      	bpl.n	800aa38 <__pow5mult+0x84>
 800aa22:	4639      	mov	r1, r7
 800aa24:	4622      	mov	r2, r4
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ff1c 	bl	800a864 <__multiply>
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4680      	mov	r8, r0
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7ff fe01 	bl	800a638 <_Bfree>
 800aa36:	4647      	mov	r7, r8
 800aa38:	106d      	asrs	r5, r5, #1
 800aa3a:	d00b      	beq.n	800aa54 <__pow5mult+0xa0>
 800aa3c:	6820      	ldr	r0, [r4, #0]
 800aa3e:	b938      	cbnz	r0, 800aa50 <__pow5mult+0x9c>
 800aa40:	4622      	mov	r2, r4
 800aa42:	4621      	mov	r1, r4
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7ff ff0d 	bl	800a864 <__multiply>
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	f8c0 9000 	str.w	r9, [r0]
 800aa50:	4604      	mov	r4, r0
 800aa52:	e7e4      	b.n	800aa1e <__pow5mult+0x6a>
 800aa54:	4638      	mov	r0, r7
 800aa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	bf00      	nop
 800aa5c:	0800bfd0 	.word	0x0800bfd0
 800aa60:	0800bd1e 	.word	0x0800bd1e
 800aa64:	0800be80 	.word	0x0800be80

0800aa68 <__lshift>:
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	6849      	ldr	r1, [r1, #4]
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa76:	68a3      	ldr	r3, [r4, #8]
 800aa78:	4607      	mov	r7, r0
 800aa7a:	4691      	mov	r9, r2
 800aa7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa80:	f108 0601 	add.w	r6, r8, #1
 800aa84:	42b3      	cmp	r3, r6
 800aa86:	db0b      	blt.n	800aaa0 <__lshift+0x38>
 800aa88:	4638      	mov	r0, r7
 800aa8a:	f7ff fd95 	bl	800a5b8 <_Balloc>
 800aa8e:	4605      	mov	r5, r0
 800aa90:	b948      	cbnz	r0, 800aaa6 <__lshift+0x3e>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <__lshift+0xd8>)
 800aa96:	482b      	ldr	r0, [pc, #172]	; (800ab44 <__lshift+0xdc>)
 800aa98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa9c:	f000 fe76 	bl	800b78c <__assert_func>
 800aaa0:	3101      	adds	r1, #1
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	e7ee      	b.n	800aa84 <__lshift+0x1c>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f100 0114 	add.w	r1, r0, #20
 800aaac:	f100 0210 	add.w	r2, r0, #16
 800aab0:	4618      	mov	r0, r3
 800aab2:	4553      	cmp	r3, sl
 800aab4:	db37      	blt.n	800ab26 <__lshift+0xbe>
 800aab6:	6920      	ldr	r0, [r4, #16]
 800aab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aabc:	f104 0314 	add.w	r3, r4, #20
 800aac0:	f019 091f 	ands.w	r9, r9, #31
 800aac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aac8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aacc:	d02f      	beq.n	800ab2e <__lshift+0xc6>
 800aace:	f1c9 0e20 	rsb	lr, r9, #32
 800aad2:	468a      	mov	sl, r1
 800aad4:	f04f 0c00 	mov.w	ip, #0
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	fa02 f209 	lsl.w	r2, r2, r9
 800aade:	ea42 020c 	orr.w	r2, r2, ip
 800aae2:	f84a 2b04 	str.w	r2, [sl], #4
 800aae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaea:	4298      	cmp	r0, r3
 800aaec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aaf0:	d8f2      	bhi.n	800aad8 <__lshift+0x70>
 800aaf2:	1b03      	subs	r3, r0, r4
 800aaf4:	3b15      	subs	r3, #21
 800aaf6:	f023 0303 	bic.w	r3, r3, #3
 800aafa:	3304      	adds	r3, #4
 800aafc:	f104 0215 	add.w	r2, r4, #21
 800ab00:	4290      	cmp	r0, r2
 800ab02:	bf38      	it	cc
 800ab04:	2304      	movcc	r3, #4
 800ab06:	f841 c003 	str.w	ip, [r1, r3]
 800ab0a:	f1bc 0f00 	cmp.w	ip, #0
 800ab0e:	d001      	beq.n	800ab14 <__lshift+0xac>
 800ab10:	f108 0602 	add.w	r6, r8, #2
 800ab14:	3e01      	subs	r6, #1
 800ab16:	4638      	mov	r0, r7
 800ab18:	612e      	str	r6, [r5, #16]
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	f7ff fd8c 	bl	800a638 <_Bfree>
 800ab20:	4628      	mov	r0, r5
 800ab22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab26:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	e7c1      	b.n	800aab2 <__lshift+0x4a>
 800ab2e:	3904      	subs	r1, #4
 800ab30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab34:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab38:	4298      	cmp	r0, r3
 800ab3a:	d8f9      	bhi.n	800ab30 <__lshift+0xc8>
 800ab3c:	e7ea      	b.n	800ab14 <__lshift+0xac>
 800ab3e:	bf00      	nop
 800ab40:	0800bd90 	.word	0x0800bd90
 800ab44:	0800be80 	.word	0x0800be80

0800ab48 <__mcmp>:
 800ab48:	690a      	ldr	r2, [r1, #16]
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6900      	ldr	r0, [r0, #16]
 800ab4e:	1a80      	subs	r0, r0, r2
 800ab50:	b530      	push	{r4, r5, lr}
 800ab52:	d10d      	bne.n	800ab70 <__mcmp+0x28>
 800ab54:	3314      	adds	r3, #20
 800ab56:	3114      	adds	r1, #20
 800ab58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab68:	4295      	cmp	r5, r2
 800ab6a:	d002      	beq.n	800ab72 <__mcmp+0x2a>
 800ab6c:	d304      	bcc.n	800ab78 <__mcmp+0x30>
 800ab6e:	2001      	movs	r0, #1
 800ab70:	bd30      	pop	{r4, r5, pc}
 800ab72:	42a3      	cmp	r3, r4
 800ab74:	d3f4      	bcc.n	800ab60 <__mcmp+0x18>
 800ab76:	e7fb      	b.n	800ab70 <__mcmp+0x28>
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	e7f8      	b.n	800ab70 <__mcmp+0x28>
	...

0800ab80 <__mdiff>:
 800ab80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	460d      	mov	r5, r1
 800ab86:	4607      	mov	r7, r0
 800ab88:	4611      	mov	r1, r2
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	f7ff ffdb 	bl	800ab48 <__mcmp>
 800ab92:	1e06      	subs	r6, r0, #0
 800ab94:	d111      	bne.n	800abba <__mdiff+0x3a>
 800ab96:	4631      	mov	r1, r6
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f7ff fd0d 	bl	800a5b8 <_Balloc>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	b928      	cbnz	r0, 800abae <__mdiff+0x2e>
 800aba2:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <__mdiff+0x108>)
 800aba4:	f240 2132 	movw	r1, #562	; 0x232
 800aba8:	4838      	ldr	r0, [pc, #224]	; (800ac8c <__mdiff+0x10c>)
 800abaa:	f000 fdef 	bl	800b78c <__assert_func>
 800abae:	2301      	movs	r3, #1
 800abb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800abb4:	4610      	mov	r0, r2
 800abb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	bfa4      	itt	ge
 800abbc:	4623      	movge	r3, r4
 800abbe:	462c      	movge	r4, r5
 800abc0:	4638      	mov	r0, r7
 800abc2:	6861      	ldr	r1, [r4, #4]
 800abc4:	bfa6      	itte	ge
 800abc6:	461d      	movge	r5, r3
 800abc8:	2600      	movge	r6, #0
 800abca:	2601      	movlt	r6, #1
 800abcc:	f7ff fcf4 	bl	800a5b8 <_Balloc>
 800abd0:	4602      	mov	r2, r0
 800abd2:	b918      	cbnz	r0, 800abdc <__mdiff+0x5c>
 800abd4:	4b2c      	ldr	r3, [pc, #176]	; (800ac88 <__mdiff+0x108>)
 800abd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abda:	e7e5      	b.n	800aba8 <__mdiff+0x28>
 800abdc:	6927      	ldr	r7, [r4, #16]
 800abde:	60c6      	str	r6, [r0, #12]
 800abe0:	692e      	ldr	r6, [r5, #16]
 800abe2:	f104 0014 	add.w	r0, r4, #20
 800abe6:	f105 0914 	add.w	r9, r5, #20
 800abea:	f102 0e14 	add.w	lr, r2, #20
 800abee:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800abf2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abf6:	3410      	adds	r4, #16
 800abf8:	46f2      	mov	sl, lr
 800abfa:	2100      	movs	r1, #0
 800abfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac00:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ac04:	fa1f f883 	uxth.w	r8, r3
 800ac08:	fa11 f18b 	uxtah	r1, r1, fp
 800ac0c:	0c1b      	lsrs	r3, r3, #16
 800ac0e:	eba1 0808 	sub.w	r8, r1, r8
 800ac12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac1a:	fa1f f888 	uxth.w	r8, r8
 800ac1e:	1419      	asrs	r1, r3, #16
 800ac20:	454e      	cmp	r6, r9
 800ac22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac26:	f84a 3b04 	str.w	r3, [sl], #4
 800ac2a:	d8e7      	bhi.n	800abfc <__mdiff+0x7c>
 800ac2c:	1b73      	subs	r3, r6, r5
 800ac2e:	3b15      	subs	r3, #21
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	3304      	adds	r3, #4
 800ac36:	3515      	adds	r5, #21
 800ac38:	42ae      	cmp	r6, r5
 800ac3a:	bf38      	it	cc
 800ac3c:	2304      	movcc	r3, #4
 800ac3e:	4418      	add	r0, r3
 800ac40:	4473      	add	r3, lr
 800ac42:	469e      	mov	lr, r3
 800ac44:	4606      	mov	r6, r0
 800ac46:	4566      	cmp	r6, ip
 800ac48:	d30e      	bcc.n	800ac68 <__mdiff+0xe8>
 800ac4a:	f10c 0103 	add.w	r1, ip, #3
 800ac4e:	1a09      	subs	r1, r1, r0
 800ac50:	f021 0103 	bic.w	r1, r1, #3
 800ac54:	3803      	subs	r0, #3
 800ac56:	4584      	cmp	ip, r0
 800ac58:	bf38      	it	cc
 800ac5a:	2100      	movcc	r1, #0
 800ac5c:	4419      	add	r1, r3
 800ac5e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ac62:	b17b      	cbz	r3, 800ac84 <__mdiff+0x104>
 800ac64:	6117      	str	r7, [r2, #16]
 800ac66:	e7a5      	b.n	800abb4 <__mdiff+0x34>
 800ac68:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac6c:	fa11 f488 	uxtah	r4, r1, r8
 800ac70:	1425      	asrs	r5, r4, #16
 800ac72:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800ac76:	b2a4      	uxth	r4, r4
 800ac78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800ac7c:	f84e 4b04 	str.w	r4, [lr], #4
 800ac80:	1429      	asrs	r1, r5, #16
 800ac82:	e7e0      	b.n	800ac46 <__mdiff+0xc6>
 800ac84:	3f01      	subs	r7, #1
 800ac86:	e7ea      	b.n	800ac5e <__mdiff+0xde>
 800ac88:	0800bd90 	.word	0x0800bd90
 800ac8c:	0800be80 	.word	0x0800be80

0800ac90 <__ulp>:
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <__ulp+0x48>)
 800ac92:	400b      	ands	r3, r1
 800ac94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dd02      	ble.n	800aca2 <__ulp+0x12>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4770      	bx	lr
 800aca2:	425b      	negs	r3, r3
 800aca4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aca8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acac:	f04f 0000 	mov.w	r0, #0
 800acb0:	f04f 0100 	mov.w	r1, #0
 800acb4:	da04      	bge.n	800acc0 <__ulp+0x30>
 800acb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acba:	fa43 f102 	asr.w	r1, r3, r2
 800acbe:	4770      	bx	lr
 800acc0:	f1a2 0314 	sub.w	r3, r2, #20
 800acc4:	2b1e      	cmp	r3, #30
 800acc6:	bfda      	itte	le
 800acc8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800accc:	fa22 f303 	lsrle.w	r3, r2, r3
 800acd0:	2301      	movgt	r3, #1
 800acd2:	4618      	mov	r0, r3
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	7ff00000 	.word	0x7ff00000

0800acdc <__b2d>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	6907      	ldr	r7, [r0, #16]
 800ace2:	f100 0914 	add.w	r9, r0, #20
 800ace6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800acea:	f1a7 0804 	sub.w	r8, r7, #4
 800acee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff fd52 	bl	800a79c <__hi0bits>
 800acf8:	f1c0 0320 	rsb	r3, r0, #32
 800acfc:	280a      	cmp	r0, #10
 800acfe:	600b      	str	r3, [r1, #0]
 800ad00:	491f      	ldr	r1, [pc, #124]	; (800ad80 <__b2d+0xa4>)
 800ad02:	dc17      	bgt.n	800ad34 <__b2d+0x58>
 800ad04:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad08:	45c1      	cmp	r9, r8
 800ad0a:	fa26 f30c 	lsr.w	r3, r6, ip
 800ad0e:	bf38      	it	cc
 800ad10:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ad14:	ea43 0501 	orr.w	r5, r3, r1
 800ad18:	bf28      	it	cs
 800ad1a:	2200      	movcs	r2, #0
 800ad1c:	f100 0315 	add.w	r3, r0, #21
 800ad20:	fa06 f303 	lsl.w	r3, r6, r3
 800ad24:	fa22 f20c 	lsr.w	r2, r2, ip
 800ad28:	ea43 0402 	orr.w	r4, r3, r2
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad34:	45c1      	cmp	r9, r8
 800ad36:	bf3a      	itte	cc
 800ad38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ad3c:	f1a7 0808 	subcc.w	r8, r7, #8
 800ad40:	2200      	movcs	r2, #0
 800ad42:	f1b0 030b 	subs.w	r3, r0, #11
 800ad46:	d016      	beq.n	800ad76 <__b2d+0x9a>
 800ad48:	f1c3 0720 	rsb	r7, r3, #32
 800ad4c:	fa22 f107 	lsr.w	r1, r2, r7
 800ad50:	45c8      	cmp	r8, r9
 800ad52:	fa06 f603 	lsl.w	r6, r6, r3
 800ad56:	ea46 0601 	orr.w	r6, r6, r1
 800ad5a:	bf8c      	ite	hi
 800ad5c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ad60:	2100      	movls	r1, #0
 800ad62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ad66:	fa02 f003 	lsl.w	r0, r2, r3
 800ad6a:	40f9      	lsrs	r1, r7
 800ad6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ad70:	ea40 0401 	orr.w	r4, r0, r1
 800ad74:	e7da      	b.n	800ad2c <__b2d+0x50>
 800ad76:	ea46 0501 	orr.w	r5, r6, r1
 800ad7a:	4614      	mov	r4, r2
 800ad7c:	e7d6      	b.n	800ad2c <__b2d+0x50>
 800ad7e:	bf00      	nop
 800ad80:	3ff00000 	.word	0x3ff00000

0800ad84 <__d2b>:
 800ad84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad88:	2101      	movs	r1, #1
 800ad8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ad8e:	4690      	mov	r8, r2
 800ad90:	461d      	mov	r5, r3
 800ad92:	f7ff fc11 	bl	800a5b8 <_Balloc>
 800ad96:	4604      	mov	r4, r0
 800ad98:	b930      	cbnz	r0, 800ada8 <__d2b+0x24>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b25      	ldr	r3, [pc, #148]	; (800ae34 <__d2b+0xb0>)
 800ad9e:	4826      	ldr	r0, [pc, #152]	; (800ae38 <__d2b+0xb4>)
 800ada0:	f240 310a 	movw	r1, #778	; 0x30a
 800ada4:	f000 fcf2 	bl	800b78c <__assert_func>
 800ada8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800adac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800adb0:	bb2d      	cbnz	r5, 800adfe <__d2b+0x7a>
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	f1b8 0300 	subs.w	r3, r8, #0
 800adb8:	d026      	beq.n	800ae08 <__d2b+0x84>
 800adba:	4668      	mov	r0, sp
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	f7ff fd0d 	bl	800a7dc <__lo0bits>
 800adc2:	9900      	ldr	r1, [sp, #0]
 800adc4:	b1f0      	cbz	r0, 800ae04 <__d2b+0x80>
 800adc6:	9a01      	ldr	r2, [sp, #4]
 800adc8:	f1c0 0320 	rsb	r3, r0, #32
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	430b      	orrs	r3, r1
 800add2:	40c2      	lsrs	r2, r0
 800add4:	6163      	str	r3, [r4, #20]
 800add6:	9201      	str	r2, [sp, #4]
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	61a3      	str	r3, [r4, #24]
 800addc:	2b00      	cmp	r3, #0
 800adde:	bf14      	ite	ne
 800ade0:	2102      	movne	r1, #2
 800ade2:	2101      	moveq	r1, #1
 800ade4:	6121      	str	r1, [r4, #16]
 800ade6:	b1c5      	cbz	r5, 800ae1a <__d2b+0x96>
 800ade8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adec:	4405      	add	r5, r0
 800adee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adf2:	603d      	str	r5, [r7, #0]
 800adf4:	6030      	str	r0, [r6, #0]
 800adf6:	4620      	mov	r0, r4
 800adf8:	b002      	add	sp, #8
 800adfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae02:	e7d6      	b.n	800adb2 <__d2b+0x2e>
 800ae04:	6161      	str	r1, [r4, #20]
 800ae06:	e7e7      	b.n	800add8 <__d2b+0x54>
 800ae08:	a801      	add	r0, sp, #4
 800ae0a:	f7ff fce7 	bl	800a7dc <__lo0bits>
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	6163      	str	r3, [r4, #20]
 800ae12:	2101      	movs	r1, #1
 800ae14:	6121      	str	r1, [r4, #16]
 800ae16:	3020      	adds	r0, #32
 800ae18:	e7e5      	b.n	800ade6 <__d2b+0x62>
 800ae1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ae1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae22:	6038      	str	r0, [r7, #0]
 800ae24:	6918      	ldr	r0, [r3, #16]
 800ae26:	f7ff fcb9 	bl	800a79c <__hi0bits>
 800ae2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ae2e:	6031      	str	r1, [r6, #0]
 800ae30:	e7e1      	b.n	800adf6 <__d2b+0x72>
 800ae32:	bf00      	nop
 800ae34:	0800bd90 	.word	0x0800bd90
 800ae38:	0800be80 	.word	0x0800be80

0800ae3c <__ratio>:
 800ae3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	4688      	mov	r8, r1
 800ae42:	4669      	mov	r1, sp
 800ae44:	4681      	mov	r9, r0
 800ae46:	f7ff ff49 	bl	800acdc <__b2d>
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	4640      	mov	r0, r8
 800ae52:	a901      	add	r1, sp, #4
 800ae54:	f7ff ff42 	bl	800acdc <__b2d>
 800ae58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ae60:	eba3 0c02 	sub.w	ip, r3, r2
 800ae64:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae68:	1a9b      	subs	r3, r3, r2
 800ae6a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfd5      	itete	le
 800ae72:	460a      	movle	r2, r1
 800ae74:	462a      	movgt	r2, r5
 800ae76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ae7e:	468b      	mov	fp, r1
 800ae80:	bfd8      	it	le
 800ae82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ae86:	465b      	mov	r3, fp
 800ae88:	4602      	mov	r2, r0
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7f5 fcfd 	bl	800088c <__aeabi_ddiv>
 800ae92:	b003      	add	sp, #12
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae98 <__copybits>:
 800ae98:	3901      	subs	r1, #1
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	1149      	asrs	r1, r1, #5
 800ae9e:	6914      	ldr	r4, [r2, #16]
 800aea0:	3101      	adds	r1, #1
 800aea2:	f102 0314 	add.w	r3, r2, #20
 800aea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aeaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aeae:	1f05      	subs	r5, r0, #4
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	d30c      	bcc.n	800aece <__copybits+0x36>
 800aeb4:	1aa3      	subs	r3, r4, r2
 800aeb6:	3b11      	subs	r3, #17
 800aeb8:	f023 0303 	bic.w	r3, r3, #3
 800aebc:	3211      	adds	r2, #17
 800aebe:	42a2      	cmp	r2, r4
 800aec0:	bf88      	it	hi
 800aec2:	2300      	movhi	r3, #0
 800aec4:	4418      	add	r0, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	4288      	cmp	r0, r1
 800aeca:	d305      	bcc.n	800aed8 <__copybits+0x40>
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
 800aece:	f853 6b04 	ldr.w	r6, [r3], #4
 800aed2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aed6:	e7eb      	b.n	800aeb0 <__copybits+0x18>
 800aed8:	f840 3b04 	str.w	r3, [r0], #4
 800aedc:	e7f4      	b.n	800aec8 <__copybits+0x30>

0800aede <__any_on>:
 800aede:	f100 0214 	add.w	r2, r0, #20
 800aee2:	6900      	ldr	r0, [r0, #16]
 800aee4:	114b      	asrs	r3, r1, #5
 800aee6:	4298      	cmp	r0, r3
 800aee8:	b510      	push	{r4, lr}
 800aeea:	db11      	blt.n	800af10 <__any_on+0x32>
 800aeec:	dd0a      	ble.n	800af04 <__any_on+0x26>
 800aeee:	f011 011f 	ands.w	r1, r1, #31
 800aef2:	d007      	beq.n	800af04 <__any_on+0x26>
 800aef4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aef8:	fa24 f001 	lsr.w	r0, r4, r1
 800aefc:	fa00 f101 	lsl.w	r1, r0, r1
 800af00:	428c      	cmp	r4, r1
 800af02:	d10b      	bne.n	800af1c <__any_on+0x3e>
 800af04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af08:	4293      	cmp	r3, r2
 800af0a:	d803      	bhi.n	800af14 <__any_on+0x36>
 800af0c:	2000      	movs	r0, #0
 800af0e:	bd10      	pop	{r4, pc}
 800af10:	4603      	mov	r3, r0
 800af12:	e7f7      	b.n	800af04 <__any_on+0x26>
 800af14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af18:	2900      	cmp	r1, #0
 800af1a:	d0f5      	beq.n	800af08 <__any_on+0x2a>
 800af1c:	2001      	movs	r0, #1
 800af1e:	e7f6      	b.n	800af0e <__any_on+0x30>

0800af20 <_calloc_r>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	fba1 5402 	umull	r5, r4, r1, r2
 800af26:	b934      	cbnz	r4, 800af36 <_calloc_r+0x16>
 800af28:	4629      	mov	r1, r5
 800af2a:	f000 f877 	bl	800b01c <_malloc_r>
 800af2e:	4606      	mov	r6, r0
 800af30:	b928      	cbnz	r0, 800af3e <_calloc_r+0x1e>
 800af32:	4630      	mov	r0, r6
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	220c      	movs	r2, #12
 800af38:	6002      	str	r2, [r0, #0]
 800af3a:	2600      	movs	r6, #0
 800af3c:	e7f9      	b.n	800af32 <_calloc_r+0x12>
 800af3e:	462a      	mov	r2, r5
 800af40:	4621      	mov	r1, r4
 800af42:	f7fc fa41 	bl	80073c8 <memset>
 800af46:	e7f4      	b.n	800af32 <_calloc_r+0x12>

0800af48 <_free_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4605      	mov	r5, r0
 800af4c:	2900      	cmp	r1, #0
 800af4e:	d041      	beq.n	800afd4 <_free_r+0x8c>
 800af50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af54:	1f0c      	subs	r4, r1, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfb8      	it	lt
 800af5a:	18e4      	addlt	r4, r4, r3
 800af5c:	f000 fca4 	bl	800b8a8 <__malloc_lock>
 800af60:	4a1d      	ldr	r2, [pc, #116]	; (800afd8 <_free_r+0x90>)
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	b933      	cbnz	r3, 800af74 <_free_r+0x2c>
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	6014      	str	r4, [r2, #0]
 800af6a:	4628      	mov	r0, r5
 800af6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af70:	f000 bca0 	b.w	800b8b4 <__malloc_unlock>
 800af74:	42a3      	cmp	r3, r4
 800af76:	d908      	bls.n	800af8a <_free_r+0x42>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	1821      	adds	r1, r4, r0
 800af7c:	428b      	cmp	r3, r1
 800af7e:	bf01      	itttt	eq
 800af80:	6819      	ldreq	r1, [r3, #0]
 800af82:	685b      	ldreq	r3, [r3, #4]
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	e7ed      	b.n	800af66 <_free_r+0x1e>
 800af8a:	461a      	mov	r2, r3
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b10b      	cbz	r3, 800af94 <_free_r+0x4c>
 800af90:	42a3      	cmp	r3, r4
 800af92:	d9fa      	bls.n	800af8a <_free_r+0x42>
 800af94:	6811      	ldr	r1, [r2, #0]
 800af96:	1850      	adds	r0, r2, r1
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d10b      	bne.n	800afb4 <_free_r+0x6c>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	4401      	add	r1, r0
 800afa0:	1850      	adds	r0, r2, r1
 800afa2:	4283      	cmp	r3, r0
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	d1e0      	bne.n	800af6a <_free_r+0x22>
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	6053      	str	r3, [r2, #4]
 800afae:	4401      	add	r1, r0
 800afb0:	6011      	str	r1, [r2, #0]
 800afb2:	e7da      	b.n	800af6a <_free_r+0x22>
 800afb4:	d902      	bls.n	800afbc <_free_r+0x74>
 800afb6:	230c      	movs	r3, #12
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	e7d6      	b.n	800af6a <_free_r+0x22>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	1821      	adds	r1, r4, r0
 800afc0:	428b      	cmp	r3, r1
 800afc2:	bf04      	itt	eq
 800afc4:	6819      	ldreq	r1, [r3, #0]
 800afc6:	685b      	ldreq	r3, [r3, #4]
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	bf04      	itt	eq
 800afcc:	1809      	addeq	r1, r1, r0
 800afce:	6021      	streq	r1, [r4, #0]
 800afd0:	6054      	str	r4, [r2, #4]
 800afd2:	e7ca      	b.n	800af6a <_free_r+0x22>
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20001524 	.word	0x20001524

0800afdc <sbrk_aligned>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4e0e      	ldr	r6, [pc, #56]	; (800b018 <sbrk_aligned+0x3c>)
 800afe0:	460c      	mov	r4, r1
 800afe2:	6831      	ldr	r1, [r6, #0]
 800afe4:	4605      	mov	r5, r0
 800afe6:	b911      	cbnz	r1, 800afee <sbrk_aligned+0x12>
 800afe8:	f000 fb46 	bl	800b678 <_sbrk_r>
 800afec:	6030      	str	r0, [r6, #0]
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 fb41 	bl	800b678 <_sbrk_r>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	d00a      	beq.n	800b010 <sbrk_aligned+0x34>
 800affa:	1cc4      	adds	r4, r0, #3
 800affc:	f024 0403 	bic.w	r4, r4, #3
 800b000:	42a0      	cmp	r0, r4
 800b002:	d007      	beq.n	800b014 <sbrk_aligned+0x38>
 800b004:	1a21      	subs	r1, r4, r0
 800b006:	4628      	mov	r0, r5
 800b008:	f000 fb36 	bl	800b678 <_sbrk_r>
 800b00c:	3001      	adds	r0, #1
 800b00e:	d101      	bne.n	800b014 <sbrk_aligned+0x38>
 800b010:	f04f 34ff 	mov.w	r4, #4294967295
 800b014:	4620      	mov	r0, r4
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	20001528 	.word	0x20001528

0800b01c <_malloc_r>:
 800b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	1ccd      	adds	r5, r1, #3
 800b022:	f025 0503 	bic.w	r5, r5, #3
 800b026:	3508      	adds	r5, #8
 800b028:	2d0c      	cmp	r5, #12
 800b02a:	bf38      	it	cc
 800b02c:	250c      	movcc	r5, #12
 800b02e:	2d00      	cmp	r5, #0
 800b030:	4607      	mov	r7, r0
 800b032:	db01      	blt.n	800b038 <_malloc_r+0x1c>
 800b034:	42a9      	cmp	r1, r5
 800b036:	d905      	bls.n	800b044 <_malloc_r+0x28>
 800b038:	230c      	movs	r3, #12
 800b03a:	603b      	str	r3, [r7, #0]
 800b03c:	2600      	movs	r6, #0
 800b03e:	4630      	mov	r0, r6
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	4e2e      	ldr	r6, [pc, #184]	; (800b100 <_malloc_r+0xe4>)
 800b046:	f000 fc2f 	bl	800b8a8 <__malloc_lock>
 800b04a:	6833      	ldr	r3, [r6, #0]
 800b04c:	461c      	mov	r4, r3
 800b04e:	bb34      	cbnz	r4, 800b09e <_malloc_r+0x82>
 800b050:	4629      	mov	r1, r5
 800b052:	4638      	mov	r0, r7
 800b054:	f7ff ffc2 	bl	800afdc <sbrk_aligned>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	4604      	mov	r4, r0
 800b05c:	d14d      	bne.n	800b0fa <_malloc_r+0xde>
 800b05e:	6834      	ldr	r4, [r6, #0]
 800b060:	4626      	mov	r6, r4
 800b062:	2e00      	cmp	r6, #0
 800b064:	d140      	bne.n	800b0e8 <_malloc_r+0xcc>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	4631      	mov	r1, r6
 800b06a:	4638      	mov	r0, r7
 800b06c:	eb04 0803 	add.w	r8, r4, r3
 800b070:	f000 fb02 	bl	800b678 <_sbrk_r>
 800b074:	4580      	cmp	r8, r0
 800b076:	d13a      	bne.n	800b0ee <_malloc_r+0xd2>
 800b078:	6821      	ldr	r1, [r4, #0]
 800b07a:	3503      	adds	r5, #3
 800b07c:	1a6d      	subs	r5, r5, r1
 800b07e:	f025 0503 	bic.w	r5, r5, #3
 800b082:	3508      	adds	r5, #8
 800b084:	2d0c      	cmp	r5, #12
 800b086:	bf38      	it	cc
 800b088:	250c      	movcc	r5, #12
 800b08a:	4629      	mov	r1, r5
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff ffa5 	bl	800afdc <sbrk_aligned>
 800b092:	3001      	adds	r0, #1
 800b094:	d02b      	beq.n	800b0ee <_malloc_r+0xd2>
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	442b      	add	r3, r5
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	e00e      	b.n	800b0bc <_malloc_r+0xa0>
 800b09e:	6822      	ldr	r2, [r4, #0]
 800b0a0:	1b52      	subs	r2, r2, r5
 800b0a2:	d41e      	bmi.n	800b0e2 <_malloc_r+0xc6>
 800b0a4:	2a0b      	cmp	r2, #11
 800b0a6:	d916      	bls.n	800b0d6 <_malloc_r+0xba>
 800b0a8:	1961      	adds	r1, r4, r5
 800b0aa:	42a3      	cmp	r3, r4
 800b0ac:	6025      	str	r5, [r4, #0]
 800b0ae:	bf18      	it	ne
 800b0b0:	6059      	strne	r1, [r3, #4]
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	bf08      	it	eq
 800b0b6:	6031      	streq	r1, [r6, #0]
 800b0b8:	5162      	str	r2, [r4, r5]
 800b0ba:	604b      	str	r3, [r1, #4]
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f104 060b 	add.w	r6, r4, #11
 800b0c2:	f000 fbf7 	bl	800b8b4 <__malloc_unlock>
 800b0c6:	f026 0607 	bic.w	r6, r6, #7
 800b0ca:	1d23      	adds	r3, r4, #4
 800b0cc:	1af2      	subs	r2, r6, r3
 800b0ce:	d0b6      	beq.n	800b03e <_malloc_r+0x22>
 800b0d0:	1b9b      	subs	r3, r3, r6
 800b0d2:	50a3      	str	r3, [r4, r2]
 800b0d4:	e7b3      	b.n	800b03e <_malloc_r+0x22>
 800b0d6:	6862      	ldr	r2, [r4, #4]
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	bf0c      	ite	eq
 800b0dc:	6032      	streq	r2, [r6, #0]
 800b0de:	605a      	strne	r2, [r3, #4]
 800b0e0:	e7ec      	b.n	800b0bc <_malloc_r+0xa0>
 800b0e2:	4623      	mov	r3, r4
 800b0e4:	6864      	ldr	r4, [r4, #4]
 800b0e6:	e7b2      	b.n	800b04e <_malloc_r+0x32>
 800b0e8:	4634      	mov	r4, r6
 800b0ea:	6876      	ldr	r6, [r6, #4]
 800b0ec:	e7b9      	b.n	800b062 <_malloc_r+0x46>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	603b      	str	r3, [r7, #0]
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	f000 fbde 	bl	800b8b4 <__malloc_unlock>
 800b0f8:	e7a1      	b.n	800b03e <_malloc_r+0x22>
 800b0fa:	6025      	str	r5, [r4, #0]
 800b0fc:	e7de      	b.n	800b0bc <_malloc_r+0xa0>
 800b0fe:	bf00      	nop
 800b100:	20001524 	.word	0x20001524

0800b104 <__ssputs_r>:
 800b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	688e      	ldr	r6, [r1, #8]
 800b10a:	429e      	cmp	r6, r3
 800b10c:	4682      	mov	sl, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	4690      	mov	r8, r2
 800b112:	461f      	mov	r7, r3
 800b114:	d838      	bhi.n	800b188 <__ssputs_r+0x84>
 800b116:	898a      	ldrh	r2, [r1, #12]
 800b118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b11c:	d032      	beq.n	800b184 <__ssputs_r+0x80>
 800b11e:	6825      	ldr	r5, [r4, #0]
 800b120:	6909      	ldr	r1, [r1, #16]
 800b122:	eba5 0901 	sub.w	r9, r5, r1
 800b126:	6965      	ldr	r5, [r4, #20]
 800b128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b130:	3301      	adds	r3, #1
 800b132:	444b      	add	r3, r9
 800b134:	106d      	asrs	r5, r5, #1
 800b136:	429d      	cmp	r5, r3
 800b138:	bf38      	it	cc
 800b13a:	461d      	movcc	r5, r3
 800b13c:	0553      	lsls	r3, r2, #21
 800b13e:	d531      	bpl.n	800b1a4 <__ssputs_r+0xa0>
 800b140:	4629      	mov	r1, r5
 800b142:	f7ff ff6b 	bl	800b01c <_malloc_r>
 800b146:	4606      	mov	r6, r0
 800b148:	b950      	cbnz	r0, 800b160 <__ssputs_r+0x5c>
 800b14a:	230c      	movs	r3, #12
 800b14c:	f8ca 3000 	str.w	r3, [sl]
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b160:	6921      	ldr	r1, [r4, #16]
 800b162:	464a      	mov	r2, r9
 800b164:	f7fc f922 	bl	80073ac <memcpy>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	6126      	str	r6, [r4, #16]
 800b176:	6165      	str	r5, [r4, #20]
 800b178:	444e      	add	r6, r9
 800b17a:	eba5 0509 	sub.w	r5, r5, r9
 800b17e:	6026      	str	r6, [r4, #0]
 800b180:	60a5      	str	r5, [r4, #8]
 800b182:	463e      	mov	r6, r7
 800b184:	42be      	cmp	r6, r7
 800b186:	d900      	bls.n	800b18a <__ssputs_r+0x86>
 800b188:	463e      	mov	r6, r7
 800b18a:	6820      	ldr	r0, [r4, #0]
 800b18c:	4632      	mov	r2, r6
 800b18e:	4641      	mov	r1, r8
 800b190:	f000 fb70 	bl	800b874 <memmove>
 800b194:	68a3      	ldr	r3, [r4, #8]
 800b196:	1b9b      	subs	r3, r3, r6
 800b198:	60a3      	str	r3, [r4, #8]
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	4433      	add	r3, r6
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e7db      	b.n	800b15c <__ssputs_r+0x58>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	f000 fb8b 	bl	800b8c0 <_realloc_r>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1e1      	bne.n	800b174 <__ssputs_r+0x70>
 800b1b0:	6921      	ldr	r1, [r4, #16]
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	f7ff fec8 	bl	800af48 <_free_r>
 800b1b8:	e7c7      	b.n	800b14a <__ssputs_r+0x46>
	...

0800b1bc <_svfiprintf_r>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	4698      	mov	r8, r3
 800b1c2:	898b      	ldrh	r3, [r1, #12]
 800b1c4:	061b      	lsls	r3, r3, #24
 800b1c6:	b09d      	sub	sp, #116	; 0x74
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	d50e      	bpl.n	800b1ee <_svfiprintf_r+0x32>
 800b1d0:	690b      	ldr	r3, [r1, #16]
 800b1d2:	b963      	cbnz	r3, 800b1ee <_svfiprintf_r+0x32>
 800b1d4:	2140      	movs	r1, #64	; 0x40
 800b1d6:	f7ff ff21 	bl	800b01c <_malloc_r>
 800b1da:	6028      	str	r0, [r5, #0]
 800b1dc:	6128      	str	r0, [r5, #16]
 800b1de:	b920      	cbnz	r0, 800b1ea <_svfiprintf_r+0x2e>
 800b1e0:	230c      	movs	r3, #12
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	e0d1      	b.n	800b38e <_svfiprintf_r+0x1d2>
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	616b      	str	r3, [r5, #20]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fc:	2330      	movs	r3, #48	; 0x30
 800b1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3a8 <_svfiprintf_r+0x1ec>
 800b202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b206:	f04f 0901 	mov.w	r9, #1
 800b20a:	4623      	mov	r3, r4
 800b20c:	469a      	mov	sl, r3
 800b20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b212:	b10a      	cbz	r2, 800b218 <_svfiprintf_r+0x5c>
 800b214:	2a25      	cmp	r2, #37	; 0x25
 800b216:	d1f9      	bne.n	800b20c <_svfiprintf_r+0x50>
 800b218:	ebba 0b04 	subs.w	fp, sl, r4
 800b21c:	d00b      	beq.n	800b236 <_svfiprintf_r+0x7a>
 800b21e:	465b      	mov	r3, fp
 800b220:	4622      	mov	r2, r4
 800b222:	4629      	mov	r1, r5
 800b224:	4638      	mov	r0, r7
 800b226:	f7ff ff6d 	bl	800b104 <__ssputs_r>
 800b22a:	3001      	adds	r0, #1
 800b22c:	f000 80aa 	beq.w	800b384 <_svfiprintf_r+0x1c8>
 800b230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b232:	445a      	add	r2, fp
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	f89a 3000 	ldrb.w	r3, [sl]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80a2 	beq.w	800b384 <_svfiprintf_r+0x1c8>
 800b240:	2300      	movs	r3, #0
 800b242:	f04f 32ff 	mov.w	r2, #4294967295
 800b246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b24a:	f10a 0a01 	add.w	sl, sl, #1
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	9307      	str	r3, [sp, #28]
 800b252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b256:	931a      	str	r3, [sp, #104]	; 0x68
 800b258:	4654      	mov	r4, sl
 800b25a:	2205      	movs	r2, #5
 800b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b260:	4851      	ldr	r0, [pc, #324]	; (800b3a8 <_svfiprintf_r+0x1ec>)
 800b262:	f7f4 ffdd 	bl	8000220 <memchr>
 800b266:	9a04      	ldr	r2, [sp, #16]
 800b268:	b9d8      	cbnz	r0, 800b2a2 <_svfiprintf_r+0xe6>
 800b26a:	06d0      	lsls	r0, r2, #27
 800b26c:	bf44      	itt	mi
 800b26e:	2320      	movmi	r3, #32
 800b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b274:	0711      	lsls	r1, r2, #28
 800b276:	bf44      	itt	mi
 800b278:	232b      	movmi	r3, #43	; 0x2b
 800b27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27e:	f89a 3000 	ldrb.w	r3, [sl]
 800b282:	2b2a      	cmp	r3, #42	; 0x2a
 800b284:	d015      	beq.n	800b2b2 <_svfiprintf_r+0xf6>
 800b286:	9a07      	ldr	r2, [sp, #28]
 800b288:	4654      	mov	r4, sl
 800b28a:	2000      	movs	r0, #0
 800b28c:	f04f 0c0a 	mov.w	ip, #10
 800b290:	4621      	mov	r1, r4
 800b292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b296:	3b30      	subs	r3, #48	; 0x30
 800b298:	2b09      	cmp	r3, #9
 800b29a:	d94e      	bls.n	800b33a <_svfiprintf_r+0x17e>
 800b29c:	b1b0      	cbz	r0, 800b2cc <_svfiprintf_r+0x110>
 800b29e:	9207      	str	r2, [sp, #28]
 800b2a0:	e014      	b.n	800b2cc <_svfiprintf_r+0x110>
 800b2a2:	eba0 0308 	sub.w	r3, r0, r8
 800b2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	46a2      	mov	sl, r4
 800b2b0:	e7d2      	b.n	800b258 <_svfiprintf_r+0x9c>
 800b2b2:	9b03      	ldr	r3, [sp, #12]
 800b2b4:	1d19      	adds	r1, r3, #4
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	9103      	str	r1, [sp, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bfbb      	ittet	lt
 800b2be:	425b      	neglt	r3, r3
 800b2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c4:	9307      	strge	r3, [sp, #28]
 800b2c6:	9307      	strlt	r3, [sp, #28]
 800b2c8:	bfb8      	it	lt
 800b2ca:	9204      	strlt	r2, [sp, #16]
 800b2cc:	7823      	ldrb	r3, [r4, #0]
 800b2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d0:	d10c      	bne.n	800b2ec <_svfiprintf_r+0x130>
 800b2d2:	7863      	ldrb	r3, [r4, #1]
 800b2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d6:	d135      	bne.n	800b344 <_svfiprintf_r+0x188>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	1d1a      	adds	r2, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	9203      	str	r2, [sp, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfb8      	it	lt
 800b2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2e8:	3402      	adds	r4, #2
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b3ac <_svfiprintf_r+0x1f0>
 800b2f0:	7821      	ldrb	r1, [r4, #0]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	f7f4 ff93 	bl	8000220 <memchr>
 800b2fa:	b140      	cbz	r0, 800b30e <_svfiprintf_r+0x152>
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	eba0 000a 	sub.w	r0, r0, sl
 800b302:	fa03 f000 	lsl.w	r0, r3, r0
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	4303      	orrs	r3, r0
 800b30a:	3401      	adds	r4, #1
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b312:	4827      	ldr	r0, [pc, #156]	; (800b3b0 <_svfiprintf_r+0x1f4>)
 800b314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b318:	2206      	movs	r2, #6
 800b31a:	f7f4 ff81 	bl	8000220 <memchr>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d038      	beq.n	800b394 <_svfiprintf_r+0x1d8>
 800b322:	4b24      	ldr	r3, [pc, #144]	; (800b3b4 <_svfiprintf_r+0x1f8>)
 800b324:	bb1b      	cbnz	r3, 800b36e <_svfiprintf_r+0x1b2>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	3307      	adds	r3, #7
 800b32a:	f023 0307 	bic.w	r3, r3, #7
 800b32e:	3308      	adds	r3, #8
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b334:	4433      	add	r3, r6
 800b336:	9309      	str	r3, [sp, #36]	; 0x24
 800b338:	e767      	b.n	800b20a <_svfiprintf_r+0x4e>
 800b33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b33e:	460c      	mov	r4, r1
 800b340:	2001      	movs	r0, #1
 800b342:	e7a5      	b.n	800b290 <_svfiprintf_r+0xd4>
 800b344:	2300      	movs	r3, #0
 800b346:	3401      	adds	r4, #1
 800b348:	9305      	str	r3, [sp, #20]
 800b34a:	4619      	mov	r1, r3
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	4620      	mov	r0, r4
 800b352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b356:	3a30      	subs	r2, #48	; 0x30
 800b358:	2a09      	cmp	r2, #9
 800b35a:	d903      	bls.n	800b364 <_svfiprintf_r+0x1a8>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0c5      	beq.n	800b2ec <_svfiprintf_r+0x130>
 800b360:	9105      	str	r1, [sp, #20]
 800b362:	e7c3      	b.n	800b2ec <_svfiprintf_r+0x130>
 800b364:	fb0c 2101 	mla	r1, ip, r1, r2
 800b368:	4604      	mov	r4, r0
 800b36a:	2301      	movs	r3, #1
 800b36c:	e7f0      	b.n	800b350 <_svfiprintf_r+0x194>
 800b36e:	ab03      	add	r3, sp, #12
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	462a      	mov	r2, r5
 800b374:	4b10      	ldr	r3, [pc, #64]	; (800b3b8 <_svfiprintf_r+0x1fc>)
 800b376:	a904      	add	r1, sp, #16
 800b378:	4638      	mov	r0, r7
 800b37a:	f7fc f8cb 	bl	8007514 <_printf_float>
 800b37e:	1c42      	adds	r2, r0, #1
 800b380:	4606      	mov	r6, r0
 800b382:	d1d6      	bne.n	800b332 <_svfiprintf_r+0x176>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af2c 	bmi.w	800b1e4 <_svfiprintf_r+0x28>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	b01d      	add	sp, #116	; 0x74
 800b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b394:	ab03      	add	r3, sp, #12
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	462a      	mov	r2, r5
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <_svfiprintf_r+0x1fc>)
 800b39c:	a904      	add	r1, sp, #16
 800b39e:	4638      	mov	r0, r7
 800b3a0:	f7fc fb50 	bl	8007a44 <_printf_i>
 800b3a4:	e7eb      	b.n	800b37e <_svfiprintf_r+0x1c2>
 800b3a6:	bf00      	nop
 800b3a8:	0800bfdc 	.word	0x0800bfdc
 800b3ac:	0800bfe2 	.word	0x0800bfe2
 800b3b0:	0800bfe6 	.word	0x0800bfe6
 800b3b4:	08007515 	.word	0x08007515
 800b3b8:	0800b105 	.word	0x0800b105

0800b3bc <__sfputc_r>:
 800b3bc:	6893      	ldr	r3, [r2, #8]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	b410      	push	{r4}
 800b3c4:	6093      	str	r3, [r2, #8]
 800b3c6:	da07      	bge.n	800b3d8 <__sfputc_r+0x1c>
 800b3c8:	6994      	ldr	r4, [r2, #24]
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	db01      	blt.n	800b3d2 <__sfputc_r+0x16>
 800b3ce:	290a      	cmp	r1, #10
 800b3d0:	d102      	bne.n	800b3d8 <__sfputc_r+0x1c>
 800b3d2:	bc10      	pop	{r4}
 800b3d4:	f7fd bc1c 	b.w	8008c10 <__swbuf_r>
 800b3d8:	6813      	ldr	r3, [r2, #0]
 800b3da:	1c58      	adds	r0, r3, #1
 800b3dc:	6010      	str	r0, [r2, #0]
 800b3de:	7019      	strb	r1, [r3, #0]
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	bc10      	pop	{r4}
 800b3e4:	4770      	bx	lr

0800b3e6 <__sfputs_r>:
 800b3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460f      	mov	r7, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	18d5      	adds	r5, r2, r3
 800b3f0:	42ac      	cmp	r4, r5
 800b3f2:	d101      	bne.n	800b3f8 <__sfputs_r+0x12>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e007      	b.n	800b408 <__sfputs_r+0x22>
 800b3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3fc:	463a      	mov	r2, r7
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ffdc 	bl	800b3bc <__sfputc_r>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d1f3      	bne.n	800b3f0 <__sfputs_r+0xa>
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b40c <_vfiprintf_r>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	460d      	mov	r5, r1
 800b412:	b09d      	sub	sp, #116	; 0x74
 800b414:	4614      	mov	r4, r2
 800b416:	4698      	mov	r8, r3
 800b418:	4606      	mov	r6, r0
 800b41a:	b118      	cbz	r0, 800b424 <_vfiprintf_r+0x18>
 800b41c:	6983      	ldr	r3, [r0, #24]
 800b41e:	b90b      	cbnz	r3, 800b424 <_vfiprintf_r+0x18>
 800b420:	f7fe fc42 	bl	8009ca8 <__sinit>
 800b424:	4b89      	ldr	r3, [pc, #548]	; (800b64c <_vfiprintf_r+0x240>)
 800b426:	429d      	cmp	r5, r3
 800b428:	d11b      	bne.n	800b462 <_vfiprintf_r+0x56>
 800b42a:	6875      	ldr	r5, [r6, #4]
 800b42c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b42e:	07d9      	lsls	r1, r3, #31
 800b430:	d405      	bmi.n	800b43e <_vfiprintf_r+0x32>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d402      	bmi.n	800b43e <_vfiprintf_r+0x32>
 800b438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43a:	f7ff f83c 	bl	800a4b6 <__retarget_lock_acquire_recursive>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	071b      	lsls	r3, r3, #28
 800b442:	d501      	bpl.n	800b448 <_vfiprintf_r+0x3c>
 800b444:	692b      	ldr	r3, [r5, #16]
 800b446:	b9eb      	cbnz	r3, 800b484 <_vfiprintf_r+0x78>
 800b448:	4629      	mov	r1, r5
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7fd fc32 	bl	8008cb4 <__swsetup_r>
 800b450:	b1c0      	cbz	r0, 800b484 <_vfiprintf_r+0x78>
 800b452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b454:	07dc      	lsls	r4, r3, #31
 800b456:	d50e      	bpl.n	800b476 <_vfiprintf_r+0x6a>
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	b01d      	add	sp, #116	; 0x74
 800b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b462:	4b7b      	ldr	r3, [pc, #492]	; (800b650 <_vfiprintf_r+0x244>)
 800b464:	429d      	cmp	r5, r3
 800b466:	d101      	bne.n	800b46c <_vfiprintf_r+0x60>
 800b468:	68b5      	ldr	r5, [r6, #8]
 800b46a:	e7df      	b.n	800b42c <_vfiprintf_r+0x20>
 800b46c:	4b79      	ldr	r3, [pc, #484]	; (800b654 <_vfiprintf_r+0x248>)
 800b46e:	429d      	cmp	r5, r3
 800b470:	bf08      	it	eq
 800b472:	68f5      	ldreq	r5, [r6, #12]
 800b474:	e7da      	b.n	800b42c <_vfiprintf_r+0x20>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	0598      	lsls	r0, r3, #22
 800b47a:	d4ed      	bmi.n	800b458 <_vfiprintf_r+0x4c>
 800b47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b47e:	f7ff f81b 	bl	800a4b8 <__retarget_lock_release_recursive>
 800b482:	e7e9      	b.n	800b458 <_vfiprintf_r+0x4c>
 800b484:	2300      	movs	r3, #0
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	2320      	movs	r3, #32
 800b48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b492:	2330      	movs	r3, #48	; 0x30
 800b494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b658 <_vfiprintf_r+0x24c>
 800b498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b49c:	f04f 0901 	mov.w	r9, #1
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	469a      	mov	sl, r3
 800b4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a8:	b10a      	cbz	r2, 800b4ae <_vfiprintf_r+0xa2>
 800b4aa:	2a25      	cmp	r2, #37	; 0x25
 800b4ac:	d1f9      	bne.n	800b4a2 <_vfiprintf_r+0x96>
 800b4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b2:	d00b      	beq.n	800b4cc <_vfiprintf_r+0xc0>
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ff93 	bl	800b3e6 <__sfputs_r>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f000 80aa 	beq.w	800b61a <_vfiprintf_r+0x20e>
 800b4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c8:	445a      	add	r2, fp
 800b4ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80a2 	beq.w	800b61a <_vfiprintf_r+0x20e>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2205      	movs	r2, #5
 800b4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f6:	4858      	ldr	r0, [pc, #352]	; (800b658 <_vfiprintf_r+0x24c>)
 800b4f8:	f7f4 fe92 	bl	8000220 <memchr>
 800b4fc:	9a04      	ldr	r2, [sp, #16]
 800b4fe:	b9d8      	cbnz	r0, 800b538 <_vfiprintf_r+0x12c>
 800b500:	06d1      	lsls	r1, r2, #27
 800b502:	bf44      	itt	mi
 800b504:	2320      	movmi	r3, #32
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50a:	0713      	lsls	r3, r2, #28
 800b50c:	bf44      	itt	mi
 800b50e:	232b      	movmi	r3, #43	; 0x2b
 800b510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b514:	f89a 3000 	ldrb.w	r3, [sl]
 800b518:	2b2a      	cmp	r3, #42	; 0x2a
 800b51a:	d015      	beq.n	800b548 <_vfiprintf_r+0x13c>
 800b51c:	9a07      	ldr	r2, [sp, #28]
 800b51e:	4654      	mov	r4, sl
 800b520:	2000      	movs	r0, #0
 800b522:	f04f 0c0a 	mov.w	ip, #10
 800b526:	4621      	mov	r1, r4
 800b528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52c:	3b30      	subs	r3, #48	; 0x30
 800b52e:	2b09      	cmp	r3, #9
 800b530:	d94e      	bls.n	800b5d0 <_vfiprintf_r+0x1c4>
 800b532:	b1b0      	cbz	r0, 800b562 <_vfiprintf_r+0x156>
 800b534:	9207      	str	r2, [sp, #28]
 800b536:	e014      	b.n	800b562 <_vfiprintf_r+0x156>
 800b538:	eba0 0308 	sub.w	r3, r0, r8
 800b53c:	fa09 f303 	lsl.w	r3, r9, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	46a2      	mov	sl, r4
 800b546:	e7d2      	b.n	800b4ee <_vfiprintf_r+0xe2>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d19      	adds	r1, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9103      	str	r1, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfbb      	ittet	lt
 800b554:	425b      	neglt	r3, r3
 800b556:	f042 0202 	orrlt.w	r2, r2, #2
 800b55a:	9307      	strge	r3, [sp, #28]
 800b55c:	9307      	strlt	r3, [sp, #28]
 800b55e:	bfb8      	it	lt
 800b560:	9204      	strlt	r2, [sp, #16]
 800b562:	7823      	ldrb	r3, [r4, #0]
 800b564:	2b2e      	cmp	r3, #46	; 0x2e
 800b566:	d10c      	bne.n	800b582 <_vfiprintf_r+0x176>
 800b568:	7863      	ldrb	r3, [r4, #1]
 800b56a:	2b2a      	cmp	r3, #42	; 0x2a
 800b56c:	d135      	bne.n	800b5da <_vfiprintf_r+0x1ce>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	9203      	str	r2, [sp, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	bfb8      	it	lt
 800b57a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b57e:	3402      	adds	r4, #2
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b65c <_vfiprintf_r+0x250>
 800b586:	7821      	ldrb	r1, [r4, #0]
 800b588:	2203      	movs	r2, #3
 800b58a:	4650      	mov	r0, sl
 800b58c:	f7f4 fe48 	bl	8000220 <memchr>
 800b590:	b140      	cbz	r0, 800b5a4 <_vfiprintf_r+0x198>
 800b592:	2340      	movs	r3, #64	; 0x40
 800b594:	eba0 000a 	sub.w	r0, r0, sl
 800b598:	fa03 f000 	lsl.w	r0, r3, r0
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	4303      	orrs	r3, r0
 800b5a0:	3401      	adds	r4, #1
 800b5a2:	9304      	str	r3, [sp, #16]
 800b5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a8:	482d      	ldr	r0, [pc, #180]	; (800b660 <_vfiprintf_r+0x254>)
 800b5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ae:	2206      	movs	r2, #6
 800b5b0:	f7f4 fe36 	bl	8000220 <memchr>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d03f      	beq.n	800b638 <_vfiprintf_r+0x22c>
 800b5b8:	4b2a      	ldr	r3, [pc, #168]	; (800b664 <_vfiprintf_r+0x258>)
 800b5ba:	bb1b      	cbnz	r3, 800b604 <_vfiprintf_r+0x1f8>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	3307      	adds	r3, #7
 800b5c0:	f023 0307 	bic.w	r3, r3, #7
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ca:	443b      	add	r3, r7
 800b5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ce:	e767      	b.n	800b4a0 <_vfiprintf_r+0x94>
 800b5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	e7a5      	b.n	800b526 <_vfiprintf_r+0x11a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	3401      	adds	r4, #1
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ec:	3a30      	subs	r2, #48	; 0x30
 800b5ee:	2a09      	cmp	r2, #9
 800b5f0:	d903      	bls.n	800b5fa <_vfiprintf_r+0x1ee>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0c5      	beq.n	800b582 <_vfiprintf_r+0x176>
 800b5f6:	9105      	str	r1, [sp, #20]
 800b5f8:	e7c3      	b.n	800b582 <_vfiprintf_r+0x176>
 800b5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5fe:	4604      	mov	r4, r0
 800b600:	2301      	movs	r3, #1
 800b602:	e7f0      	b.n	800b5e6 <_vfiprintf_r+0x1da>
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	462a      	mov	r2, r5
 800b60a:	4b17      	ldr	r3, [pc, #92]	; (800b668 <_vfiprintf_r+0x25c>)
 800b60c:	a904      	add	r1, sp, #16
 800b60e:	4630      	mov	r0, r6
 800b610:	f7fb ff80 	bl	8007514 <_printf_float>
 800b614:	4607      	mov	r7, r0
 800b616:	1c78      	adds	r0, r7, #1
 800b618:	d1d6      	bne.n	800b5c8 <_vfiprintf_r+0x1bc>
 800b61a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b61c:	07d9      	lsls	r1, r3, #31
 800b61e:	d405      	bmi.n	800b62c <_vfiprintf_r+0x220>
 800b620:	89ab      	ldrh	r3, [r5, #12]
 800b622:	059a      	lsls	r2, r3, #22
 800b624:	d402      	bmi.n	800b62c <_vfiprintf_r+0x220>
 800b626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b628:	f7fe ff46 	bl	800a4b8 <__retarget_lock_release_recursive>
 800b62c:	89ab      	ldrh	r3, [r5, #12]
 800b62e:	065b      	lsls	r3, r3, #25
 800b630:	f53f af12 	bmi.w	800b458 <_vfiprintf_r+0x4c>
 800b634:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b636:	e711      	b.n	800b45c <_vfiprintf_r+0x50>
 800b638:	ab03      	add	r3, sp, #12
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	462a      	mov	r2, r5
 800b63e:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <_vfiprintf_r+0x25c>)
 800b640:	a904      	add	r1, sp, #16
 800b642:	4630      	mov	r0, r6
 800b644:	f7fc f9fe 	bl	8007a44 <_printf_i>
 800b648:	e7e4      	b.n	800b614 <_vfiprintf_r+0x208>
 800b64a:	bf00      	nop
 800b64c:	0800bdc4 	.word	0x0800bdc4
 800b650:	0800bde4 	.word	0x0800bde4
 800b654:	0800bda4 	.word	0x0800bda4
 800b658:	0800bfdc 	.word	0x0800bfdc
 800b65c:	0800bfe2 	.word	0x0800bfe2
 800b660:	0800bfe6 	.word	0x0800bfe6
 800b664:	08007515 	.word	0x08007515
 800b668:	0800b3e7 	.word	0x0800b3e7

0800b66c <nan>:
 800b66c:	4901      	ldr	r1, [pc, #4]	; (800b674 <nan+0x8>)
 800b66e:	2000      	movs	r0, #0
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	7ff80000 	.word	0x7ff80000

0800b678 <_sbrk_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d06      	ldr	r5, [pc, #24]	; (800b694 <_sbrk_r+0x1c>)
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	f7f7 fbc0 	bl	8002e08 <_sbrk>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_sbrk_r+0x1a>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_sbrk_r+0x1a>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	2000152c 	.word	0x2000152c

0800b698 <nanf>:
 800b698:	4800      	ldr	r0, [pc, #0]	; (800b69c <nanf+0x4>)
 800b69a:	4770      	bx	lr
 800b69c:	7fc00000 	.word	0x7fc00000

0800b6a0 <__sread>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a8:	f000 f93a 	bl	800b920 <_read_r>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	bfab      	itete	ge
 800b6b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6b4:	181b      	addge	r3, r3, r0
 800b6b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6ba:	bfac      	ite	ge
 800b6bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6be:	81a3      	strhlt	r3, [r4, #12]
 800b6c0:	bd10      	pop	{r4, pc}

0800b6c2 <__swrite>:
 800b6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c6:	461f      	mov	r7, r3
 800b6c8:	898b      	ldrh	r3, [r1, #12]
 800b6ca:	05db      	lsls	r3, r3, #23
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	4616      	mov	r6, r2
 800b6d2:	d505      	bpl.n	800b6e0 <__swrite+0x1e>
 800b6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d8:	2302      	movs	r3, #2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f000 f8b8 	bl	800b850 <_lseek_r>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f6:	f000 b837 	b.w	800b768 <_write_r>

0800b6fa <__sseek>:
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b702:	f000 f8a5 	bl	800b850 <_lseek_r>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	bf15      	itete	ne
 800b70c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b70e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b716:	81a3      	strheq	r3, [r4, #12]
 800b718:	bf18      	it	ne
 800b71a:	81a3      	strhne	r3, [r4, #12]
 800b71c:	bd10      	pop	{r4, pc}

0800b71e <__sclose>:
 800b71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b722:	f000 b851 	b.w	800b7c8 <_close_r>

0800b726 <strncmp>:
 800b726:	b510      	push	{r4, lr}
 800b728:	4603      	mov	r3, r0
 800b72a:	b172      	cbz	r2, 800b74a <strncmp+0x24>
 800b72c:	3901      	subs	r1, #1
 800b72e:	1884      	adds	r4, r0, r2
 800b730:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b734:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b738:	4290      	cmp	r0, r2
 800b73a:	d101      	bne.n	800b740 <strncmp+0x1a>
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	d101      	bne.n	800b744 <strncmp+0x1e>
 800b740:	1a80      	subs	r0, r0, r2
 800b742:	bd10      	pop	{r4, pc}
 800b744:	2800      	cmp	r0, #0
 800b746:	d1f3      	bne.n	800b730 <strncmp+0xa>
 800b748:	e7fa      	b.n	800b740 <strncmp+0x1a>
 800b74a:	4610      	mov	r0, r2
 800b74c:	e7f9      	b.n	800b742 <strncmp+0x1c>

0800b74e <__ascii_wctomb>:
 800b74e:	4603      	mov	r3, r0
 800b750:	4608      	mov	r0, r1
 800b752:	b141      	cbz	r1, 800b766 <__ascii_wctomb+0x18>
 800b754:	2aff      	cmp	r2, #255	; 0xff
 800b756:	d904      	bls.n	800b762 <__ascii_wctomb+0x14>
 800b758:	228a      	movs	r2, #138	; 0x8a
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	4770      	bx	lr
 800b762:	700a      	strb	r2, [r1, #0]
 800b764:	2001      	movs	r0, #1
 800b766:	4770      	bx	lr

0800b768 <_write_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_write_r+0x20>)
 800b76c:	4604      	mov	r4, r0
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f7f7 fb04 	bl	8002d84 <_write>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_write_r+0x1e>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_write_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	2000152c 	.word	0x2000152c

0800b78c <__assert_func>:
 800b78c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b78e:	4614      	mov	r4, r2
 800b790:	461a      	mov	r2, r3
 800b792:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <__assert_func+0x2c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4605      	mov	r5, r0
 800b798:	68d8      	ldr	r0, [r3, #12]
 800b79a:	b14c      	cbz	r4, 800b7b0 <__assert_func+0x24>
 800b79c:	4b07      	ldr	r3, [pc, #28]	; (800b7bc <__assert_func+0x30>)
 800b79e:	9100      	str	r1, [sp, #0]
 800b7a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7a4:	4906      	ldr	r1, [pc, #24]	; (800b7c0 <__assert_func+0x34>)
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f000 f81e 	bl	800b7e8 <fiprintf>
 800b7ac:	f000 f8ca 	bl	800b944 <abort>
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <__assert_func+0x38>)
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	e7f3      	b.n	800b79e <__assert_func+0x12>
 800b7b6:	bf00      	nop
 800b7b8:	2000000c 	.word	0x2000000c
 800b7bc:	0800bfed 	.word	0x0800bfed
 800b7c0:	0800bffa 	.word	0x0800bffa
 800b7c4:	0800c028 	.word	0x0800c028

0800b7c8 <_close_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d06      	ldr	r5, [pc, #24]	; (800b7e4 <_close_r+0x1c>)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	602b      	str	r3, [r5, #0]
 800b7d4:	f7f7 fae7 	bl	8002da6 <_close>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_close_r+0x1a>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_close_r+0x1a>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	2000152c 	.word	0x2000152c

0800b7e8 <fiprintf>:
 800b7e8:	b40e      	push	{r1, r2, r3}
 800b7ea:	b503      	push	{r0, r1, lr}
 800b7ec:	4601      	mov	r1, r0
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	4805      	ldr	r0, [pc, #20]	; (800b808 <fiprintf+0x20>)
 800b7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f6:	6800      	ldr	r0, [r0, #0]
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f7ff fe07 	bl	800b40c <_vfiprintf_r>
 800b7fe:	b002      	add	sp, #8
 800b800:	f85d eb04 	ldr.w	lr, [sp], #4
 800b804:	b003      	add	sp, #12
 800b806:	4770      	bx	lr
 800b808:	2000000c 	.word	0x2000000c

0800b80c <_fstat_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	; (800b82c <_fstat_r+0x20>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f7f7 facf 	bl	8002dbc <_fstat>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d102      	bne.n	800b828 <_fstat_r+0x1c>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	b103      	cbz	r3, 800b828 <_fstat_r+0x1c>
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	bd38      	pop	{r3, r4, r5, pc}
 800b82a:	bf00      	nop
 800b82c:	2000152c 	.word	0x2000152c

0800b830 <_isatty_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	; (800b84c <_isatty_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f7 facd 	bl	8002dda <_isatty>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_isatty_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_isatty_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	2000152c 	.word	0x2000152c

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f7 fac5 	bl	8002dee <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	2000152c 	.word	0x2000152c

0800b874 <memmove>:
 800b874:	4288      	cmp	r0, r1
 800b876:	b510      	push	{r4, lr}
 800b878:	eb01 0402 	add.w	r4, r1, r2
 800b87c:	d902      	bls.n	800b884 <memmove+0x10>
 800b87e:	4284      	cmp	r4, r0
 800b880:	4623      	mov	r3, r4
 800b882:	d807      	bhi.n	800b894 <memmove+0x20>
 800b884:	1e43      	subs	r3, r0, #1
 800b886:	42a1      	cmp	r1, r4
 800b888:	d008      	beq.n	800b89c <memmove+0x28>
 800b88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b88e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b892:	e7f8      	b.n	800b886 <memmove+0x12>
 800b894:	4402      	add	r2, r0
 800b896:	4601      	mov	r1, r0
 800b898:	428a      	cmp	r2, r1
 800b89a:	d100      	bne.n	800b89e <memmove+0x2a>
 800b89c:	bd10      	pop	{r4, pc}
 800b89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8a6:	e7f7      	b.n	800b898 <memmove+0x24>

0800b8a8 <__malloc_lock>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	; (800b8b0 <__malloc_lock+0x8>)
 800b8aa:	f7fe be04 	b.w	800a4b6 <__retarget_lock_acquire_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	20001520 	.word	0x20001520

0800b8b4 <__malloc_unlock>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__malloc_unlock+0x8>)
 800b8b6:	f7fe bdff 	b.w	800a4b8 <__retarget_lock_release_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	20001520 	.word	0x20001520

0800b8c0 <_realloc_r>:
 800b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	4614      	mov	r4, r2
 800b8c8:	460e      	mov	r6, r1
 800b8ca:	b921      	cbnz	r1, 800b8d6 <_realloc_r+0x16>
 800b8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	f7ff bba3 	b.w	800b01c <_malloc_r>
 800b8d6:	b92a      	cbnz	r2, 800b8e4 <_realloc_r+0x24>
 800b8d8:	f7ff fb36 	bl	800af48 <_free_r>
 800b8dc:	4625      	mov	r5, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	f000 f835 	bl	800b952 <_malloc_usable_size_r>
 800b8e8:	4284      	cmp	r4, r0
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	d802      	bhi.n	800b8f4 <_realloc_r+0x34>
 800b8ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8f2:	d812      	bhi.n	800b91a <_realloc_r+0x5a>
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	f7ff fb90 	bl	800b01c <_malloc_r>
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d0ed      	beq.n	800b8de <_realloc_r+0x1e>
 800b902:	42bc      	cmp	r4, r7
 800b904:	4622      	mov	r2, r4
 800b906:	4631      	mov	r1, r6
 800b908:	bf28      	it	cs
 800b90a:	463a      	movcs	r2, r7
 800b90c:	f7fb fd4e 	bl	80073ac <memcpy>
 800b910:	4631      	mov	r1, r6
 800b912:	4640      	mov	r0, r8
 800b914:	f7ff fb18 	bl	800af48 <_free_r>
 800b918:	e7e1      	b.n	800b8de <_realloc_r+0x1e>
 800b91a:	4635      	mov	r5, r6
 800b91c:	e7df      	b.n	800b8de <_realloc_r+0x1e>
	...

0800b920 <_read_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	; (800b940 <_read_r+0x20>)
 800b924:	4604      	mov	r4, r0
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7f7 fa0b 	bl	8002d4a <_read>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_read_r+0x1e>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_read_r+0x1e>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	2000152c 	.word	0x2000152c

0800b944 <abort>:
 800b944:	b508      	push	{r3, lr}
 800b946:	2006      	movs	r0, #6
 800b948:	f000 f834 	bl	800b9b4 <raise>
 800b94c:	2001      	movs	r0, #1
 800b94e:	f7f7 f9f2 	bl	8002d36 <_exit>

0800b952 <_malloc_usable_size_r>:
 800b952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b956:	1f18      	subs	r0, r3, #4
 800b958:	2b00      	cmp	r3, #0
 800b95a:	bfbc      	itt	lt
 800b95c:	580b      	ldrlt	r3, [r1, r0]
 800b95e:	18c0      	addlt	r0, r0, r3
 800b960:	4770      	bx	lr

0800b962 <_raise_r>:
 800b962:	291f      	cmp	r1, #31
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	d904      	bls.n	800b976 <_raise_r+0x14>
 800b96c:	2316      	movs	r3, #22
 800b96e:	6003      	str	r3, [r0, #0]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b978:	b112      	cbz	r2, 800b980 <_raise_r+0x1e>
 800b97a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b97e:	b94b      	cbnz	r3, 800b994 <_raise_r+0x32>
 800b980:	4620      	mov	r0, r4
 800b982:	f000 f831 	bl	800b9e8 <_getpid_r>
 800b986:	462a      	mov	r2, r5
 800b988:	4601      	mov	r1, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b990:	f000 b818 	b.w	800b9c4 <_kill_r>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d00a      	beq.n	800b9ae <_raise_r+0x4c>
 800b998:	1c59      	adds	r1, r3, #1
 800b99a:	d103      	bne.n	800b9a4 <_raise_r+0x42>
 800b99c:	2316      	movs	r3, #22
 800b99e:	6003      	str	r3, [r0, #0]
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	e7e7      	b.n	800b974 <_raise_r+0x12>
 800b9a4:	2400      	movs	r4, #0
 800b9a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	4798      	blx	r3
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	e7e0      	b.n	800b974 <_raise_r+0x12>
	...

0800b9b4 <raise>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <raise+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f7ff bfd2 	b.w	800b962 <_raise_r>
 800b9be:	bf00      	nop
 800b9c0:	2000000c 	.word	0x2000000c

0800b9c4 <_kill_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	; (800b9e4 <_kill_r+0x20>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	602b      	str	r3, [r5, #0]
 800b9d2:	f7f7 f9a0 	bl	8002d16 <_kill>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d102      	bne.n	800b9e0 <_kill_r+0x1c>
 800b9da:	682b      	ldr	r3, [r5, #0]
 800b9dc:	b103      	cbz	r3, 800b9e0 <_kill_r+0x1c>
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	bd38      	pop	{r3, r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	2000152c 	.word	0x2000152c

0800b9e8 <_getpid_r>:
 800b9e8:	f7f7 b98e 	b.w	8002d08 <_getpid>

0800b9ec <_init>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_fini>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr
